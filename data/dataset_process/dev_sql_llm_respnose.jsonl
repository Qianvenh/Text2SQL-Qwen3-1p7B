{"instruction": "concert_singer contains tables such as stadium, singer, concert, singer_in_concert. Table stadium has columns such as stadium_id, location, name, capacity, highest, lowest, average. stadium_id is the primary key. Table singer has columns such as singer_id, name, country, song_name, song_release_year, age, is_male. singer_id is the primary key. Table concert has columns such as concert_id, concert_name, theme, stadium_id, year. concert_id is the primary key. Table singer_in_concert has columns such as concert_id, singer_id. concert_id is the primary key. The stadium_id of concert is the foreign key of stadium_id of stadium. The singer_id of singer_in_concert is the foreign key of singer_id of singer. The concert_id of singer_in_concert is the foreign key of concert_id of concert.", "input": "How many singers do we have?", "output": "select count(*) from singer", "table_creating": "<sql>\nCREATE TABLE stadium (\n    stadium_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    name VARCHAR(255),\n    capacity INT,\n    highest INT,\n    lowest INT,\n    average INT\n);\n\nCREATE TABLE singer (\n    singer_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    country VARCHAR(255),\n    song_name VARCHAR(255),\n    song_release_year INT,\n    age INT,\n    is_male BOOLEAN\n);\n\nCREATE TABLE concert (\n    concert_id INT PRIMARY KEY,\n    concert_name VARCHAR(255),\n    theme VARCHAR(255),\n    stadium_id INT,\n    year INT,\n    FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id)\n);\n\nCREATE TABLE singer_in_concert (\n    concert_id INT,\n    singer_id INT,\n    PRIMARY KEY (concert_id, singer_id),\n    FOREIGN KEY (concert_id) REFERENCES concert(concert_id),\n    FOREIGN KEY (singer_id) REFERENCES singer(singer_id)\n);\n</sql>", "idx": 0}
{"instruction": "concert_singer contains tables such as stadium, singer, concert, singer_in_concert. Table stadium has columns such as stadium_id, location, name, capacity, highest, lowest, average. stadium_id is the primary key. Table singer has columns such as singer_id, name, country, song_name, song_release_year, age, is_male. singer_id is the primary key. The country contains values such as France. Table concert has columns such as concert_id, concert_name, theme, stadium_id, year. concert_id is the primary key. Table singer_in_concert has columns such as concert_id, singer_id. concert_id is the primary key. The stadium_id of concert is the foreign key of stadium_id of stadium. The singer_id of singer_in_concert is the foreign key of singer_id of singer. The concert_id of singer_in_concert is the foreign key of concert_id of concert.", "input": "What is the average, minimum, and maximum age of all singers from France?", "output": "select avg(age), min(age), max(age) from singer where country = 'France'", "table_creating": "<sql>\nCREATE TABLE stadium (\n    stadium_id INT PRIMARY KEY,\n    location VARCHAR(255),\n    name VARCHAR(255),\n    capacity INT,\n    highest INT,\n    lowest INT,\n    average INT\n);\n\nCREATE TABLE singer (\n    singer_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    country VARCHAR(255),\n    song_name VARCHAR(255),\n    song_release_year INT,\n    age INT,\n    is_male BOOLEAN\n);\n\nCREATE TABLE concert (\n    concert_id INT PRIMARY KEY,\n    concert_name VARCHAR(255),\n    theme VARCHAR(255),\n    stadium_id INT,\n    year INT,\n    FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id)\n);\n\nCREATE TABLE singer_in_concert (\n    concert_id INT,\n    singer_id INT,\n    PRIMARY KEY (concert_id),\n    FOREIGN KEY (concert_id) REFERENCES concert(concert_id),\n    FOREIGN KEY (singer_id) REFERENCES singer(singer_id)\n);\n</sql>", "idx": 4}
{"instruction": "pets_1 contains tables such as student, has_pet, pets. Table student has columns such as stuid, lname, fname, age, sex, major, advisor, city_code. stuid is the primary key. Table has_pet has columns such as stuid, petid.  is the primary key. Table pets has columns such as petid, pettype, pet_age, weight. petid is the primary key. The stuid of has_pet is the foreign key of stuid of student. The petid of has_pet is the foreign key of petid of pets.", "input": "Find the number of pets whose weight is heavier than 10.", "output": "select count(*) from pets where weight > 10", "table_creating": "<sql>\nCREATE TABLE student (\n    stuid      INT PRIMARY KEY,\n    lname      VARCHAR(50),\n    fname      VARCHAR(50),\n    age        INT,\n    sex        CHAR(1),\n    major      VARCHAR(50),\n    advisor    VARCHAR(50),\n    city_code  VARCHAR(10)\n);\n\nCREATE TABLE pets (\n    petid      INT PRIMARY KEY,\n    pettype    VARCHAR(30),\n    pet_age    INT,\n    weight     DECIMAL(5,2)\n);\n\nCREATE TABLE has_pet (\n    stuid  INT,\n    petid  INT,\n    PRIMARY KEY (stuid, petid),\n    FOREIGN KEY (stuid) REFERENCES student(stuid),\n    FOREIGN KEY (petid) REFERENCES pets(petid)\n);\n</sql>", "idx": 45}
{"instruction": "pets_1 contains tables such as student, has_pet, pets. Table student has columns such as stuid, lname, fname, age, sex, major, advisor, city_code. stuid is the primary key. Table has_pet has columns such as stuid, petid.  is the primary key. Table pets has columns such as petid, pettype, pet_age, weight. petid is the primary key. The pettype contains values such as dog. The stuid of has_pet is the foreign key of stuid of student. The petid of has_pet is the foreign key of petid of pets.", "input": "Find the weight of the youngest dog.", "output": "select weight from pets order by pet_age limit 1", "table_creating": "<sql>\nCREATE TABLE student (\n    stuid     INT PRIMARY KEY,\n    lname     VARCHAR(100),\n    fname     VARCHAR(100),\n    age       INT,\n    sex       CHAR(1),\n    major     VARCHAR(100),\n    advisor   VARCHAR(100),\n    city_code VARCHAR(10)\n);\n\nCREATE TABLE pets (\n    petid    INT PRIMARY KEY,\n    pettype  VARCHAR(50),\n    pet_age  INT,\n    weight   DECIMAL(5,2)\n);\n\nCREATE TABLE has_pet (\n    stuid INT,\n    petid INT,\n    PRIMARY KEY (stuid, petid),\n    FOREIGN KEY (stuid) REFERENCES student(stuid),\n    FOREIGN KEY (petid) REFERENCES pets(petid)\n);\n</sql>", "idx": 47}
{"instruction": "pets_1 contains tables such as student, has_pet, pets. Table student has columns such as stuid, lname, fname, age, sex, major, advisor, city_code. stuid is the primary key. Table has_pet has columns such as stuid, petid.  is the primary key. Table pets has columns such as petid, pettype, pet_age, weight. petid is the primary key. The pettype contains values such as cat, dog. The stuid of has_pet is the foreign key of stuid of student. The petid of has_pet is the foreign key of petid of pets.", "input": "Find the first name of students who have cat or dog pet.", "output": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' or t3.pettype = 'dog'", "table_creating": "<sql>\nCREATE TABLE student (\n    stuid      INT PRIMARY KEY,\n    lname      VARCHAR(50),\n    fname      VARCHAR(50),\n    age        INT,\n    sex        CHAR(1),\n    major      VARCHAR(50),\n    advisor    VARCHAR(50),\n    city_code  VARCHAR(10)\n);\n\nCREATE TABLE pets (\n    petid      INT PRIMARY KEY,\n    pettype    VARCHAR(20) CHECK (pettype IN ('cat','dog')),\n    pet_age    INT,\n    weight     DECIMAL(5,2)\n);\n\nCREATE TABLE has_pet (\n    stuid  INT,\n    petid  INT,\n    PRIMARY KEY (stuid, petid),\n    FOREIGN KEY (stuid) REFERENCES student(stuid),\n    FOREIGN KEY (petid) REFERENCES pets(petid)\n);\n</sql>", "idx": 57}
{"instruction": "pets_1 contains tables such as student, has_pet, pets. Table student has columns such as stuid, lname, fname, age, sex, major, advisor, city_code. stuid is the primary key. Table has_pet has columns such as stuid, petid.  is the primary key. Table pets has columns such as petid, pettype, pet_age, weight. petid is the primary key. The pettype contains values such as cat. The stuid of has_pet is the foreign key of stuid of student. The petid of has_pet is the foreign key of petid of pets.", "input": "Find the major and age of students who do not have a cat pet.", "output": "select major, age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat')", "table_creating": "<sql>\nCREATE TABLE student (\n    stuid     INT PRIMARY KEY,\n    lname     VARCHAR(50),\n    fname     VARCHAR(50),\n    age       INT,\n    sex       CHAR(1),\n    major     VARCHAR(50),\n    advisor   VARCHAR(50),\n    city_code VARCHAR(10)\n);\n\nCREATE TABLE pets (\n    petid   INT PRIMARY KEY,\n    pettype VARCHAR(20),\n    pet_age INT,\n    weight  DECIMAL(5,2)\n);\n\nCREATE TABLE has_pet (\n    stuid INT,\n    petid INT,\n    PRIMARY KEY (stuid, petid),\n    FOREIGN KEY (stuid) REFERENCES student(stuid),\n    FOREIGN KEY (petid) REFERENCES pets(petid)\n);\n</sql>", "idx": 61}
{"instruction": "pets_1 contains tables such as student, has_pet, pets. Table student has columns such as stuid, lname, fname, age, sex, major, advisor, city_code. stuid is the primary key. The lname contains values such as Smith. Table has_pet has columns such as stuid, petid.  is the primary key. Table pets has columns such as petid, pettype, pet_age, weight. petid is the primary key. The stuid of has_pet is the foreign key of stuid of student. The petid of has_pet is the foreign key of petid of pets.", "input": "What is the id of the pet owned by the student whose last name is 'Smith'?", "output": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'", "table_creating": "<sql>\nCREATE TABLE student (\n    stuid      INT PRIMARY KEY,\n    lname      VARCHAR(50),\n    fname      VARCHAR(50),\n    age        INT,\n    sex        CHAR(1),\n    major      VARCHAR(50),\n    advisor    VARCHAR(50),\n    city_code  VARCHAR(10)\n);\n\nCREATE TABLE pets (\n    petid      INT PRIMARY KEY,\n    pettype    VARCHAR(30),\n    pet_age    INT,\n    weight     DECIMAL(5,2)\n);\n\nCREATE TABLE has_pet (\n    stuid  INT,\n    petid  INT,\n    PRIMARY KEY (stuid, petid),\n    FOREIGN KEY (stuid) REFERENCES student(stuid),\n    FOREIGN KEY (petid) REFERENCES pets(petid)\n);\n</sql>", "idx": 78}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "How many continents are there?", "output": "select count(*) from continents;", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid      INT PRIMARY KEY,\n    continent   VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid   INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent   INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id      INT PRIMARY KEY,\n    maker   VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker   INT NOT NULL,\n    model   VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model  VARCHAR(100) NOT NULL,\n    make   VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id         INT PRIMARY KEY,\n    mpg        DECIMAL(5,2),\n    cylinders  INT,\n    edispl     DECIMAL(4,2),\n    horsepower INT,\n    weight     INT,\n    accelerate DECIMAL(4,2),\n    year       INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 87}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The maker contains values such as amc. Table model_list has columns such as modelid, maker, model. modelid is the primary key. The model contains values such as amc. Table car_names has columns such as makeid, model, make. makeid is the primary key. The model contains values such as amc.The make contains values such as amc hornet, amc hornet sportabout (sw). Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "What is the accelerate of the car make amc hornet sportabout (sw)?", "output": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'amc hornet sportabout (sw)';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(50) NOT NULL,\n    fullname VARCHAR(100),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 111}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. The countryname contains values such as france. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "How many car makers are there in france?", "output": "select count(*) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = 'france';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 113}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. The countryname contains values such as usa. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "How many car models are produced in the usa?", "output": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker = t2.id join countries as t3 on t2.country = t3.countryid where t3.countryname = 'usa';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 115}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. The continent contains values such as europe. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "Which countries in europe have at least 3 car manufacturers?", "output": "select t1.countryname from countries as t1 join continents as t2 on t1.continent = t2.contid join car_makers as t3 on t1.countryid = t3.country where t2.continent = 'europe' group by t1.countryname having count(*) >= 3;", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 129}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The maker contains values such as volvo.The fullname contains values such as Volvo. Table model_list has columns such as modelid, maker, model. modelid is the primary key. The model contains values such as volvo. Table car_names has columns such as makeid, model, make. makeid is the primary key. The model contains values such as volvo. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "What is the average edispl of the cars of model volvo?", "output": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(255) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(255) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(255) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(255) NOT NULL,\n    make VARCHAR(255),\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 137}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. The continent contains values such as america. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The fullname contains values such as American Motor Company. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "How many car models were produced by the maker with full name American Motor Company?", "output": "select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid      INT PRIMARY KEY,\n    continent   VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid   INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent   INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id      INT PRIMARY KEY,\n    maker   VARCHAR(100) NOT NULL,\n    fullname VARCHAR(200),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker   INT NOT NULL,\n    model   VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model  VARCHAR(100) NOT NULL,\n    make   VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id         INT PRIMARY KEY,\n    mpg        DECIMAL(5,2),\n    cylinders  INT,\n    edispl     DECIMAL(4,2),\n    horsepower INT,\n    weight     INT,\n    accelerate DECIMAL(4,2),\n    year       INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 147}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The fullname contains values such as General Motors. Table model_list has columns such as modelid, maker, model. modelid is the primary key. Table car_names has columns such as makeid, model, make. makeid is the primary key. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "output": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model = t2.model join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.makeid = t4.id where t3.fullname = 'General Motors' or t4.weight > 3500;", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100) NOT NULL,\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 151}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The maker contains values such as ford.The fullname contains values such as Ford Motor Company. Table model_list has columns such as modelid, maker, model. modelid is the primary key. The model contains values such as ford. Table car_names has columns such as makeid, model, make. makeid is the primary key. The model contains values such as ford. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "output": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model = t2.model join cars_data as t3 on t2.makeid = t3.id join car_makers as t4 on t1.maker = t4.id where t3.weight < 3500 and t4.fullname != 'Ford motor Company';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(100) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(100) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(100) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(100) NOT NULL,\n    make VARCHAR(100),\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 171}
{"instruction": "car_1 contains tables such as continents, countries, car_makers, model_list, car_names, cars_data. Table continents has columns such as contid, continent. contid is the primary key. Table countries has columns such as countryid, countryname, continent. countryid is the primary key. Table car_makers has columns such as id, maker, fullname, country. id is the primary key. The maker contains values such as fiat.The fullname contains values such as Fiat. Table model_list has columns such as modelid, maker, model. modelid is the primary key. The model contains values such as fiat. Table car_names has columns such as makeid, model, make. makeid is the primary key. The model contains values such as fiat. Table cars_data has columns such as id, mpg, cylinders, edispl, horsepower, weight, accelerate, year. id is the primary key. The continent of countries is the foreign key of contid of continents. The country of car_makers is the foreign key of countryid of countries. The maker of model_list is the foreign key of id of car_makers. The model of car_names is the foreign key of model of model_list. The id of cars_data is the foreign key of makeid of car_names.", "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "output": "select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';", "table_creating": "<sql>\nCREATE TABLE continents (\n    contid INT PRIMARY KEY,\n    continent VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE countries (\n    countryid INT PRIMARY KEY,\n    countryname VARCHAR(255) NOT NULL,\n    continent INT NOT NULL,\n    FOREIGN KEY (continent) REFERENCES continents(contid)\n);\n\nCREATE TABLE car_makers (\n    id INT PRIMARY KEY,\n    maker VARCHAR(255) NOT NULL,\n    fullname VARCHAR(255),\n    country INT NOT NULL,\n    FOREIGN KEY (country) REFERENCES countries(countryid)\n);\n\nCREATE TABLE model_list (\n    modelid INT PRIMARY KEY,\n    maker INT NOT NULL,\n    model VARCHAR(255) NOT NULL,\n    FOREIGN KEY (maker) REFERENCES car_makers(id)\n);\n\nCREATE TABLE car_names (\n    makeid INT PRIMARY KEY,\n    model VARCHAR(255) NOT NULL,\n    make VARCHAR(255),\n    FOREIGN KEY (model) REFERENCES model_list(model)\n);\n\nCREATE TABLE cars_data (\n    id INT PRIMARY KEY,\n    mpg DECIMAL(5,2),\n    cylinders INT,\n    edispl DECIMAL(4,2),\n    horsepower INT,\n    weight INT,\n    accelerate DECIMAL(4,2),\n    year INT,\n    FOREIGN KEY (id) REFERENCES car_names(makeid)\n);\n</sql>", "idx": 177}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The airline contains values such as JetBlue Airways.The abbreviation contains values such as JetBlue. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "Which country does Airline \"JetBlue Airways\" belong to?", "output": "select country from airlines where airline = \"JetBlue Airways\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(255),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(255),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 179}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The country contains values such as USA. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "List all airline names and their abbreviations in \"USA\".", "output": "select airline, abbreviation from airlines where country = \"USA\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(255),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(255) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(255)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(255),\n    sourceairport VARCHAR(255),\n    destairport VARCHAR(255),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 183}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Anthony .The airportname contains values such as Anthony . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "List the airport code and name in the city of Anthony.", "output": "select airportcode, airportname from airports where city = \"Anthony\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(255),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    city VARCHAR(255),\n    airportcode VARCHAR(255) PRIMARY KEY,\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(255)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(255),\n    sourceairport VARCHAR(255),\n    destairport VARCHAR(255),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 185}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many airlines do we have?", "output": "select count(*) from airlines", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(255) NOT NULL,\n    sourceairport VARCHAR(10) NOT NULL,\n    destairport VARCHAR(10) NOT NULL,\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 187}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The abbreviation contains values such as UAL. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "Which airline has abbreviation 'UAL'?", "output": "select airline from airlines where abbreviation = \"UAL\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10) NOT NULL,\n    country VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255) NOT NULL,\n    airportname VARCHAR(255) NOT NULL,\n    country VARCHAR(255) NOT NULL,\n    countryabbrev VARCHAR(10) NOT NULL\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(10) PRIMARY KEY,\n    flightno VARCHAR(10) NOT NULL,\n    sourceairport VARCHAR(10) NOT NULL,\n    destairport VARCHAR(10) NOT NULL,\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 193}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Alton .The airportname contains values such as Alton . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "Which city and country is the Alton airport at?", "output": "select city, country from airports where airportname = \"Alton\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(255),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(255) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(255)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(255),\n    sourceairport VARCHAR(255),\n    destairport VARCHAR(255),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 197}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as AKO. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The sourceairport contains values such as  AKO.The destairport contains values such as  AKO. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "What is the airport name for airport 'AKO'?", "output": "select airportname from airports where airportcode = \"AKO\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 199}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Aberdeen . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "What are airport names at City 'Aberdeen'?", "output": "select airportname from airports where city = \"Aberdeen\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 201}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as APG. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The sourceairport contains values such as  APG.The destairport contains values such as  APG. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many flights depart from 'APG'?", "output": "select count(*) from flights where sourceairport = \"APG\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(20),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 203}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as ATO. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many flights have destination ATO?", "output": "select count(*) from flights where destairport = \"ATO\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    city VARCHAR(255),\n    airportcode VARCHAR(10) PRIMARY KEY,\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 205}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Aberdeen , Ashley .The airportname contains values such as Ashley . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "output": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airports as t3 on t1.sourceairport = t3.airportcode where t2.city = \"Ashley\" and t3.city = \"Aberdeen\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255),\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 211}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The airline contains values such as United Airlines. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as ASY. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many 'United Airlines' flights go to Airport 'ASY'?", "output": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.destairport = \"ASY\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 215}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The airline contains values such as United Airlines. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as AHD. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The sourceairport contains values such as  AHD.The destairport contains values such as  AHD. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many 'United Airlines' flights depart from Airport 'AHD'?", "output": "select count(*) from airlines as t1 join flights as t2 on t2.airline = t1.uid where t1.airline = \"United Airlines\" and t2.sourceairport = \"AHD\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(100)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(3) PRIMARY KEY,\n    city VARCHAR(100),\n    airportname VARCHAR(255),\n    country VARCHAR(100),\n    countryabbrev VARCHAR(3)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(3),\n    destairport VARCHAR(3),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 217}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The airline contains values such as United Airlines. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Aberdeen . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "How many United Airlines flights go to City 'Aberdeen'?", "output": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t3.uid = t1.airline where t2.city = \"Aberdeen\" and t3.airline = \"United Airlines\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(100)\n);\n\nCREATE TABLE airports (\n    airportcode CHAR(3) PRIMARY KEY,\n    city VARCHAR(100),\n    airportname VARCHAR(255),\n    country VARCHAR(100),\n    countryabbrev CHAR(2)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport CHAR(3),\n    destairport CHAR(3),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 219}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as AHD. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The sourceairport contains values such as  AHD.The destairport contains values such as  AHD. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "What are airlines that have some flight departing from airport 'AHD'?", "output": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"AHD\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(20),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 233}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The airportcode contains values such as CVO, APG. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The sourceairport contains values such as  CVO,  APG.The destairport contains values such as  CVO,  APG. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "output": "select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"APG\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = \"CVO\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid INT PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(100)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(5) PRIMARY KEY,\n    city VARCHAR(100),\n    airportname VARCHAR(255),\n    country VARCHAR(100),\n    countryabbrev VARCHAR(5)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(5),\n    destairport VARCHAR(5),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 237}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. The airline contains values such as United Airlines. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "What are flight numbers of Airline \"United Airlines\"?", "output": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid = t1.airline where t2.airline = \"United Airlines\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(255) PRIMARY KEY,\n    airline VARCHAR(255) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(255)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(255),\n    airportname VARCHAR(255),\n    country VARCHAR(255),\n    countryabbrev VARCHAR(10)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(255) PRIMARY KEY,\n    flightno VARCHAR(10),\n    sourceairport VARCHAR(10),\n    destairport VARCHAR(10),\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 245}
{"instruction": "flight_2 contains tables such as airlines, airports, flights. Table airlines has columns such as uid, airline, abbreviation, country. uid is the primary key. Table airports has columns such as city, airportcode, airportname, country, countryabbrev. airportcode is the primary key. The city contains values such as Aberdeen , Abilene . Table flights has columns such as airline, flightno, sourceairport, destairport. airline is the primary key. The destairport of flights is the foreign key of airportcode of airports. The sourceairport of flights is the foreign key of airportcode of airports.", "input": "Find the number of flights landing in the city of Aberdeen or Abilene.", "output": "select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.city = \"Aberdeen\" or t2.city = \"Abilene\"", "table_creating": "<sql>\nCREATE TABLE airlines (\n    uid VARCHAR(10) PRIMARY KEY,\n    airline VARCHAR(100) NOT NULL,\n    abbreviation VARCHAR(10),\n    country VARCHAR(100)\n);\n\nCREATE TABLE airports (\n    airportcode VARCHAR(10) PRIMARY KEY,\n    city VARCHAR(100),\n    airportname VARCHAR(255),\n    country VARCHAR(100),\n    countryabbrev VARCHAR(5)\n);\n\nCREATE TABLE flights (\n    airline VARCHAR(10) PRIMARY KEY,\n    flightno VARCHAR(10) NOT NULL,\n    sourceairport VARCHAR(10) NOT NULL,\n    destairport VARCHAR(10) NOT NULL,\n    FOREIGN KEY (sourceairport) REFERENCES airports(airportcode),\n    FOREIGN KEY (destairport) REFERENCES airports(airportcode)\n);\n</sql>", "idx": 255}
{"instruction": "employee_hire_evaluation contains tables such as employee, shop, hiring, evaluation. Table employee has columns such as employee_id, name, age, city. employee_id is the primary key. Table shop has columns such as shop_id, name, location, district, number_products, manager_name. shop_id is the primary key. Table hiring has columns such as shop_id, employee_id, start_from, is_full_time. employee_id is the primary key. Table evaluation has columns such as employee_id, year_awarded, bonus. employee_id is the primary key. The employee_id of hiring is the foreign key of employee_id of employee. The shop_id of hiring is the foreign key of shop_id of shop. The employee_id of evaluation is the foreign key of employee_id of employee.", "input": "How many employees are there?", "output": "select count(*) from employee", "table_creating": "<sql>\nCREATE TABLE employee (\n    employee_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    age INT,\n    city VARCHAR(255)\n);\n\nCREATE TABLE shop (\n    shop_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    location VARCHAR(255),\n    district VARCHAR(255),\n    number_products INT,\n    manager_name VARCHAR(255)\n);\n\nCREATE TABLE hiring (\n    shop_id INT NOT NULL,\n    employee_id INT PRIMARY KEY,\n    start_from DATE,\n    is_full_time BOOLEAN,\n    FOREIGN KEY (employee_id) REFERENCES employee(employee_id),\n    FOREIGN KEY (shop_id) REFERENCES shop(shop_id)\n);\n\nCREATE TABLE evaluation (\n    employee_id INT PRIMARY KEY,\n    year_awarded INT,\n    bonus DECIMAL(10,2),\n    FOREIGN KEY (employee_id) REFERENCES employee(employee_id)\n);\n</sql>", "idx": 259}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "How many documents do we have?", "output": "select count(*) from documents", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id          INT          PRIMARY KEY,\n    template_id          INT          NOT NULL,\n    document_name        VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details        TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 297}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as CV.The template_type_description contains values such as CV. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as CV. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. The document_name contains values such as Robbin CV. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What is the document id, template id and description for document named \"Robbin CV\"?", "output": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10) PRIMARY KEY,\n    template_type_description VARCHAR(100)\n);\n\nCREATE TABLE templates (\n    template_id            INT PRIMARY KEY,\n    version_number         INT NOT NULL,\n    template_type_code     VARCHAR(10) NOT NULL,\n    date_effective_from    DATE,\n    date_effective_to      DATE,\n    template_details       TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id            INT PRIMARY KEY,\n    template_id            INT NOT NULL,\n    document_name          VARCHAR(255),\n    document_description   TEXT,\n    other_details          TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id           INT PRIMARY KEY,\n    document_id            INT NOT NULL,\n    paragraph_text         TEXT,\n    other_details          TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 303}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as PPT. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as PPT. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "How many documents are using the template with type code 'PPT'?", "output": "select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = 'PPT'", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(10)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id          INT          PRIMARY KEY,\n    template_id          INT          NOT NULL,\n    document_name        VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details        TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 307}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as PPT, PP. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as PPT, PP. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What are the ids of templates with template type code PP or PPT?", "output": "select template_id from templates where template_type_code = \"PP\" or template_type_code = \"PPT\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10) PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT PRIMARY KEY,\n    version_number       INT NOT NULL,\n    template_type_code   VARCHAR(10) NOT NULL,\n    date_effective_from  DATE NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT PRIMARY KEY,\n    template_id         INT NOT NULL,\n    document_name       VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT PRIMARY KEY,\n    document_id    INT NOT NULL,\n    paragraph_text TEXT NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 323}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as CV.The template_type_description contains values such as CV. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as CV. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "How many templates have template type code CV?", "output": "select count(*) from templates where template_type_code = \"CV\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code VARCHAR(10) PRIMARY KEY,\n    template_type_description VARCHAR(100)\n);\n\nCREATE TABLE templates (\n    template_id INT PRIMARY KEY,\n    version_number INT,\n    template_type_code VARCHAR(10),\n    date_effective_from DATE,\n    date_effective_to DATE,\n    template_details TEXT,\n    FOREIGN KEY (template_type_code) REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id INT PRIMARY KEY,\n    template_id INT,\n    document_name VARCHAR(255),\n    document_description TEXT,\n    other_details TEXT,\n    FOREIGN KEY (template_id) REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id INT PRIMARY KEY,\n    document_id INT,\n    paragraph_text TEXT,\n    other_details TEXT,\n    FOREIGN KEY (document_id) REFERENCES documents(document_id)\n);\n</sql>", "idx": 325}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. The document_name contains values such as Data base. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What is the template type code of the template used by document with the name \"Data base\"?", "output": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = \"Data base\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT          PRIMARY KEY,\n    template_id         INT          NOT NULL,\n    document_name       VARCHAR(255) NOT NULL,\n    document_description VARCHAR(255),\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 337}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as BK. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as BK. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "Show all document names using templates with template type code BK.", "output": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = \"BK\"", "table_creating": "<sql>\n-- Reference table for template types\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\n-- Templates table\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(10)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\n-- Documents table\nCREATE TABLE documents (\n    document_id          INT          PRIMARY KEY,\n    template_id          INT          NOT NULL,\n    document_name        VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details        TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\n-- Paragraphs table\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 339}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_code contains values such as AD. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. The template_type_code contains values such as AD. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What is the template type descriptions for template type code \"AD\".", "output": "select template_type_description from ref_template_types where template_type_code = \"AD\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT PRIMARY KEY,\n    version_number       INT NOT NULL,\n    template_type_code   VARCHAR(10) NOT NULL,\n    date_effective_from  DATE,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT PRIMARY KEY,\n    template_id         INT NOT NULL,\n    document_name       VARCHAR(255),\n    document_description TEXT,\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT PRIMARY KEY,\n    document_id    INT NOT NULL,\n    paragraph_text TEXT,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 349}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_description contains values such as Book. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What is the template type code for template type description \"Book\".", "output": "select template_type_code from ref_template_types where template_type_description = \"Book\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20) PRIMARY KEY,\n    template_type_description VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT PRIMARY KEY,\n    version_number       INT NOT NULL,\n    template_type_code   VARCHAR(20) NOT NULL,\n    date_effective_from  DATE,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id          INT PRIMARY KEY,\n    template_id          INT NOT NULL,\n    document_name        VARCHAR(255),\n    document_description TEXT,\n    other_details        TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT PRIMARY KEY,\n    document_id    INT NOT NULL,\n    paragraph_text TEXT,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 351}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. The template_type_description contains values such as Presentation. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "What are the template ids with template type description \"Presentation\".", "output": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = \"Presentation\"", "table_creating": "<sql>\n-- Reference table for template types\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(100) NOT NULL\n);\n\n-- Templates table\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\n-- Documents table\nCREATE TABLE documents (\n    document_id          INT          PRIMARY KEY,\n    template_id          INT          NOT NULL,\n    document_name        VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details        TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\n-- Paragraphs table\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 355}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. The document_name contains values such as Summer Show. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "How many paragraphs for the document with name 'Summer Show'?", "output": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Summer Show'", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(10)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(10)  NOT NULL,\n    date_effective_from  DATE,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id        INT          PRIMARY KEY,\n    template_id        INT          NOT NULL,\n    document_name      VARCHAR(255),\n    document_description TEXT,\n    other_details      TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 359}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The paragraph_text contains values such as Korea. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "Show paragraph details for paragraph with text 'Korea ' .", "output": "select other_details from paragraphs where paragraph_text like 'korea'", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code        VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id        INT          PRIMARY KEY,\n    template_id        INT          NOT NULL,\n    document_name      VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details      TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 361}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. The document_name contains values such as Welcome to NY. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "output": "select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT          PRIMARY KEY,\n    template_id         INT          NOT NULL,\n    document_name       VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 363}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. The document_name contains values such as Customer reviews. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "Show all paragraph texts for the document \"Customer reviews\".", "output": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"Customer reviews\"", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT          PRIMARY KEY,\n    template_id         INT          NOT NULL,\n    document_name       VARCHAR(255) NOT NULL,\n    document_description TEXT,\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 365}
{"instruction": "cre_Doc_Template_Mgt contains tables such as ref_template_types, templates, documents, paragraphs. Table ref_template_types has columns such as template_type_code, template_type_description. template_type_code is the primary key. Table templates has columns such as template_id, version_number, template_type_code, date_effective_from, date_effective_to, template_details. template_id is the primary key. Table documents has columns such as document_id, template_id, document_name, document_description, other_details. document_id is the primary key. Table paragraphs has columns such as paragraph_id, document_id, paragraph_text, other_details. paragraph_id is the primary key. The paragraph_text contains values such as Ireland, Brazil. The template_type_code of templates is the foreign key of template_type_code of ref_template_types. The template_id of documents is the foreign key of template_id of templates. The document_id of paragraphs is the foreign key of document_id of documents.", "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "output": "select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland'", "table_creating": "<sql>\nCREATE TABLE ref_template_types (\n    template_type_code      VARCHAR(20)  PRIMARY KEY,\n    template_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE templates (\n    template_id          INT          PRIMARY KEY,\n    version_number       INT          NOT NULL,\n    template_type_code   VARCHAR(20)  NOT NULL,\n    date_effective_from  DATE         NOT NULL,\n    date_effective_to    DATE,\n    template_details     TEXT,\n    CONSTRAINT fk_templates_type\n        FOREIGN KEY (template_type_code)\n        REFERENCES ref_template_types(template_type_code)\n);\n\nCREATE TABLE documents (\n    document_id         INT          PRIMARY KEY,\n    template_id         INT          NOT NULL,\n    document_name       VARCHAR(255) NOT NULL,\n    document_description VARCHAR(255),\n    other_details       TEXT,\n    CONSTRAINT fk_documents_template\n        FOREIGN KEY (template_id)\n        REFERENCES templates(template_id)\n);\n\nCREATE TABLE paragraphs (\n    paragraph_id   INT          PRIMARY KEY,\n    document_id    INT          NOT NULL,\n    paragraph_text TEXT         NOT NULL,\n    other_details  TEXT,\n    CONSTRAINT fk_paragraphs_document\n        FOREIGN KEY (document_id)\n        REFERENCES documents(document_id)\n);\n</sql>", "idx": 379}
{"instruction": "course_teach contains tables such as course, teacher, course_arrange. Table course has columns such as course_id, staring_date, course. course_id is the primary key. Table teacher has columns such as teacher_id, name, age, hometown. teacher_id is the primary key. Table course_arrange has columns such as course_id, teacher_id, grade. course_id is the primary key. The teacher_id of course_arrange is the foreign key of teacher_id of teacher. The course_id of course_arrange is the foreign key of course_id of course.", "input": "How many teachers are there?", "output": "select count(*) from teacher", "table_creating": "<sql>\nCREATE TABLE course (\n    course_id      VARCHAR(50) PRIMARY KEY,\n    starting_date  DATE,\n    course         VARCHAR(100)\n);\n\nCREATE TABLE teacher (\n    teacher_id VARCHAR(50) PRIMARY KEY,\n    name       VARCHAR(100),\n    age        INT,\n    hometown   VARCHAR(100)\n);\n\nCREATE TABLE course_arrange (\n    course_id  VARCHAR(50) PRIMARY KEY,\n    teacher_id VARCHAR(50),\n    grade      VARCHAR(10),\n    FOREIGN KEY (course_id)  REFERENCES course(course_id),\n    FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id)\n);\n</sql>", "idx": 381}
{"instruction": "course_teach contains tables such as course, teacher, course_arrange. Table course has columns such as course_id, staring_date, course. course_id is the primary key. Table teacher has columns such as teacher_id, name, age, hometown. teacher_id is the primary key. The hometown contains values such as Little Lever Urban District. Table course_arrange has columns such as course_id, teacher_id, grade. course_id is the primary key. The teacher_id of course_arrange is the foreign key of teacher_id of teacher. The course_id of course_arrange is the foreign key of course_id of course.", "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "output": "select name from teacher where hometown != \"little lever urban district\"", "table_creating": "<sql>\nCREATE TABLE course (\n    course_id      VARCHAR(50) PRIMARY KEY,\n    starting_date  DATE,\n    course         VARCHAR(100)\n);\n\nCREATE TABLE teacher (\n    teacher_id VARCHAR(50) PRIMARY KEY,\n    name       VARCHAR(100),\n    age        INT,\n    hometown   VARCHAR(100)\n);\n\nCREATE TABLE course_arrange (\n    course_id  VARCHAR(50) PRIMARY KEY,\n    teacher_id VARCHAR(50),\n    grade      VARCHAR(10),\n    FOREIGN KEY (course_id)  REFERENCES course(course_id),\n    FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id)\n);\n</sql>", "idx": 387}
{"instruction": "course_teach contains tables such as course, teacher, course_arrange. Table course has columns such as course_id, staring_date, course. course_id is the primary key. The course contains values such as Math. Table teacher has columns such as teacher_id, name, age, hometown. teacher_id is the primary key. Table course_arrange has columns such as course_id, teacher_id, grade. course_id is the primary key. The teacher_id of course_arrange is the foreign key of teacher_id of teacher. The course_id of course_arrange is the foreign key of course_id of course.", "input": "Show the name of the teacher for the math course.", "output": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id = t2.course_id join teacher as t3 on t1.teacher_id = t3.teacher_id where t2.course = \"Math\"", "table_creating": "<sql>\nCREATE TABLE course (\n    course_id   VARCHAR(50) PRIMARY KEY,\n    starting_date DATE,\n    course      VARCHAR(100)\n);\n\nCREATE TABLE teacher (\n    teacher_id VARCHAR(50) PRIMARY KEY,\n    name       VARCHAR(100),\n    age        INT,\n    hometown   VARCHAR(100)\n);\n\nCREATE TABLE course_arrange (\n    course_id  VARCHAR(50) PRIMARY KEY,\n    teacher_id VARCHAR(50),\n    grade      VARCHAR(10),\n    FOREIGN KEY (course_id)  REFERENCES course(course_id),\n    FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id)\n);\n</sql>", "idx": 403}
{"instruction": "museum_visit contains tables such as museum, visitor, visit. Table museum has columns such as museum_id, name, num_of_staff, open_year. museum_id is the primary key. Table visitor has columns such as id, name, level_of_membership, age. id is the primary key. Table visit has columns such as museum_id, visitor_id, num_of_ticket, total_spent. museum_id is the primary key. The visitor_id of visit is the foreign key of id of visitor. The museum_id of visit is the foreign key of museum_id of museum.", "input": "How many visitors below age 30 are there?", "output": "select count(*) from visitor where age < 30", "table_creating": "<sql>\nCREATE TABLE museum (\n    museum_id      INT PRIMARY KEY,\n    name           VARCHAR(255) NOT NULL,\n    num_of_staff   INT,\n    open_year      INT\n);\n\nCREATE TABLE visitor (\n    id                  INT PRIMARY KEY,\n    name                VARCHAR(255) NOT NULL,\n    level_of_membership VARCHAR(50),\n    age                 INT\n);\n\nCREATE TABLE visit (\n    museum_id   INT,\n    visitor_id  INT,\n    num_of_ticket INT,\n    total_spent   DECIMAL(10,2),\n    PRIMARY KEY (museum_id),\n    FOREIGN KEY (museum_id) REFERENCES museum(museum_id),\n    FOREIGN KEY (visitor_id) REFERENCES visitor(id)\n);\n</sql>", "idx": 411}
{"instruction": "museum_visit contains tables such as museum, visitor, visit. Table museum has columns such as museum_id, name, num_of_staff, open_year. museum_id is the primary key. The name contains values such as Plaza Museum. Table visitor has columns such as id, name, level_of_membership, age. id is the primary key. Table visit has columns such as museum_id, visitor_id, num_of_ticket, total_spent. museum_id is the primary key. The visitor_id of visit is the foreign key of id of visitor. The museum_id of visit is the foreign key of museum_id of museum.", "input": "What are the opening year and staff number of the museum named Plaza Museum?", "output": "select num_of_staff, open_year from museum where name = 'Plaza Museum'", "table_creating": "<sql>\nCREATE TABLE museum (\n    museum_id      INT PRIMARY KEY,\n    name           VARCHAR(255) NOT NULL,\n    num_of_staff   INT,\n    open_year      INT\n);\n\nCREATE TABLE visitor (\n    id                 INT PRIMARY KEY,\n    name               VARCHAR(255) NOT NULL,\n    level_of_membership VARCHAR(50),\n    age                INT\n);\n\nCREATE TABLE visit (\n    museum_id   INT,\n    visitor_id  INT,\n    num_of_ticket INT,\n    total_spent   DECIMAL(10,2),\n    PRIMARY KEY (museum_id),\n    FOREIGN KEY (museum_id) REFERENCES museum(museum_id),\n    FOREIGN KEY (visitor_id) REFERENCES visitor(id)\n);\n</sql>", "idx": 417}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "Find the total number of players.", "output": "select count(*) from players", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     TEXT,\n    last_name      TEXT,\n    hand           TEXT,\n    birth_date     DATE,\n    country_code   TEXT\n);\n\nCREATE TABLE matches (\n    match_num          INTEGER,\n    tourney_id         TEXT,\n    tourney_name       TEXT,\n    tourney_level      TEXT,\n    tourney_date       DATE,\n    surface            TEXT,\n    draw_size          INTEGER,\n    round              TEXT,\n    best_of            INTEGER,\n    minutes            INTEGER,\n    score              TEXT,\n    winner_id          INTEGER,\n    winner_name        TEXT,\n    winner_hand        TEXT,\n    winner_ht          INTEGER,\n    winner_ioc         TEXT,\n    winner_age         REAL,\n    winner_rank        INTEGER,\n    winner_rank_points INTEGER,\n    winner_seed        INTEGER,\n    winner_entry       TEXT,\n    loser_id           INTEGER,\n    loser_name         TEXT,\n    loser_hand         TEXT,\n    loser_ht           INTEGER,\n    loser_ioc          TEXT,\n    loser_age          REAL,\n    loser_rank         INTEGER,\n    loser_rank_points  INTEGER,\n    loser_seed         INTEGER,\n    loser_entry        TEXT,\n    year               INTEGER,\n    PRIMARY KEY (match_num, tourney_id),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date   DATE,\n    ranking        INTEGER,\n    player_id      INTEGER,\n    ranking_points INTEGER,\n    tours          INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 429}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. The last_name contains values such as Date.The country_code contains values such as USA. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. The loser_ioc contains values such as USA.The winner_ioc contains values such as USA. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "List the first name and birth date of all players from the country with code USA.", "output": "select first_name, birth_date from players where country_code = 'USA'", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     TEXT,\n    last_name      TEXT,\n    hand           TEXT,\n    birth_date     DATE,\n    country_code   TEXT\n);\n\nCREATE TABLE matches (\n    match_id            INTEGER PRIMARY KEY AUTOINCREMENT,\n    best_of             INTEGER,\n    draw_size           INTEGER,\n    loser_age           REAL,\n    loser_entry         TEXT,\n    loser_hand          TEXT,\n    loser_ht            REAL,\n    loser_id            INTEGER,\n    loser_ioc           TEXT,\n    loser_name          TEXT,\n    loser_rank          INTEGER,\n    loser_rank_points   INTEGER,\n    loser_seed          INTEGER,\n    match_num           INTEGER,\n    minutes             INTEGER,\n    round               TEXT,\n    score               TEXT,\n    surface             TEXT,\n    tourney_date        DATE,\n    tourney_id          TEXT,\n    tourney_level       TEXT,\n    tourney_name        TEXT,\n    winner_age          REAL,\n    winner_entry        TEXT,\n    winner_hand         TEXT,\n    winner_ht           REAL,\n    winner_id           INTEGER,\n    winner_ioc          TEXT,\n    winner_name         TEXT,\n    winner_rank         INTEGER,\n    winner_rank_points  INTEGER,\n    winner_seed         INTEGER,\n    year                INTEGER,\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_id      INTEGER PRIMARY KEY AUTOINCREMENT,\n    ranking_date    DATE,\n    ranking         INTEGER,\n    player_id       INTEGER,\n    ranking_points  INTEGER,\n    tours           INTEGER,\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 433}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. The country_code contains values such as USA. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. The loser_ioc contains values such as USA.The winner_ioc contains values such as USA. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "What are the first names and birth dates of players from the USA?", "output": "select first_name, birth_date from players where country_code = 'USA'", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     VARCHAR(50),\n    last_name      VARCHAR(50),\n    hand           CHAR(1),\n    birth_date     DATE,\n    country_code   CHAR(3)\n);\n\nCREATE TABLE matches (\n    match_num          INTEGER,\n    tourney_id         VARCHAR(20),\n    tourney_name       VARCHAR(100),\n    tourney_date       DATE,\n    tourney_level      CHAR(1),\n    surface            VARCHAR(20),\n    draw_size          INTEGER,\n    tourney_level      CHAR(1),\n    best_of            INTEGER,\n    round              VARCHAR(10),\n    minutes            INTEGER,\n    score              VARCHAR(100),\n    winner_id          INTEGER,\n    winner_seed        INTEGER,\n    winner_entry       VARCHAR(10),\n    winner_name        VARCHAR(100),\n    winner_hand        CHAR(1),\n    winner_ht          INTEGER,\n    winner_ioc         CHAR(3),\n    winner_age         NUMERIC(4,1),\n    winner_rank        INTEGER,\n    winner_rank_points INTEGER,\n    loser_id           INTEGER,\n    loser_seed         INTEGER,\n    loser_entry        VARCHAR(10),\n    loser_name         VARCHAR(100),\n    loser_hand         CHAR(1),\n    loser_ht           INTEGER,\n    loser_ioc          CHAR(3),\n    loser_age          NUMERIC(4,1),\n    loser_rank         INTEGER,\n    loser_rank_points  INTEGER,\n    year               INTEGER,\n    PRIMARY KEY (match_num, tourney_id),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date    DATE,\n    player_id       INTEGER,\n    ranking         INTEGER,\n    ranking_points  INTEGER,\n    tours           INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 434}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. The tourney_name contains values such as Australian Open, WTA Championships. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "output": "select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'WTA Championships' intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = 'Australian Open'", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     TEXT,\n    last_name      TEXT,\n    hand           TEXT,\n    birth_date     DATE,\n    country_code   TEXT\n);\n\nCREATE TABLE matches (\n    best_of            INTEGER,\n    draw_size          INTEGER,\n    loser_age          REAL,\n    loser_entry        TEXT,\n    loser_hand         TEXT,\n    loser_ht           REAL,\n    loser_id           INTEGER,\n    loser_ioc          TEXT,\n    loser_name         TEXT,\n    loser_rank         INTEGER,\n    loser_rank_points  INTEGER,\n    loser_seed         INTEGER,\n    match_num          INTEGER,\n    minutes            INTEGER,\n    round              TEXT,\n    score              TEXT,\n    surface            TEXT,\n    tourney_date       DATE,\n    tourney_id         TEXT,\n    tourney_level      TEXT,\n    tourney_name       TEXT,\n    winner_age         REAL,\n    winner_entry       TEXT,\n    winner_hand        TEXT,\n    winner_ht          REAL,\n    winner_id          INTEGER,\n    winner_ioc         TEXT,\n    winner_name        TEXT,\n    winner_rank        INTEGER,\n    winner_rank_points INTEGER,\n    winner_seed        INTEGER,\n    year               INTEGER,\n    PRIMARY KEY (tourney_id, match_num),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date   DATE,\n    ranking        INTEGER,\n    player_id      INTEGER,\n    ranking_points INTEGER,\n    tours          INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 451}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. The last_name contains values such as Date, Last. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "List the first and last name of all players in the order of birth date.", "output": "select first_name, last_name from players order by birth_date", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     VARCHAR(50),\n    last_name      VARCHAR(50),\n    hand           CHAR(1),\n    birth_date     DATE,\n    country_code   CHAR(3)\n);\n\nCREATE TABLE matches (\n    match_num            INTEGER,\n    tourney_id           VARCHAR(20),\n    tourney_name         VARCHAR(100),\n    tourney_date         DATE,\n    tourney_level        CHAR(1),\n    surface              VARCHAR(20),\n    draw_size            INTEGER,\n    tourney_level        CHAR(1),\n    best_of              INTEGER,\n    round                VARCHAR(10),\n    minutes              INTEGER,\n    score                VARCHAR(100),\n    winner_id            INTEGER,\n    winner_name          VARCHAR(100),\n    winner_hand          CHAR(1),\n    winner_ht            INTEGER,\n    winner_ioc           CHAR(3),\n    winner_age           NUMERIC(4,1),\n    winner_rank          INTEGER,\n    winner_rank_points   INTEGER,\n    winner_seed          INTEGER,\n    winner_entry         VARCHAR(20),\n    loser_id             INTEGER,\n    loser_name           VARCHAR(100),\n    loser_hand           CHAR(1),\n    loser_ht             INTEGER,\n    loser_ioc            CHAR(3),\n    loser_age            NUMERIC(4,1),\n    loser_rank           INTEGER,\n    loser_rank_points    INTEGER,\n    loser_seed           INTEGER,\n    loser_entry          VARCHAR(20),\n    year                 INTEGER,\n    PRIMARY KEY (match_num, tourney_id, tourney_date),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date    DATE,\n    player_id       INTEGER,\n    ranking         INTEGER,\n    ranking_points  INTEGER,\n    tours           INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 455}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. The last_name contains values such as Date. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "What are the full names of all players, sorted by birth date?", "output": "select first_name, last_name from players order by birth_date", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     VARCHAR(50),\n    last_name      VARCHAR(50),\n    hand           CHAR(1),\n    birth_date     DATE,\n    country_code   CHAR(3)\n);\n\nCREATE TABLE matches (\n    match_num           INTEGER,\n    tourney_id          VARCHAR(20),\n    tourney_name        VARCHAR(100),\n    surface             VARCHAR(20),\n    draw_size           INTEGER,\n    tourney_level       CHAR(1),\n    tourney_date        DATE,\n    year                INTEGER,\n    round               VARCHAR(10),\n    score               VARCHAR(100),\n    best_of             INTEGER,\n    minutes             INTEGER,\n    winner_id           INTEGER,\n    winner_seed         INTEGER,\n    winner_entry        VARCHAR(20),\n    winner_name         VARCHAR(100),\n    winner_hand         CHAR(1),\n    winner_ht           INTEGER,\n    winner_ioc          CHAR(3),\n    winner_age          NUMERIC(4,1),\n    winner_rank         INTEGER,\n    winner_rank_points  INTEGER,\n    loser_id            INTEGER,\n    loser_seed          INTEGER,\n    loser_entry         VARCHAR(20),\n    loser_name          VARCHAR(100),\n    loser_hand          CHAR(1),\n    loser_ht            INTEGER,\n    loser_ioc           CHAR(3),\n    loser_age           NUMERIC(4,1),\n    loser_rank          INTEGER,\n    loser_rank_points   INTEGER,\n    PRIMARY KEY (tourney_id, match_num),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date   DATE,\n    ranking        INTEGER,\n    player_id      INTEGER,\n    ranking_points INTEGER,\n    tours          INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 456}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. The tourney_name contains values such as Australian Open. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "output": "select winner_name from matches where tourney_name = 'Australian Open' order by winner_rank_points desc limit 1", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INT PRIMARY KEY,\n    first_name     VARCHAR(50),\n    last_name      VARCHAR(50),\n    hand           CHAR(1),\n    birth_date     DATE,\n    country_code   CHAR(3)\n);\n\nCREATE TABLE matches (\n    best_of            TINYINT,\n    draw_size          SMALLINT,\n    loser_age          DECIMAL(4,1),\n    loser_entry        VARCHAR(10),\n    loser_hand         CHAR(1),\n    loser_ht           SMALLINT,\n    loser_id           INT,\n    loser_ioc          CHAR(3),\n    loser_name         VARCHAR(100),\n    loser_rank         INT,\n    loser_rank_points  INT,\n    loser_seed         TINYINT,\n    match_num          INT,\n    minutes            SMALLINT,\n    round              VARCHAR(10),\n    score              VARCHAR(100),\n    surface            VARCHAR(20),\n    tourney_date       DATE,\n    tourney_id         VARCHAR(20),\n    tourney_level      CHAR(1),\n    tourney_name       VARCHAR(100),\n    winner_age         DECIMAL(4,1),\n    winner_entry       VARCHAR(10),\n    winner_hand        CHAR(1),\n    winner_ht          SMALLINT,\n    winner_id          INT,\n    winner_ioc         CHAR(3),\n    winner_name        VARCHAR(100),\n    winner_rank        INT,\n    winner_rank_points INT,\n    winner_seed        TINYINT,\n    year               YEAR,\n    PRIMARY KEY (tourney_id, match_num),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date   DATE,\n    ranking        INT,\n    player_id      INT,\n    ranking_points INT,\n    tours          TINYINT,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 465}
{"instruction": "wta_1 contains tables such as players, matches, rankings. Table players has columns such as player_id, first_name, last_name, hand, birth_date, country_code. player_id is the primary key. Table matches has columns such as best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year.  is the primary key. The tourney_name contains values such as WTA Championships. Table rankings has columns such as ranking_date, ranking, player_id, ranking_points, tours.  is the primary key. The winner_id of matches is the foreign key of player_id of players. The loser_id of matches is the foreign key of player_id of players. The player_id of rankings is the foreign key of player_id of players.", "input": "How many different winners both participated in the WTA Championships and were left handed?", "output": "select count(distinct winner_name) from matches where tourney_name = 'WTA Championships' and winner_hand = 'L'", "table_creating": "<sql>\nCREATE TABLE players (\n    player_id      INTEGER PRIMARY KEY,\n    first_name     VARCHAR(50),\n    last_name      VARCHAR(50),\n    hand           CHAR(1),\n    birth_date     DATE,\n    country_code   CHAR(3)\n);\n\nCREATE TABLE matches (\n    match_num          INTEGER,\n    tourney_id         VARCHAR(20),\n    tourney_name       VARCHAR(100),\n    surface            VARCHAR(20),\n    draw_size          INTEGER,\n    tourney_level      CHAR(1),\n    tourney_date       DATE,\n    match_year         INTEGER,\n    round              VARCHAR(10),\n    score              VARCHAR(100),\n    best_of            INTEGER,\n    minutes            INTEGER,\n    winner_id          INTEGER,\n    winner_seed        INTEGER,\n    winner_entry       VARCHAR(10),\n    winner_name        VARCHAR(100),\n    winner_hand        CHAR(1),\n    winner_ht          INTEGER,\n    winner_ioc         CHAR(3),\n    winner_age         NUMERIC(4,1),\n    winner_rank        INTEGER,\n    winner_rank_points INTEGER,\n    loser_id           INTEGER,\n    loser_seed         INTEGER,\n    loser_entry        VARCHAR(10),\n    loser_name         VARCHAR(100),\n    loser_hand         CHAR(1),\n    loser_ht           INTEGER,\n    loser_ioc          CHAR(3),\n    loser_age          NUMERIC(4,1),\n    loser_rank         INTEGER,\n    loser_rank_points  INTEGER,\n    PRIMARY KEY (match_num, tourney_id),\n    FOREIGN KEY (winner_id) REFERENCES players(player_id),\n    FOREIGN KEY (loser_id)  REFERENCES players(player_id)\n);\n\nCREATE TABLE rankings (\n    ranking_date    DATE,\n    player_id       INTEGER,\n    ranking         INTEGER,\n    ranking_points  INTEGER,\n    tours           INTEGER,\n    PRIMARY KEY (ranking_date, player_id),\n    FOREIGN KEY (player_id) REFERENCES players(player_id)\n);\n</sql>", "idx": 485}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. The disposition_of_ship contains values such as Captured. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "How many ships ended up being 'Captured'?", "output": "select count(*) from ship where disposition_of_ship = 'Captured'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(100),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(100),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 491}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "List the name and tonnage ordered by in descending alphaetical order for the names.", "output": "select name, tonnage from ship order by name desc", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(100),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 492}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. The bulgarian_commander contains values such as Boril. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "output": "select name, result from battle where bulgarian_commander != 'Boril'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(100),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 497}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. The ship_type contains values such as Brig. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "output": "select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.ship_type = 'Brig'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(100),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 498}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. The bulgarian_commander contains values such as Kaloyan.The latin_commander contains values such as Baldwin I. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "output": "select name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(255),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 501}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. The name contains values such as HMS Atalanta, Lettice. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "output": "select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'HMS Atalanta'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(255),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    caused_by_ship_id INT,\n    note TEXT,\n    killed INT,\n    injured INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 504}
{"instruction": "battle_death contains tables such as battle, ship, death. Table battle has columns such as id, name, date, bulgarian_commander, latin_commander, result. id is the primary key. Table ship has columns such as lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. id is the primary key. The location contains values such as English Channel. Table death has columns such as caused_by_ship_id, id, note, killed, injured. id is the primary key. The lost_in_battle of ship is the foreign key of id of battle. The caused_by_ship_id of death is the foreign key of id of ship.", "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "output": "select name, result, bulgarian_commander from battle except select t1.name, t1.result, t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel'", "table_creating": "<sql>\nCREATE TABLE battle (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    date DATE,\n    bulgarian_commander VARCHAR(255),\n    latin_commander VARCHAR(255),\n    result VARCHAR(255)\n);\n\nCREATE TABLE ship (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    tonnage DECIMAL(10,2),\n    ship_type VARCHAR(100),\n    location VARCHAR(255),\n    disposition_of_ship VARCHAR(255),\n    lost_in_battle INT,\n    FOREIGN KEY (lost_in_battle) REFERENCES battle(id)\n);\n\nCREATE TABLE death (\n    id INT PRIMARY KEY,\n    note TEXT,\n    killed INT,\n    injured INT,\n    caused_by_ship_id INT,\n    FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)\n);\n</sql>", "idx": 505}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "what are all the addresses including line 1 and line 2?", "output": "select line_1, line_2 from addresses", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id              SERIAL PRIMARY KEY,\n    line_1                  VARCHAR(255),\n    line_2                  VARCHAR(255),\n    line_3                  VARCHAR(255),\n    city                    VARCHAR(100),\n    zip_postcode            VARCHAR(20),\n    state_province_county   VARCHAR(100),\n    country                 VARCHAR(100),\n    other_address_details   TEXT\n);\n\nCREATE TABLE courses (\n    course_id          SERIAL PRIMARY KEY,\n    course_name        VARCHAR(255) NOT NULL,\n    course_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE departments (\n    department_id         SERIAL PRIMARY KEY,\n    department_name       VARCHAR(255) NOT NULL,\n    department_description TEXT,\n    other_details         TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id        SERIAL PRIMARY KEY,\n    department_id            INTEGER NOT NULL,\n    degree_summary_name      VARCHAR(255) NOT NULL,\n    degree_summary_description TEXT,\n    other_details            TEXT,\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\n);\n\nCREATE TABLE sections (\n    section_id      SERIAL PRIMARY KEY,\n    course_id       INTEGER NOT NULL,\n    section_name    VARCHAR(100),\n    section_description TEXT,\n    other_details   TEXT,\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id      SERIAL PRIMARY KEY,\n    semester_name    VARCHAR(100) NOT NULL,\n    semester_description TEXT,\n    other_details    TEXT\n);\n\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(100) NOT NULL,\n    middle_name           VARCHAR(100),\n    last_name             VARCHAR(100) NOT NULL,\n    cell_mobile_number    VARCHAR(50),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(50),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    FOREIGN KEY (current_address_id)   REFERENCES addresses(address_id),\n    FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id),\n    FOREIGN KEY (semester_id)       REFERENCES semesters(semester_id),\n    FOREIGN KEY (student_id)        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id    SERIAL PRIMARY KEY,\n    course_id            INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    FOREIGN KEY (course_id)            REFERENCES courses(course_id),\n    FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id),\n    FOREIGN KEY (transcript_id)     REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 507}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. The course_name contains values such as math. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. The department_name contains values such as math. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "How is the math course described?", "output": "select course_description from courses where course_name = 'math'", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id               SERIAL PRIMARY KEY,\n    line_1                   VARCHAR(255),\n    line_2                   VARCHAR(255),\n    line_3                   VARCHAR(255),\n    city                     VARCHAR(100),\n    zip_postcode             VARCHAR(20),\n    state_province_county    VARCHAR(100),\n    country                  VARCHAR(100),\n    other_address_details    TEXT\n);\n\nCREATE TABLE departments (\n    department_id            SERIAL PRIMARY KEY,\n    department_name          VARCHAR(100),\n    department_description   TEXT,\n    other_details            TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id        SERIAL PRIMARY KEY,\n    department_id            INTEGER NOT NULL,\n    degree_summary_name      VARCHAR(255),\n    degree_summary_description TEXT,\n    other_details            TEXT,\n    CONSTRAINT fk_degree_programs_departments\n        FOREIGN KEY (department_id)\n        REFERENCES departments(department_id)\n);\n\nCREATE TABLE courses (\n    course_id                SERIAL PRIMARY KEY,\n    course_name              VARCHAR(100),\n    course_description       TEXT,\n    other_details            TEXT\n);\n\nCREATE TABLE sections (\n    section_id               SERIAL PRIMARY KEY,\n    course_id                INTEGER NOT NULL,\n    section_name             VARCHAR(100),\n    section_description      TEXT,\n    other_details            TEXT,\n    CONSTRAINT fk_sections_courses\n        FOREIGN KEY (course_id)\n        REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id              SERIAL PRIMARY KEY,\n    semester_name            VARCHAR(100),\n    semester_description     TEXT,\n    other_details            TEXT\n);\n\nCREATE TABLE students (\n    student_id               SERIAL PRIMARY KEY,\n    current_address_id       INTEGER,\n    permanent_address_id     INTEGER,\n    first_name               VARCHAR(100),\n    middle_name              VARCHAR(100),\n    last_name                VARCHAR(100),\n    cell_mobile_number       VARCHAR(30),\n    email_address            VARCHAR(255),\n    ssn                      VARCHAR(30),\n    date_first_registered    DATE,\n    date_left                DATE,\n    other_student_details    TEXT,\n    CONSTRAINT fk_students_current_address\n        FOREIGN KEY (current_address_id)\n        REFERENCES addresses(address_id),\n    CONSTRAINT fk_students_permanent_address\n        FOREIGN KEY (permanent_address_id)\n        REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id     SERIAL PRIMARY KEY,\n    degree_program_id        INTEGER NOT NULL,\n    semester_id              INTEGER NOT NULL,\n    student_id               INTEGER NOT NULL,\n    other_details            TEXT,\n    CONSTRAINT fk_enrolment_degree_program\n        FOREIGN KEY (degree_program_id)\n        REFERENCES degree_programs(degree_program_id),\n    CONSTRAINT fk_enrolment_semester\n        FOREIGN KEY (semester_id)\n        REFERENCES semesters(semester_id),\n    CONSTRAINT fk_enrolment_student\n        FOREIGN KEY (student_id)\n        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id        SERIAL PRIMARY KEY,\n    course_id                INTEGER NOT NULL,\n    student_enrolment_id     INTEGER NOT NULL,\n    CONSTRAINT fk_enrolment_courses_course\n        FOREIGN KEY (course_id)\n        REFERENCES courses(course_id),\n    CONSTRAINT fk_enrolment_courses_enrolment\n        FOREIGN KEY (student_enrolment_id)\n        REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id            SERIAL PRIMARY KEY,\n    transcript_date          DATE,\n    other_details            TEXT\n);\n\nCREATE TABLE transcript_contents (\n    transcript_id            INTEGER NOT NULL,\n    student_course_id        INTEGER NOT NULL,\n    PRIMARY KEY (transcript_id, student_course_id),\n    CONSTRAINT fk_transcript_contents_transcript\n        FOREIGN KEY (transcript_id)\n        REFERENCES transcripts(transcript_id),\n    CONSTRAINT fk_transcript_contents_student_course\n        FOREIGN KEY (student_course_id)\n        REFERENCES student_enrolment_courses(student_course_id)\n);\n</sql>", "idx": 511}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The city contains values such as Port Chelsea. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "What is the zip code of the address in the city Port Chelsea?", "output": "select zip_postcode from addresses where city = 'Port Chelsea'", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id              SERIAL PRIMARY KEY,\n    line_1                  VARCHAR(255),\n    line_2                  VARCHAR(255),\n    line_3                  VARCHAR(255),\n    city                    VARCHAR(255),\n    zip_postcode            VARCHAR(20),\n    state_province_county   VARCHAR(255),\n    country                 VARCHAR(255),\n    other_address_details   TEXT\n);\n\nCREATE TABLE courses (\n    course_id          SERIAL PRIMARY KEY,\n    course_name        VARCHAR(255),\n    course_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE departments (\n    department_id      SERIAL PRIMARY KEY,\n    department_name    VARCHAR(255),\n    department_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id      SERIAL PRIMARY KEY,\n    department_id          INTEGER NOT NULL,\n    degree_summary_name    VARCHAR(255),\n    degree_summary_description TEXT,\n    other_details          TEXT,\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\n);\n\nCREATE TABLE sections (\n    section_id      SERIAL PRIMARY KEY,\n    course_id       INTEGER NOT NULL,\n    section_name    VARCHAR(255),\n    section_description TEXT,\n    other_details   TEXT,\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id     SERIAL PRIMARY KEY,\n    semester_name   VARCHAR(255),\n    semester_description TEXT,\n    other_details   TEXT\n);\n\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(255),\n    middle_name           VARCHAR(255),\n    last_name             VARCHAR(255),\n    cell_mobile_number    VARCHAR(50),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(50),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    FOREIGN KEY (current_address_id)   REFERENCES addresses(address_id),\n    FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id),\n    FOREIGN KEY (semester_id)       REFERENCES semesters(semester_id),\n    FOREIGN KEY (student_id)        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id   SERIAL PRIMARY KEY,\n    course_id           INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    FOREIGN KEY (course_id)            REFERENCES courses(course_id),\n    FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id),\n    FOREIGN KEY (transcript_id)     REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 513}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. The degree_summary_name contains values such as Bachelor. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "output": "select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id              SERIAL PRIMARY KEY,\n    line_1                  VARCHAR(255),\n    line_2                  VARCHAR(255),\n    line_3                  VARCHAR(255),\n    city                    VARCHAR(100),\n    zip_postcode            VARCHAR(20),\n    state_province_county   VARCHAR(100),\n    country                 VARCHAR(100),\n    other_address_details   TEXT\n);\n\nCREATE TABLE courses (\n    course_id          SERIAL PRIMARY KEY,\n    course_name        VARCHAR(255) NOT NULL,\n    course_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE departments (\n    department_id        SERIAL PRIMARY KEY,\n    department_name      VARCHAR(255) NOT NULL,\n    department_description TEXT,\n    other_details        TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id        SERIAL PRIMARY KEY,\n    department_id            INTEGER NOT NULL,\n    degree_summary_name      VARCHAR(100),\n    degree_summary_description TEXT,\n    other_details            TEXT,\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\n);\n\nCREATE TABLE sections (\n    section_id      SERIAL PRIMARY KEY,\n    course_id       INTEGER NOT NULL,\n    section_name    VARCHAR(100),\n    section_description TEXT,\n    other_details   TEXT,\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id      SERIAL PRIMARY KEY,\n    semester_name    VARCHAR(100),\n    semester_description TEXT,\n    other_details    TEXT\n);\n\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(100),\n    middle_name           VARCHAR(100),\n    last_name             VARCHAR(100),\n    cell_mobile_number    VARCHAR(30),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(20),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    FOREIGN KEY (current_address_id)   REFERENCES addresses(address_id),\n    FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id),\n    FOREIGN KEY (semester_id)       REFERENCES semesters(semester_id),\n    FOREIGN KEY (student_id)        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id    SERIAL PRIMARY KEY,\n    course_id            INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    FOREIGN KEY (course_id)            REFERENCES courses(course_id),\n    FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id),\n    FOREIGN KEY (transcript_id)     REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 535}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. The first_name contains values such as Timmothy.The last_name contains values such as Ward. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "output": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id               SERIAL PRIMARY KEY,\n    line_1                   VARCHAR(255),\n    line_2                   VARCHAR(255),\n    line_3                   VARCHAR(255),\n    city                     VARCHAR(100),\n    zip_postcode             VARCHAR(20),\n    state_province_county    VARCHAR(100),\n    country                  VARCHAR(100),\n    other_address_details    TEXT\n);\n\nCREATE TABLE departments (\n    department_id        SERIAL PRIMARY KEY,\n    department_name      VARCHAR(100) NOT NULL,\n    department_description TEXT,\n    other_details        TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id        SERIAL PRIMARY KEY,\n    department_id            INTEGER NOT NULL,\n    degree_summary_name      VARCHAR(255),\n    degree_summary_description TEXT,\n    other_details            TEXT,\n    CONSTRAINT fk_degree_programs_departments\n        FOREIGN KEY (department_id)\n        REFERENCES departments(department_id)\n);\n\nCREATE TABLE courses (\n    course_id         SERIAL PRIMARY KEY,\n    course_name       VARCHAR(255) NOT NULL,\n    course_description TEXT,\n    other_details     TEXT\n);\n\nCREATE TABLE sections (\n    section_id        SERIAL PRIMARY KEY,\n    course_id         INTEGER NOT NULL,\n    section_name      VARCHAR(100),\n    section_description TEXT,\n    other_details     TEXT,\n    CONSTRAINT fk_sections_courses\n        FOREIGN KEY (course_id)\n        REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id       SERIAL PRIMARY KEY,\n    semester_name     VARCHAR(100),\n    semester_description TEXT,\n    other_details     TEXT\n);\n\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(100),\n    middle_name           VARCHAR(100),\n    last_name             VARCHAR(100),\n    cell_mobile_number    VARCHAR(25),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(25),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    CONSTRAINT fk_students_current_address\n        FOREIGN KEY (current_address_id)\n        REFERENCES addresses(address_id),\n    CONSTRAINT fk_students_permanent_address\n        FOREIGN KEY (permanent_address_id)\n        REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    CONSTRAINT fk_enrolment_degree_program\n        FOREIGN KEY (degree_program_id)\n        REFERENCES degree_programs(degree_program_id),\n    CONSTRAINT fk_enrolment_semester\n        FOREIGN KEY (semester_id)\n        REFERENCES semesters(semester_id),\n    CONSTRAINT fk_enrolment_student\n        FOREIGN KEY (student_id)\n        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id    SERIAL PRIMARY KEY,\n    course_id            INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    CONSTRAINT fk_enrolment_courses_course\n        FOREIGN KEY (course_id)\n        REFERENCES courses(course_id),\n    CONSTRAINT fk_enrolment_courses_enrolment\n        FOREIGN KEY (student_enrolment_id)\n        REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    CONSTRAINT fk_transcript_contents_student_course\n        FOREIGN KEY (student_course_id)\n        REFERENCES student_enrolment_courses(student_course_id),\n    CONSTRAINT fk_transcript_contents_transcript\n        FOREIGN KEY (transcript_id)\n        REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 553}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. The degree_summary_name contains values such as Bachelor, Master. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "Find the semester when both Master students and Bachelor students got enrolled in.", "output": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where degree_summary_name = 'Bachelor'", "table_creating": "<sql>\n-- addresses\nCREATE TABLE addresses (\n    address_id            SERIAL PRIMARY KEY,\n    line_1                VARCHAR(255),\n    line_2                VARCHAR(255),\n    line_3                VARCHAR(255),\n    city                  VARCHAR(100),\n    zip_postcode          VARCHAR(20),\n    state_province_county VARCHAR(100),\n    country               VARCHAR(100),\n    other_address_details TEXT\n);\n\n-- departments\nCREATE TABLE departments (\n    department_id         SERIAL PRIMARY KEY,\n    department_name       VARCHAR(100) NOT NULL,\n    department_description TEXT,\n    other_details         TEXT\n);\n\n-- degree_programs\nCREATE TABLE degree_programs (\n    degree_program_id        SERIAL PRIMARY KEY,\n    department_id            INTEGER NOT NULL,\n    degree_summary_name      VARCHAR(50) CHECK (degree_summary_name IN ('Bachelor','Master')),\n    degree_summary_description TEXT,\n    other_details            TEXT,\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\n);\n\n-- courses\nCREATE TABLE courses (\n    course_id          SERIAL PRIMARY KEY,\n    course_name        VARCHAR(100) NOT NULL,\n    course_description TEXT,\n    other_details      TEXT\n);\n\n-- sections\nCREATE TABLE sections (\n    section_id       SERIAL PRIMARY KEY,\n    course_id        INTEGER NOT NULL,\n    section_name     VARCHAR(100),\n    section_description TEXT,\n    other_details    TEXT,\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\n-- semesters\nCREATE TABLE semesters (\n    semester_id      SERIAL PRIMARY KEY,\n    semester_name    VARCHAR(50) NOT NULL,\n    semester_description TEXT,\n    other_details    TEXT\n);\n\n-- students\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(100) NOT NULL,\n    middle_name           VARCHAR(100),\n    last_name             VARCHAR(100) NOT NULL,\n    cell_mobile_number    VARCHAR(25),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(25),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    FOREIGN KEY (current_address_id)   REFERENCES addresses(address_id),\n    FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id)\n);\n\n-- student_enrolment\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id),\n    FOREIGN KEY (semester_id)       REFERENCES semesters(semester_id),\n    FOREIGN KEY (student_id)        REFERENCES students(student_id)\n);\n\n-- student_enrolment_courses\nCREATE TABLE student_enrolment_courses (\n    student_course_id   SERIAL PRIMARY KEY,\n    course_id           INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    FOREIGN KEY (course_id)           REFERENCES courses(course_id),\n    FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id)\n);\n\n-- transcripts\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\n-- transcript_contents\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id),\n    FOREIGN KEY (transcript_id)     REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 575}
{"instruction": "student_transcripts_tracking contains tables such as addresses, courses, departments, degree_programs, sections, semesters, students, student_enrolment, student_enrolment_courses, transcripts, transcript_contents. Table addresses has columns such as address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. address_id is the primary key. The country contains values such as Haiti. Table courses has columns such as course_id, course_name, course_description, other_details. course_id is the primary key. Table departments has columns such as department_id, department_name, department_description, other_details. department_id is the primary key. Table degree_programs has columns such as degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. degree_program_id is the primary key. Table sections has columns such as section_id, course_id, section_name, section_description, other_details. section_id is the primary key. Table semesters has columns such as semester_id, semester_name, semester_description, other_details. semester_id is the primary key. Table students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. student_id is the primary key. Table student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details. student_enrolment_id is the primary key. Table student_enrolment_courses has columns such as student_course_id, course_id, student_enrolment_id. student_course_id is the primary key. Table transcripts has columns such as transcript_id, transcript_date, other_details. transcript_id is the primary key. Table transcript_contents has columns such as student_course_id, transcript_id.  is the primary key. The department_id of degree_programs is the foreign key of department_id of departments. The course_id of sections is the foreign key of course_id of courses. The permanent_address_id of students is the foreign key of address_id of addresses. The current_address_id of students is the foreign key of address_id of addresses. The student_id of student_enrolment is the foreign key of student_id of students. The semester_id of student_enrolment is the foreign key of semester_id of semesters. The degree_program_id of student_enrolment is the foreign key of degree_program_id of degree_programs. The student_enrolment_id of student_enrolment_courses is the foreign key of student_enrolment_id of student_enrolment. The course_id of student_enrolment_courses is the foreign key of course_id of courses. The transcript_id of transcript_contents is the foreign key of transcript_id of transcripts. The student_course_id of transcript_contents is the foreign key of student_course_id of student_enrolment_courses.", "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'", "table_creating": "<sql>\nCREATE TABLE addresses (\n    address_id              SERIAL PRIMARY KEY,\n    line_1                  VARCHAR(255),\n    line_2                  VARCHAR(255),\n    line_3                  VARCHAR(255),\n    city                    VARCHAR(100),\n    zip_postcode            VARCHAR(20),\n    state_province_county   VARCHAR(100),\n    country                 VARCHAR(100),\n    other_address_details   TEXT\n);\n\nCREATE TABLE courses (\n    course_id          SERIAL PRIMARY KEY,\n    course_name        VARCHAR(255) NOT NULL,\n    course_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE departments (\n    department_id      SERIAL PRIMARY KEY,\n    department_name    VARCHAR(255) NOT NULL,\n    department_description TEXT,\n    other_details      TEXT\n);\n\nCREATE TABLE degree_programs (\n    degree_program_id      SERIAL PRIMARY KEY,\n    department_id          INTEGER NOT NULL,\n    degree_summary_name    VARCHAR(255),\n    degree_summary_description TEXT,\n    other_details          TEXT,\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\n);\n\nCREATE TABLE sections (\n    section_id     SERIAL PRIMARY KEY,\n    course_id      INTEGER NOT NULL,\n    section_name   VARCHAR(100),\n    section_description TEXT,\n    other_details  TEXT,\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n\nCREATE TABLE semesters (\n    semester_id      SERIAL PRIMARY KEY,\n    semester_name    VARCHAR(100),\n    semester_description TEXT,\n    other_details    TEXT\n);\n\nCREATE TABLE students (\n    student_id            SERIAL PRIMARY KEY,\n    current_address_id    INTEGER,\n    permanent_address_id  INTEGER,\n    first_name            VARCHAR(100),\n    middle_name           VARCHAR(100),\n    last_name             VARCHAR(100),\n    cell_mobile_number    VARCHAR(30),\n    email_address         VARCHAR(255),\n    ssn                   VARCHAR(11),\n    date_first_registered DATE,\n    date_left             DATE,\n    other_student_details TEXT,\n    FOREIGN KEY (current_address_id)   REFERENCES addresses(address_id),\n    FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id)\n);\n\nCREATE TABLE student_enrolment (\n    student_enrolment_id SERIAL PRIMARY KEY,\n    degree_program_id    INTEGER NOT NULL,\n    semester_id          INTEGER NOT NULL,\n    student_id           INTEGER NOT NULL,\n    other_details        TEXT,\n    FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id),\n    FOREIGN KEY (semester_id)       REFERENCES semesters(semester_id),\n    FOREIGN KEY (student_id)        REFERENCES students(student_id)\n);\n\nCREATE TABLE student_enrolment_courses (\n    student_course_id    SERIAL PRIMARY KEY,\n    course_id            INTEGER NOT NULL,\n    student_enrolment_id INTEGER NOT NULL,\n    FOREIGN KEY (course_id)            REFERENCES courses(course_id),\n    FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id)\n);\n\nCREATE TABLE transcripts (\n    transcript_id   SERIAL PRIMARY KEY,\n    transcript_date DATE,\n    other_details   TEXT\n);\n\nCREATE TABLE transcript_contents (\n    student_course_id INTEGER NOT NULL,\n    transcript_id     INTEGER NOT NULL,\n    PRIMARY KEY (student_course_id, transcript_id),\n    FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id),\n    FOREIGN KEY (transcript_id)     REFERENCES transcripts(transcript_id)\n);\n</sql>", "idx": 583}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "List the title of all cartoons in alphabetical order.", "output": "select title from cartoon order by title", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 585}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The directed_by contains values such as Ben Jones. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "List all cartoon directed by \"Ben Jones\".", "output": "select title from cartoon where directed_by = \"Ben Jones\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 587}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The written_by contains values such as Joseph Kuhr. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "How many cartoons were written by \"Joseph Kuhr\"?", "output": "select count(*) from cartoon where written_by = \"Joseph Kuhr\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,2),\n    share DECIMAL(3,2),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(6,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 589}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The directed_by contains values such as Brandon Vietti, Ben Jones. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "output": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 593}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. The series_name contains values such as Sky Radio. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "What is the content of TV Channel with serial name \"Sky Radio\"?", "output": "select content from tv_channel where series_name = \"Sky Radio\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(255),\n    language VARCHAR(255),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(255),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(255)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(255),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(255),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 599}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. The series_name contains values such as Sky Radio.The package_option contains values such as Option. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "output": "select package_option from tv_channel where series_name = \"Sky Radio\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(255),\n    language VARCHAR(255),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(50),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(255)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(10),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 601}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. The language contains values such as English. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "How many TV Channel using language English?", "output": "select count(*) from tv_channel where language = \"English\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(255),\n    language VARCHAR(255),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(255),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(255)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(255),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(255),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 603}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The title contains values such as The Rise of the Blue Beetle!. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "output": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"The rise of the blue beetle!\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 609}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. The episode contains values such as A Love of a Lifetime. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "output": "select air_date from tv_series where episode = \"A love of a Lifetime\";", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(255),\n    language VARCHAR(255),\n    content TEXT,\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(255)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(10),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 619}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. The package_option contains values such as Option. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "output": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(50) CHECK (package_option IN ('Option'))\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(100),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 632}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The written_by contains values such as Todd Casey. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "which countries' tv channels are playing some cartoon written by Todd Casey?", "output": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey'", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 633}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The directed_by contains values such as Michael Chang, Ben Jones. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "output": "select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Michael Chang' intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = 'Ben Jones'", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(100),\n    language VARCHAR(100),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(20),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(100)\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(20),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(50),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 637}
{"instruction": "tvshow contains tables such as tv_channel, tv_series, cartoon. Table tv_channel has columns such as id, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option. id is the primary key. The package_option contains values such as Option. Table tv_series has columns such as id, episode, air_date, rating, share, 18_49_rating_share, viewers_m, weekly_rank, channel. id is the primary key. Table cartoon has columns such as id, title, directed_by, written_by, original_air_date, production_code, channel. id is the primary key. The directed_by contains values such as Ben Jones. The channel of tv_series is the foreign key of id of tv_channel. The channel of cartoon is the foreign key of id of tv_channel.", "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "output": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by = 'Ben Jones')", "table_creating": "<sql>\nCREATE TABLE tv_channel (\n    id INT PRIMARY KEY,\n    series_name VARCHAR(255),\n    country VARCHAR(255),\n    language VARCHAR(255),\n    content VARCHAR(255),\n    pixel_aspect_ratio_par VARCHAR(255),\n    hight_definition_tv BOOLEAN,\n    pay_per_view_ppv BOOLEAN,\n    package_option VARCHAR(255) CHECK (package_option = 'Option')\n);\n\nCREATE TABLE tv_series (\n    id INT PRIMARY KEY,\n    episode VARCHAR(255),\n    air_date DATE,\n    rating DECIMAL(3,1),\n    share DECIMAL(3,1),\n    18_49_rating_share VARCHAR(255),\n    viewers_m DECIMAL(5,2),\n    weekly_rank INT,\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n\nCREATE TABLE cartoon (\n    id INT PRIMARY KEY,\n    title VARCHAR(255),\n    directed_by VARCHAR(255) CHECK (directed_by = 'Ben Jones'),\n    written_by VARCHAR(255),\n    original_air_date DATE,\n    production_code VARCHAR(255),\n    channel INT,\n    FOREIGN KEY (channel) REFERENCES tv_channel(id)\n);\n</sql>", "idx": 645}
{"instruction": "poker_player contains tables such as poker_player, people. Table poker_player has columns such as poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings. poker_player_id is the primary key. Table people has columns such as people_id, nationality, name, birth_date, height. people_id is the primary key. The people_id of poker_player is the foreign key of people_id of people.", "input": "How many poker players are there?", "output": "select count(*) from poker_player", "table_creating": "<sql>\nCREATE TABLE people (\n    people_id   INT PRIMARY KEY,\n    nationality VARCHAR(100),\n    name        VARCHAR(255) NOT NULL,\n    birth_date  DATE,\n    height      DECIMAL(4,2)\n);\n\nCREATE TABLE poker_player (\n    poker_player_id  INT PRIMARY KEY,\n    people_id        INT NOT NULL,\n    final_table_made INT,\n    best_finish      INT,\n    money_rank       INT,\n    earnings         DECIMAL(15,2),\n    FOREIGN KEY (people_id) REFERENCES people(people_id)\n);\n</sql>", "idx": 647}
{"instruction": "poker_player contains tables such as poker_player, people. Table poker_player has columns such as poker_player_id, people_id, final_table_made, best_finish, money_rank, earnings. poker_player_id is the primary key. Table people has columns such as people_id, nationality, name, birth_date, height. people_id is the primary key. The nationality contains values such as Russia. The people_id of poker_player is the foreign key of people_id of people.", "input": "Show names of people whose nationality is not \"Russia\".", "output": "select name from people where nationality != \"Russia\"", "table_creating": "<sql>\nCREATE TABLE people (\n    people_id   INT PRIMARY KEY,\n    nationality VARCHAR(100),\n    name        VARCHAR(255),\n    birth_date  DATE,\n    height      INT\n);\n\nCREATE TABLE poker_player (\n    poker_player_id  INT PRIMARY KEY,\n    people_id        INT,\n    final_table_made INT,\n    best_finish      INT,\n    money_rank       INT,\n    earnings         DECIMAL(15,2),\n    FOREIGN KEY (people_id) REFERENCES people(people_id)\n);\n</sql>", "idx": 681}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "How many states are there?", "output": "select count(*) from area_code_state", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number),\n    FOREIGN KEY (state) REFERENCES area_code_state(state)\n);\n</sql>", "idx": 687}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. The state contains values such as CA. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The state contains values such as CA. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "What is last date created of votes from the state 'CA'?", "output": "select max(created) from votes where state = 'CA'", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(2) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (state) REFERENCES area_code_state(state),\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number)\n);\n</sql>", "idx": 691}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. The contestant_name contains values such as Jessie Alloway. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "What are the names of the contestants whose names are not 'Jessie Alloway'", "output": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number),\n    FOREIGN KEY (state) REFERENCES area_code_state(state)\n);\n</sql>", "idx": 692}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. The state contains values such as NY, CA. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The state contains values such as CA, NY. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "What are the number of votes from state 'NY' or 'CA'?", "output": "select count(*) from votes where state = 'NY' or state = 'CA'", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(2) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(2) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (state) REFERENCES area_code_state(state),\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number)\n);\n</sql>", "idx": 696}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. The contestant_name contains values such as Tabatha Gehling. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "output": "select t2.created, t2.state, t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number where t1.contestant_name = 'Tabatha Gehling'", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number),\n    FOREIGN KEY (state) REFERENCES area_code_state(state)\n);\n</sql>", "idx": 699}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. The contestant_name contains values such as Tabatha Gehling, Kelly Clauss. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "output": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Tabatha Gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t2.state = t3.state where t1.contestant_name = 'Kelly Clauss'", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state VARCHAR(50) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number),\n    FOREIGN KEY (state) REFERENCES area_code_state(state)\n);\n</sql>", "idx": 700}
{"instruction": "voter_1 contains tables such as area_code_state, contestants, votes. Table area_code_state has columns such as area_code, state. area_code is the primary key. The state contains values such as AL. Table contestants has columns such as contestant_number, contestant_name. contestant_number is the primary key. Table votes has columns such as vote_id, phone_number, state, contestant_number, created. vote_id is the primary key. The contestant_number of votes is the foreign key of contestant_number of contestants. The state of votes is the foreign key of state of area_code_state.", "input": "Return the names of the contestants whose names contain the substring 'Al' .", "output": "select contestant_name from contestants where contestant_name like \"%al%\"", "table_creating": "<sql>\nCREATE TABLE area_code_state (\n    area_code VARCHAR(10) PRIMARY KEY,\n    state CHAR(2) NOT NULL\n);\n\nCREATE TABLE contestants (\n    contestant_number INT PRIMARY KEY,\n    contestant_name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE votes (\n    vote_id INT PRIMARY KEY,\n    phone_number VARCHAR(20) NOT NULL,\n    state CHAR(2) NOT NULL,\n    contestant_number INT NOT NULL,\n    created DATETIME NOT NULL,\n    FOREIGN KEY (state) REFERENCES area_code_state(state),\n    FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number)\n);\n</sql>", "idx": 701}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. The name contains values such as Independence. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the names of all the countries that became independent after 1950?", "output": "select name from country where indepyear > 1950", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 702}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Give the names of the nations that were founded after 1950.", "output": "select name from country where indepyear > 1950", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 703}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The governmentform contains values such as Republic. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "How many countries have a republic as their form of government?", "output": "select count(*) from country where governmentform = \"Republic\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 704}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The region contains values such as Caribbean. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as Caribbean. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the total surface area of the countries in the Caribbean region?", "output": "select sum(surfacearea) from country where region = \"Caribbean\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3)      PRIMARY KEY,\n    name            TEXT         NOT NULL,\n    continent       TEXT         NOT NULL,\n    region          TEXT         NOT NULL,\n    surfacearea     REAL         NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER      NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT         NOT NULL,\n    governmentform  TEXT         NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2)      NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER      PRIMARY KEY AUTOINCREMENT,\n    name        TEXT         NOT NULL,\n    countrycode CHAR(3)      NOT NULL,\n    district    TEXT         NOT NULL,\n    population  INTEGER      NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3)      NOT NULL,\n    language    TEXT         NOT NULL,\n    isofficial  BOOLEAN      NOT NULL,\n    percentage  REAL         NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 706}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The name contains values such as Anguilla.The localname contains values such as Anguilla. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which continent is Anguilla in?", "output": "select continent from country where name = \"Anguilla\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 708}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. The name contains values such as Kabul. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which region is the city Kabul located in?", "output": "select region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = \"Kabul\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 710}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The name contains values such as Aruba.The localname contains values such as Aruba. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which language is the most popular in Aruba?", "output": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\" order by percentage desc limit 1", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 712}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The name contains values such as Brazil. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the population and life expectancies in Brazil?", "output": "select population, lifeexpectancy from country where name = \"Brazil\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 714}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The name contains values such as Angola.The localname contains values such as Angola. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the region and population of Angola?", "output": "select population, region from country where name = \"Angola\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 716}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. The district contains values such as Central. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Africa.The region contains values such as Central Africa. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the average expected life expectancy for countries in the region of Central Africa?", "output": "select avg(lifeexpectancy) from country where region = \"Central Africa\"", "table_creating": "<sql>\nCREATE TABLE city (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district TEXT NOT NULL,\n    population INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq INTEGER\n);\n\nCREATE TABLE country (\n    code CHAR(3) PRIMARY KEY,\n    name TEXT NOT NULL,\n    continent TEXT NOT NULL CHECK (continent IN ('Asia','Europe','North America','Africa','Oceania','Antarctica','South America')),\n    region TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear INTEGER,\n    population INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp REAL,\n    gnpold REAL,\n    localname TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital INTEGER,\n    code2 CHAR(2) NOT NULL\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language TEXT NOT NULL,\n    isofficial BOOLEAN NOT NULL,\n    percentage REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 718}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Asia. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the name of country that has the shortest life expectancy in Asia?", "output": "select name from country where continent = \"Asia\" order by lifeexpectancy limit 1", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 720}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Africa.The governmentform contains values such as Republic. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the average life expectancy in African countries that are republics?", "output": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"", "table_creating": "<sql>\n-- Table: city\nCREATE TABLE city (\n    id            INTEGER PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    countrycode   CHAR(3) NOT NULL,\n    district      TEXT,\n    population    INTEGER,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\n-- Table: sqlite_sequence\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n\n-- Table: country\nCREATE TABLE country (\n    code          CHAR(3) PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    continent     TEXT    NOT NULL,\n    region        TEXT,\n    surfacearea   REAL,\n    indepyear     INTEGER,\n    population    INTEGER,\n    lifeexpectancy REAL,\n    gnp           REAL,\n    gnpold        REAL,\n    localname     TEXT,\n    governmentform TEXT,\n    headofstate   TEXT,\n    capital       INTEGER,\n    code2         CHAR(2)\n);\n\n-- Table: countrylanguage\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN,\n    percentage  REAL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 724}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Europe, Asia. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the total surface area of the continents Asia and Europe?", "output": "select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL CHECK (continent IN ('Europe','Asia','North America','South America','Africa','Oceania','Antarctica')),\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL CHECK (percentage BETWEEN 0 AND 100),\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 726}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. The district contains values such as Gelderland. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "How many people live in Gelderland district?", "output": "select sum(population) from city where district = \"Gelderland\"", "table_creating": "<sql>\n-- Table: city\nCREATE TABLE city (\n    id           INTEGER PRIMARY KEY,\n    name         TEXT    NOT NULL,\n    countrycode  TEXT    NOT NULL,\n    district     TEXT,\n    population   INTEGER,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\n-- Table: sqlite_sequence\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n\n-- Table: country\nCREATE TABLE country (\n    code         TEXT PRIMARY KEY,\n    name         TEXT    NOT NULL,\n    continent    TEXT,\n    region       TEXT,\n    surfacearea  REAL,\n    indepyear    INTEGER,\n    population   INTEGER,\n    lifeexpectancy REAL,\n    gnp          REAL,\n    gnpold       REAL,\n    localname    TEXT,\n    governmentform TEXT,\n    headofstate  TEXT,\n    capital      INTEGER,\n    code2        TEXT\n);\n\n-- Table: countrylanguage\nCREATE TABLE countrylanguage (\n    countrycode TEXT NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN,\n    percentage  REAL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 728}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The governmentform contains values such as US Territory.The code2 contains values such as US. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the average GNP and total population in all nations whose government is US territory?", "output": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 730}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Africa. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "How many type of governments are in Africa?", "output": "select count(distinct governmentform) from country where continent = \"Africa\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code           CHAR(3) PRIMARY KEY,\n    name           TEXT NOT NULL,\n    continent      TEXT NOT NULL,\n    region         TEXT NOT NULL,\n    surfacearea    REAL NOT NULL,\n    indepyear      INTEGER,\n    population     INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp            REAL,\n    gnpold         REAL,\n    localname      TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate    TEXT,\n    capital        INTEGER,\n    code2          CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 734}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The name contains values such as Afghanistan. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "How many official languages does Afghanistan have?", "output": "select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Afghanistan\" and isofficial = \"T\"", "table_creating": "<sql>\n-- Table: city\nCREATE TABLE city (\n    id            INTEGER PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    countrycode   CHAR(3) NOT NULL,\n    district      TEXT,\n    population    INTEGER,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\n-- Table: sqlite_sequence\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n\n-- Table: country\nCREATE TABLE country (\n    code          CHAR(3) PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    continent     TEXT,\n    region        TEXT,\n    surfacearea   REAL,\n    indepyear     INTEGER,\n    population    INTEGER,\n    lifeexpectancy REAL,\n    gnp           REAL,\n    gnpold        REAL,\n    localname     TEXT,\n    governmentform TEXT,\n    headofstate   TEXT,\n    capital       INTEGER,\n    code2         CHAR(2)\n);\n\n-- Table: countrylanguage\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN,\n    percentage  REAL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 738}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as English, Dutch. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "How many countries speak both English and Dutch?", "output": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Dutch\")", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 744}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as English, French. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the names of nations speak both English and French?", "output": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"English\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"French\"", "table_creating": "<sql>\n-- Table: city\nCREATE TABLE city (\n    id            INTEGER PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    countrycode   CHAR(3) NOT NULL,\n    district      TEXT,\n    population    INTEGER,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\n-- Table: sqlite_sequence\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n\n-- Table: country\nCREATE TABLE country (\n    code         CHAR(3) PRIMARY KEY,\n    name         TEXT    NOT NULL,\n    continent    TEXT,\n    region       TEXT,\n    surfacearea  REAL,\n    indepyear    INTEGER,\n    population   INTEGER,\n    lifeexpectancy REAL,\n    gnp          REAL,\n    gnpold       REAL,\n    localname    TEXT,\n    governmentform TEXT,\n    headofstate  TEXT,\n    capital      INTEGER,\n    code2        CHAR(2)\n);\n\n-- Table: countrylanguage\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN,\n    percentage  REAL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 746}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as Chinese. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the number of distinct continents where Chinese is spoken?", "output": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"Chinese\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT    NOT NULL,\n    continent       TEXT    NOT NULL,\n    region          TEXT    NOT NULL,\n    surfacearea     REAL    NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT    NOT NULL,\n    governmentform  TEXT    NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT    NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT    NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL    NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 750}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as English. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Find the city with the largest population that uses English.", "output": "select t1.name, t1.population from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = \"English\" order by t1.population desc limit 1", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 760}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The headofstate contains values such as Beatrix. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the official language spoken in the country whose head of state is Beatrix?", "output": "select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = \"Beatrix\" and t2.isofficial = \"T\"", "table_creating": "<sql>\n-- Table: city\nCREATE TABLE city (\n    id            INTEGER PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    countrycode   CHAR(3) NOT NULL,\n    district      TEXT,\n    population    INTEGER,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\n-- Table: sqlite_sequence\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n\n-- Table: country\nCREATE TABLE country (\n    code          CHAR(3) PRIMARY KEY,\n    name          TEXT    NOT NULL,\n    continent     TEXT,\n    region        TEXT,\n    surfacearea   REAL,\n    indepyear     INTEGER,\n    population    INTEGER,\n    lifeexpectancy REAL,\n    gnp           REAL,\n    gnpold        REAL,\n    localname     TEXT,\n    governmentform TEXT,\n    headofstate   TEXT,\n    capital       INTEGER,\n    code2         CHAR(2)\n);\n\n-- Table: countrylanguage\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN,\n    percentage  REAL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n</sql>", "idx": 768}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Europe. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the countries that have greater surface area than any country in Europe?", "output": "select name from country where surfacearea > (select min(surfacearea) from country where continent = \"Europe\")", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 772}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Asia, Africa. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the African countries that have a  population less than any country in Asia?", "output": "select name from country where continent = \"Africa\" and population < (select max(population) from country where continent = \"Asia\")", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL CHECK (continent IN ('Asia','Africa','Europe','North America','South America','Oceania','Antarctica')),\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 774}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Africa, Asia. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which Asian countries have a population that is larger than any country in Africa?", "output": "select name from country where continent = \"Asia\" and population > (select max(population) from country where continent = \"Africa\")", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL CHECK (continent IN ('Africa','Asia','Europe','North America','South America','Oceania','Antarctica')),\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 776}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The governmentform contains values such as Republic. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as English. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "output": "select code from country where governmentform != \"Republic\" except select countrycode from countrylanguage where language = \"English\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT    NOT NULL,\n    continent       TEXT    NOT NULL,\n    region          TEXT    NOT NULL,\n    surfacearea     REAL    NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT    NOT NULL,\n    governmentform  TEXT    NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT    NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT    NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT    NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL    NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 782}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Europe. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as English. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which cities are in European countries where English is not the official language?", "output": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode = t1.code where t1.continent = 'Europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code = t4.countrycode where t4.isofficial = 'T' and t4.language = 'English')", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3) PRIMARY KEY,\n    name            TEXT NOT NULL,\n    continent       TEXT NOT NULL,\n    region          TEXT NOT NULL,\n    surfacearea     REAL NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT NOT NULL,\n    governmentform  TEXT NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 784}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as Asia. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as Chinese. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "Which unique cities are in Asian countries where Chinese is the official language ?", "output": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 786}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. The name contains values such as Americana. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. The continent contains values such as North America.The region contains values such as North America. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "output": "select sum(population), avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000", "table_creating": "<sql>\nCREATE TABLE country (\n    code            CHAR(3)      PRIMARY KEY,\n    name            TEXT         NOT NULL,\n    continent       TEXT         NOT NULL,\n    region          TEXT         NOT NULL,\n    surfacearea     REAL         NOT NULL,\n    indepyear       INTEGER,\n    population      INTEGER      NOT NULL,\n    lifeexpectancy  REAL,\n    gnp             REAL,\n    gnpold          REAL,\n    localname       TEXT         NOT NULL,\n    governmentform  TEXT         NOT NULL,\n    headofstate     TEXT,\n    capital         INTEGER,\n    code2           CHAR(2)      NOT NULL\n);\n\nCREATE TABLE city (\n    id           INTEGER      PRIMARY KEY AUTOINCREMENT,\n    name         TEXT         NOT NULL,\n    countrycode  CHAR(3)      NOT NULL,\n    district     TEXT         NOT NULL,\n    population   INTEGER      NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode  CHAR(3)      NOT NULL,\n    language     TEXT         NOT NULL,\n    isofficial   INTEGER      NOT NULL CHECK (isofficial IN (0,1)),\n    percentage   REAL         NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 810}
{"instruction": "world_1 contains tables such as city, sqlite_sequence, country, countrylanguage. Table city has columns such as id, name, countrycode, district, population. id is the primary key. Table sqlite_sequence has columns such as name, seq.  is the primary key. Table country has columns such as code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2. code is the primary key. Table countrylanguage has columns such as countrycode, language, isofficial, percentage. countrycode is the primary key. The language contains values such as Spanish. The countrycode of city is the foreign key of code of country. The countrycode of countrylanguage is the foreign key of code of country.", "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "output": "select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", "table_creating": "<sql>\nCREATE TABLE country (\n    code        CHAR(3) PRIMARY KEY,\n    name        TEXT NOT NULL,\n    continent   TEXT NOT NULL,\n    region      TEXT NOT NULL,\n    surfacearea REAL NOT NULL,\n    indepyear   INTEGER,\n    population  INTEGER NOT NULL,\n    lifeexpectancy REAL,\n    gnp         REAL,\n    gnpold      REAL,\n    localname   TEXT NOT NULL,\n    governmentform TEXT NOT NULL,\n    headofstate TEXT,\n    capital     INTEGER,\n    code2       CHAR(2) NOT NULL\n);\n\nCREATE TABLE city (\n    id          INTEGER PRIMARY KEY AUTOINCREMENT,\n    name        TEXT NOT NULL,\n    countrycode CHAR(3) NOT NULL,\n    district    TEXT NOT NULL,\n    population  INTEGER NOT NULL,\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE countrylanguage (\n    countrycode CHAR(3) NOT NULL,\n    language    TEXT NOT NULL,\n    isofficial  BOOLEAN NOT NULL,\n    percentage  REAL NOT NULL,\n    PRIMARY KEY (countrycode, language),\n    FOREIGN KEY (countrycode) REFERENCES country(code)\n);\n\nCREATE TABLE sqlite_sequence (\n    name TEXT PRIMARY KEY,\n    seq  INTEGER\n);\n</sql>", "idx": 818}
{"instruction": "orchestra contains tables such as conductor, orchestra, performance, show. Table conductor has columns such as conductor_id, name, age, nationality, year_of_work. conductor_id is the primary key. Table orchestra has columns such as orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format. orchestra_id is the primary key. Table performance has columns such as performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share. performance_id is the primary key. Table show has columns such as show_id, performance_id, if_first_show, result, attendance.  is the primary key. The conductor_id of orchestra is the foreign key of conductor_id of conductor. The orchestra_id of performance is the foreign key of orchestra_id of orchestra. The performance_id of show is the foreign key of performance_id of performance.", "input": "How many conductors are there?", "output": "select count(*) from conductor", "table_creating": "<sql>\nCREATE TABLE conductor (\n    conductor_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    age INT,\n    nationality VARCHAR(100),\n    year_of_work INT\n);\n\nCREATE TABLE orchestra (\n    orchestra_id INT PRIMARY KEY,\n    orchestra VARCHAR(255) NOT NULL,\n    conductor_id INT,\n    record_company VARCHAR(255),\n    year_of_founded INT,\n    major_record_format VARCHAR(50),\n    FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id)\n);\n\nCREATE TABLE performance (\n    performance_id INT PRIMARY KEY,\n    orchestra_id INT,\n    type VARCHAR(100),\n    date DATE,\n    official_ratings_(millions) DECIMAL(10,2),\n    weekly_rank INT,\n    share DECIMAL(5,2),\n    FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id)\n);\n\nCREATE TABLE show (\n    show_id INT PRIMARY KEY,\n    performance_id INT,\n    if_first_show BOOLEAN,\n    result VARCHAR(100),\n    attendance INT,\n    FOREIGN KEY (performance_id) REFERENCES performance(performance_id)\n);\n</sql>", "idx": 822}
{"instruction": "orchestra contains tables such as conductor, orchestra, performance, show. Table conductor has columns such as conductor_id, name, age, nationality, year_of_work. conductor_id is the primary key. The nationality contains values such as USA. Table orchestra has columns such as orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format. orchestra_id is the primary key. Table performance has columns such as performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share. performance_id is the primary key. Table show has columns such as show_id, performance_id, if_first_show, result, attendance.  is the primary key. The conductor_id of orchestra is the foreign key of conductor_id of conductor. The orchestra_id of performance is the foreign key of orchestra_id of orchestra. The performance_id of show is the foreign key of performance_id of performance.", "input": "What are the names of conductors whose nationalities are not \"USA\"?", "output": "select name from conductor where nationality != 'USA'", "table_creating": "<sql>\nCREATE TABLE conductor (\n    conductor_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    nationality VARCHAR(100),\n    year_of_work INT\n);\n\nCREATE TABLE orchestra (\n    orchestra_id INT PRIMARY KEY,\n    orchestra VARCHAR(255),\n    conductor_id INT,\n    record_company VARCHAR(255),\n    year_of_founded INT,\n    major_record_format VARCHAR(50),\n    FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id)\n);\n\nCREATE TABLE performance (\n    performance_id INT PRIMARY KEY,\n    orchestra_id INT,\n    type VARCHAR(100),\n    date DATE,\n    official_ratings_(millions) DECIMAL(10,2),\n    weekly_rank INT,\n    share DECIMAL(5,2),\n    FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id)\n);\n\nCREATE TABLE show (\n    show_id INT PRIMARY KEY,\n    performance_id INT,\n    if_first_show BOOLEAN,\n    result VARCHAR(100),\n    attendance INT,\n    FOREIGN KEY (performance_id) REFERENCES performance(performance_id)\n);\n</sql>", "idx": 826}
{"instruction": "orchestra contains tables such as conductor, orchestra, performance, show. Table conductor has columns such as conductor_id, name, age, nationality, year_of_work. conductor_id is the primary key. Table orchestra has columns such as orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format. orchestra_id is the primary key. Table performance has columns such as performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share. performance_id is the primary key. The type contains values such as Live final. Table show has columns such as show_id, performance_id, if_first_show, result, attendance.  is the primary key. The conductor_id of orchestra is the foreign key of conductor_id of conductor. The orchestra_id of performance is the foreign key of orchestra_id of orchestra. The performance_id of show is the foreign key of performance_id of performance.", "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "output": "select max(share), min(share) from performance where type != \"Live final\"", "table_creating": "<sql>\nCREATE TABLE conductor (\n    conductor_id INT PRIMARY KEY,\n    name VARCHAR(255),\n    age INT,\n    nationality VARCHAR(100),\n    year_of_work INT\n);\n\nCREATE TABLE orchestra (\n    orchestra_id INT PRIMARY KEY,\n    orchestra VARCHAR(255),\n    conductor_id INT,\n    record_company VARCHAR(255),\n    year_of_founded INT,\n    major_record_format VARCHAR(50),\n    FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id)\n);\n\nCREATE TABLE performance (\n    performance_id INT PRIMARY KEY,\n    orchestra_id INT,\n    type VARCHAR(100),\n    date DATE,\n    official_ratings_(millions) DECIMAL(10,2),\n    weekly_rank INT,\n    share DECIMAL(5,2),\n    FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id)\n);\n\nCREATE TABLE show (\n    show_id INT PRIMARY KEY,\n    performance_id INT,\n    if_first_show BOOLEAN,\n    result VARCHAR(100),\n    attendance INT,\n    FOREIGN KEY (performance_id) REFERENCES performance(performance_id)\n);\n</sql>", "idx": 832}
{"instruction": "orchestra contains tables such as conductor, orchestra, performance, show. Table conductor has columns such as conductor_id, name, age, nationality, year_of_work. conductor_id is the primary key. Table orchestra has columns such as orchestra_id, orchestra, conductor_id, record_company, year_of_founded, major_record_format. orchestra_id is the primary key. The major_record_format contains values such as DVD, CD. Table performance has columns such as performance_id, orchestra_id, type, date, official_ratings_(millions), weekly_rank, share. performance_id is the primary key. Table show has columns such as show_id, performance_id, if_first_show, result, attendance.  is the primary key. The conductor_id of orchestra is the foreign key of conductor_id of conductor. The orchestra_id of performance is the foreign key of orchestra_id of orchestra. The performance_id of show is the foreign key of performance_id of performance.", "input": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "output": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"", "table_creating": "<sql>\nCREATE TABLE conductor (\n    conductor_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    age INT,\n    nationality VARCHAR(100),\n    year_of_work INT\n);\n\nCREATE TABLE orchestra (\n    orchestra_id INT PRIMARY KEY,\n    orchestra VARCHAR(255) NOT NULL,\n    conductor_id INT,\n    record_company VARCHAR(255),\n    year_of_founded INT,\n    major_record_format VARCHAR(10) CHECK (major_record_format IN ('DVD', 'CD')),\n    FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id)\n);\n\nCREATE TABLE performance (\n    performance_id INT PRIMARY KEY,\n    orchestra_id INT,\n    type VARCHAR(100),\n    date DATE,\n    official_ratings_(millions) DECIMAL(5,2),\n    weekly_rank INT,\n    share DECIMAL(5,2),\n    FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id)\n);\n\nCREATE TABLE show (\n    show_id INT PRIMARY KEY,\n    performance_id INT,\n    if_first_show BOOLEAN,\n    result VARCHAR(100),\n    attendance INT,\n    FOREIGN KEY (performance_id) REFERENCES performance(performance_id)\n);\n</sql>", "idx": 858}
{"instruction": "network_1 contains tables such as highschooler, friend, likes. Table highschooler has columns such as id, name, grade. id is the primary key. Table friend has columns such as student_id, friend_id. student_id is the primary key. Table likes has columns such as student_id, liked_id. student_id is the primary key. The friend_id of friend is the foreign key of id of highschooler. The student_id of friend is the foreign key of id of highschooler. The student_id of likes is the foreign key of id of highschooler. The liked_id of likes is the foreign key of id of highschooler.", "input": "How many high schoolers are there?", "output": "select count(*) from highschooler", "table_creating": "<sql>\nCREATE TABLE highschooler (\n    id     INTEGER PRIMARY KEY,\n    name   VARCHAR(100) NOT NULL,\n    grade  INTEGER      CHECK (grade BETWEEN 9 AND 12)\n);\n\nCREATE TABLE friend (\n    student_id INTEGER,\n    friend_id  INTEGER,\n    PRIMARY KEY (student_id, friend_id),\n    FOREIGN KEY (student_id) REFERENCES highschooler(id),\n    FOREIGN KEY (friend_id)  REFERENCES highschooler(id)\n);\n\nCREATE TABLE likes (\n    student_id INTEGER,\n    liked_id   INTEGER,\n    PRIMARY KEY (student_id, liked_id),\n    FOREIGN KEY (student_id) REFERENCES highschooler(id),\n    FOREIGN KEY (liked_id)   REFERENCES highschooler(id)\n);\n</sql>", "idx": 862}
{"instruction": "network_1 contains tables such as highschooler, friend, likes. Table highschooler has columns such as id, name, grade. id is the primary key. The name contains values such as Kyle. Table friend has columns such as student_id, friend_id. student_id is the primary key. Table likes has columns such as student_id, liked_id. student_id is the primary key. The friend_id of friend is the foreign key of id of highschooler. The student_id of friend is the foreign key of id of highschooler. The student_id of likes is the foreign key of id of highschooler. The liked_id of likes is the foreign key of id of highschooler.", "input": "What grade is Kyle in?", "output": "select grade from highschooler where name = \"Kyle\"", "table_creating": "<sql>\nCREATE TABLE highschooler (\n    id   INTEGER PRIMARY KEY,\n    name TEXT,\n    grade INTEGER\n);\n\nCREATE TABLE friend (\n    student_id INTEGER,\n    friend_id  INTEGER,\n    PRIMARY KEY (student_id, friend_id),\n    FOREIGN KEY (student_id) REFERENCES highschooler(id),\n    FOREIGN KEY (friend_id)  REFERENCES highschooler(id)\n);\n\nCREATE TABLE likes (\n    student_id INTEGER,\n    liked_id   INTEGER,\n    PRIMARY KEY (student_id, liked_id),\n    FOREIGN KEY (student_id) REFERENCES highschooler(id),\n    FOREIGN KEY (liked_id)   REFERENCES highschooler(id)\n);\n</sql>", "idx": 868}
{"instruction": "dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id of professionals. The treatment_type_code of treatments is the foreign key of treatment_type_code of treatment_types.", "input": "Which states have both owners and professionals living there?", "output": "select state from owners intersect select state from professionals", "table_creating": "<sql>\nCREATE TABLE breeds (\n    breed_code VARCHAR(10) PRIMARY KEY,\n    breed_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE charges (\n    charge_id INT PRIMARY KEY,\n    charge_type VARCHAR(50) NOT NULL,\n    charge_amount DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE sizes (\n    size_code VARCHAR(10) PRIMARY KEY,\n    size_description VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE treatment_types (\n    treatment_type_code VARCHAR(10) PRIMARY KEY,\n    treatment_type_description VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE owners (\n    owner_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(2),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE dogs (\n    dog_id INT PRIMARY KEY,\n    owner_id INT NOT NULL,\n    abandoned_yn CHAR(1) CHECK (abandoned_yn IN ('Y','N')),\n    breed_code VARCHAR(10) NOT NULL,\n    size_code VARCHAR(10) NOT NULL,\n    name VARCHAR(50) NOT NULL,\n    age INT,\n    date_of_birth DATE,\n    gender CHAR(1),\n    weight DECIMAL(5,2),\n    date_arrived DATE NOT NULL,\n    date_adopted DATE,\n    date_departed DATE,\n    CONSTRAINT fk_dogs_owner FOREIGN KEY (owner_id) REFERENCES owners(owner_id),\n    CONSTRAINT fk_dogs_breed FOREIGN KEY (breed_code) REFERENCES breeds(breed_code),\n    CONSTRAINT fk_dogs_size FOREIGN KEY (size_code) REFERENCES sizes(size_code)\n);\n\nCREATE TABLE professionals (\n    professional_id INT PRIMARY KEY,\n    role_code VARCHAR(10) NOT NULL,\n    first_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(2),\n    zip_code VARCHAR(10),\n    last_name VARCHAR(50) NOT NULL,\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE treatments (\n    treatment_id INT PRIMARY KEY,\n    dog_id INT NOT NULL,\n    professional_id INT NOT NULL,\n    treatment_type_code VARCHAR(10) NOT NULL,\n    date_of_treatment DATE NOT NULL,\n    cost_of_treatment DECIMAL(10,2) NOT NULL,\n    CONSTRAINT fk_treatments_dog FOREIGN KEY (dog_id) REFERENCES dogs(dog_id),\n    CONSTRAINT fk_treatments_professional FOREIGN KEY (professional_id) REFERENCES professionals(professional_id),\n    CONSTRAINT fk_treatments_treatment_type FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code)\n);\n</sql>", "idx": 918}
{"instruction": "dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains values such as Indiana. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains values such as Indiana. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id of professionals. The treatment_type_code of treatments is the foreign key of treatment_type_code of treatment_types.", "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "output": "select professional_id, last_name, cell_number from professionals where state = 'Indiana' union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2", "table_creating": "<sql>\nCREATE TABLE breeds (\n    breed_code VARCHAR(10) PRIMARY KEY,\n    breed_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE charges (\n    charge_id INT PRIMARY KEY,\n    charge_type VARCHAR(50) NOT NULL,\n    charge_amount DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE sizes (\n    size_code VARCHAR(10) PRIMARY KEY,\n    size_description VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE treatment_types (\n    treatment_type_code VARCHAR(10) PRIMARY KEY,\n    treatment_type_description VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE owners (\n    owner_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE professionals (\n    professional_id INT PRIMARY KEY,\n    role_code VARCHAR(10),\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE dogs (\n    dog_id INT PRIMARY KEY,\n    owner_id INT NOT NULL,\n    abandoned_yn CHAR(1) CHECK (abandoned_yn IN ('Y','N')),\n    breed_code VARCHAR(10),\n    size_code VARCHAR(10),\n    name VARCHAR(50) NOT NULL,\n    age INT,\n    date_of_birth DATE,\n    gender CHAR(1),\n    weight DECIMAL(5,2),\n    date_arrived DATE,\n    date_adopted DATE,\n    date_departed DATE,\n    FOREIGN KEY (owner_id) REFERENCES owners(owner_id),\n    FOREIGN KEY (breed_code) REFERENCES breeds(breed_code),\n    FOREIGN KEY (size_code) REFERENCES sizes(size_code)\n);\n\nCREATE TABLE treatments (\n    treatment_id INT PRIMARY KEY,\n    dog_id INT NOT NULL,\n    professional_id INT NOT NULL,\n    treatment_type_code VARCHAR(10) NOT NULL,\n    date_of_treatment DATE NOT NULL,\n    cost_of_treatment DECIMAL(10,2),\n    FOREIGN KEY (dog_id) REFERENCES dogs(dog_id),\n    FOREIGN KEY (professional_id) REFERENCES professionals(professional_id),\n    FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code)\n);\n</sql>", "idx": 922}
{"instruction": "dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains values such as Virginia. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id of professionals. The treatment_type_code of treatments is the foreign key of treatment_type_code of treatment_types.", "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "output": "select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = 'Virginia'", "table_creating": "<sql>\nCREATE TABLE breeds (\n    breed_code VARCHAR(10) PRIMARY KEY,\n    breed_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE charges (\n    charge_id INT PRIMARY KEY,\n    charge_type VARCHAR(50) NOT NULL,\n    charge_amount DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE sizes (\n    size_code VARCHAR(10) PRIMARY KEY,\n    size_description VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE treatment_types (\n    treatment_type_code VARCHAR(10) PRIMARY KEY,\n    treatment_type_description VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE owners (\n    owner_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE professionals (\n    professional_id INT PRIMARY KEY,\n    role_code VARCHAR(10),\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE dogs (\n    dog_id INT PRIMARY KEY,\n    owner_id INT NOT NULL,\n    abandoned_yn CHAR(1) CHECK (abandoned_yn IN ('Y','N')),\n    breed_code VARCHAR(10),\n    size_code VARCHAR(10),\n    name VARCHAR(50) NOT NULL,\n    age INT,\n    date_of_birth DATE,\n    gender CHAR(1),\n    weight DECIMAL(5,2),\n    date_arrived DATE,\n    date_adopted DATE,\n    date_departed DATE,\n    FOREIGN KEY (owner_id) REFERENCES owners(owner_id),\n    FOREIGN KEY (breed_code) REFERENCES breeds(breed_code),\n    FOREIGN KEY (size_code) REFERENCES sizes(size_code)\n);\n\nCREATE TABLE treatments (\n    treatment_id INT PRIMARY KEY,\n    dog_id INT NOT NULL,\n    professional_id INT NOT NULL,\n    treatment_type_code VARCHAR(10) NOT NULL,\n    date_of_treatment DATE NOT NULL,\n    cost_of_treatment DECIMAL(10,2),\n    FOREIGN KEY (dog_id) REFERENCES dogs(dog_id),\n    FOREIGN KEY (professional_id) REFERENCES professionals(professional_id),\n    FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code)\n);\n</sql>", "idx": 956}
{"instruction": "dog_kennels contains tables such as breeds, charges, sizes, treatment_types, owners, dogs, professionals, treatments. Table breeds has columns such as breed_code, breed_name. breed_code is the primary key. Table charges has columns such as charge_id, charge_type, charge_amount. charge_id is the primary key. Table sizes has columns such as size_code, size_description. size_code is the primary key. Table treatment_types has columns such as treatment_type_code, treatment_type_description. treatment_type_code is the primary key. Table owners has columns such as owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. owner_id is the primary key. The state contains values such as Wisconsin. Table dogs has columns such as dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. dog_id is the primary key. Table professionals has columns such as professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. professional_id is the primary key. The state contains values such as Wisconsin, Hawaii. Table treatments has columns such as treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. treatment_id is the primary key. The owner_id of dogs is the foreign key of owner_id of owners. The owner_id of dogs is the foreign key of owner_id of owners. The size_code of dogs is the foreign key of size_code of sizes. The breed_code of dogs is the foreign key of breed_code of breeds. The dog_id of treatments is the foreign key of dog_id of dogs. The professional_id of treatments is the foreign key of professional_id of professionals. The treatment_type_code of treatments is the foreign key of treatment_type_code of treatment_types.", "input": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "output": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'", "table_creating": "<sql>\nCREATE TABLE breeds (\n    breed_code VARCHAR(10) PRIMARY KEY,\n    breed_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE charges (\n    charge_id INT PRIMARY KEY,\n    charge_type VARCHAR(50) NOT NULL,\n    charge_amount DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE sizes (\n    size_code VARCHAR(10) PRIMARY KEY,\n    size_description VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE treatment_types (\n    treatment_type_code VARCHAR(10) PRIMARY KEY,\n    treatment_type_description VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE owners (\n    owner_id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE dogs (\n    dog_id INT PRIMARY KEY,\n    owner_id INT NOT NULL,\n    abandoned_yn CHAR(1) CHECK (abandoned_yn IN ('Y','N')),\n    breed_code VARCHAR(10),\n    size_code VARCHAR(10),\n    name VARCHAR(50),\n    age INT,\n    date_of_birth DATE,\n    gender CHAR(1),\n    weight DECIMAL(5,2),\n    date_arrived DATE,\n    date_adopted DATE,\n    date_departed DATE,\n    FOREIGN KEY (owner_id) REFERENCES owners(owner_id),\n    FOREIGN KEY (breed_code) REFERENCES breeds(breed_code),\n    FOREIGN KEY (size_code) REFERENCES sizes(size_code)\n);\n\nCREATE TABLE professionals (\n    professional_id INT PRIMARY KEY,\n    role_code VARCHAR(20),\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    street VARCHAR(100),\n    city VARCHAR(50),\n    state VARCHAR(50),\n    zip_code VARCHAR(10),\n    email_address VARCHAR(100),\n    home_phone VARCHAR(20),\n    cell_number VARCHAR(20)\n);\n\nCREATE TABLE treatments (\n    treatment_id INT PRIMARY KEY,\n    dog_id INT NOT NULL,\n    professional_id INT NOT NULL,\n    treatment_type_code VARCHAR(10) NOT NULL,\n    date_of_treatment DATE,\n    cost_of_treatment DECIMAL(10,2),\n    FOREIGN KEY (dog_id) REFERENCES dogs(dog_id),\n    FOREIGN KEY (professional_id) REFERENCES professionals(professional_id),\n    FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code)\n);\n</sql>", "idx": 962}
{"instruction": "singer contains tables such as singer, song. Table singer has columns such as singer_id, name, birth_year, net_worth_millions, citizenship. singer_id is the primary key. Table song has columns such as song_id, title, singer_id, sales, highest_position. song_id is the primary key. The singer_id of song is the foreign key of singer_id of singer.", "input": "How many singers are there?", "output": "select count(*) from singer", "table_creating": "<sql>\nCREATE TABLE singer (\n    singer_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    birth_year INT,\n    net_worth_millions DECIMAL(10,2),\n    citizenship VARCHAR(100)\n);\n\nCREATE TABLE song (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    singer_id INT NOT NULL,\n    sales INT,\n    highest_position INT,\n    FOREIGN KEY (singer_id) REFERENCES singer(singer_id)\n);\n</sql>", "idx": 1000}
{"instruction": "singer contains tables such as singer, song. Table singer has columns such as singer_id, name, birth_year, net_worth_millions, citizenship. singer_id is the primary key. The citizenship contains values such as France. Table song has columns such as song_id, title, singer_id, sales, highest_position. song_id is the primary key. The singer_id of song is the foreign key of singer_id of singer.", "input": "List the name of singers whose citizenship is not \"France\".", "output": "select name from singer where citizenship != \"France\"", "table_creating": "<sql>\nCREATE TABLE singer (\n    singer_id INT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    birth_year INT,\n    net_worth_millions DECIMAL(10,2),\n    citizenship VARCHAR(100)\n);\n\nCREATE TABLE song (\n    song_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    singer_id INT,\n    sales INT,\n    highest_position INT,\n    FOREIGN KEY (singer_id) REFERENCES singer(singer_id)\n);\n</sql>", "idx": 1006}
{"instruction": "real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign key of feature_id of other_available_features.", "input": "How many available features are there in total?", "output": "select count(*) from other_available_features", "table_creating": "<sql>\nCREATE TABLE ref_feature_types (\n    feature_type_code VARCHAR(10) PRIMARY KEY,\n    feature_type_name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE ref_property_types (\n    property_type_code VARCHAR(10) PRIMARY KEY,\n    property_type_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE other_available_features (\n    feature_id INT PRIMARY KEY,\n    feature_type_code VARCHAR(10) NOT NULL,\n    feature_name VARCHAR(100) NOT NULL,\n    feature_description VARCHAR(255),\n    CONSTRAINT fk_feature_type\n        FOREIGN KEY (feature_type_code)\n        REFERENCES ref_feature_types(feature_type_code)\n);\n\nCREATE TABLE properties (\n    property_id INT PRIMARY KEY,\n    property_type_code VARCHAR(10) NOT NULL,\n    date_on_market DATE,\n    date_sold DATE,\n    property_name VARCHAR(255),\n    property_address VARCHAR(255),\n    room_count INT,\n    vendor_requested_price DECIMAL(15,2),\n    buyer_offered_price DECIMAL(15,2),\n    agreed_selling_price DECIMAL(15,2),\n    apt_feature_1 VARCHAR(255),\n    apt_feature_2 VARCHAR(255),\n    apt_feature_3 VARCHAR(255),\n    fld_feature_1 VARCHAR(255),\n    fld_feature_2 VARCHAR(255),\n    fld_feature_3 VARCHAR(255),\n    hse_feature_1 VARCHAR(255),\n    hse_feature_2 VARCHAR(255),\n    hse_feature_3 VARCHAR(255),\n    oth_feature_1 VARCHAR(255),\n    oth_feature_2 VARCHAR(255),\n    oth_feature_3 VARCHAR(255),\n    shp_feature_1 VARCHAR(255),\n    shp_feature_2 VARCHAR(255),\n    shp_feature_3 VARCHAR(255),\n    other_property_details TEXT,\n    CONSTRAINT fk_property_type\n        FOREIGN KEY (property_type_code)\n        REFERENCES ref_property_types(property_type_code)\n);\n\nCREATE TABLE other_property_features (\n    property_id INT NOT NULL,\n    feature_id INT NOT NULL,\n    property_feature_description VARCHAR(255),\n    PRIMARY KEY (property_id, feature_id),\n    CONSTRAINT fk_opf_property\n        FOREIGN KEY (property_id)\n        REFERENCES properties(property_id),\n    CONSTRAINT fk_opf_feature\n        FOREIGN KEY (feature_id)\n        REFERENCES other_available_features(feature_id)\n);\n</sql>", "idx": 1030}
{"instruction": "real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. The feature_name contains values such as AirCon. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign key of feature_id of other_available_features.", "input": "What is the feature type name of feature AirCon?", "output": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code = t2.feature_type_code where t1.feature_name = \"AirCon\"", "table_creating": "<sql>\n-- Reference table for feature types\nCREATE TABLE ref_feature_types (\n    feature_type_code VARCHAR(10) PRIMARY KEY,\n    feature_type_name VARCHAR(100) NOT NULL\n);\n\n-- Reference table for property types\nCREATE TABLE ref_property_types (\n    property_type_code VARCHAR(10) PRIMARY KEY,\n    property_type_description VARCHAR(255) NOT NULL\n);\n\n-- Table for available features\nCREATE TABLE other_available_features (\n    feature_id INT PRIMARY KEY,\n    feature_type_code VARCHAR(10) NOT NULL,\n    feature_name VARCHAR(100) NOT NULL,\n    feature_description VARCHAR(255),\n    CONSTRAINT fk_feature_type_code\n        FOREIGN KEY (feature_type_code)\n        REFERENCES ref_feature_types(feature_type_code)\n);\n\n-- Main properties table\nCREATE TABLE properties (\n    property_id INT PRIMARY KEY,\n    property_type_code VARCHAR(10) NOT NULL,\n    date_on_market DATE,\n    date_sold DATE,\n    property_name VARCHAR(255),\n    property_address VARCHAR(255),\n    room_count INT,\n    vendor_requested_price DECIMAL(15,2),\n    buyer_offered_price DECIMAL(15,2),\n    agreed_selling_price DECIMAL(15,2),\n    apt_feature_1 VARCHAR(100),\n    apt_feature_2 VARCHAR(100),\n    apt_feature_3 VARCHAR(100),\n    fld_feature_1 VARCHAR(100),\n    fld_feature_2 VARCHAR(100),\n    fld_feature_3 VARCHAR(100),\n    hse_feature_1 VARCHAR(100),\n    hse_feature_2 VARCHAR(100),\n    hse_feature_3 VARCHAR(100),\n    oth_feature_1 VARCHAR(100),\n    oth_feature_2 VARCHAR(100),\n    oth_feature_3 VARCHAR(100),\n    shp_feature_1 VARCHAR(100),\n    shp_feature_2 VARCHAR(100),\n    shp_feature_3 VARCHAR(100),\n    other_property_details TEXT,\n    CONSTRAINT fk_property_type_code\n        FOREIGN KEY (property_type_code)\n        REFERENCES ref_property_types(property_type_code)\n);\n\n-- Junction table for additional property features\nCREATE TABLE other_property_features (\n    property_id INT NOT NULL,\n    feature_id INT NOT NULL,\n    property_feature_description VARCHAR(255),\n    PRIMARY KEY (property_id, feature_id),\n    CONSTRAINT fk_opf_property_id\n        FOREIGN KEY (property_id)\n        REFERENCES properties(property_id),\n    CONSTRAINT fk_opf_feature_id\n        FOREIGN KEY (feature_id)\n        REFERENCES other_available_features(feature_id)\n);\n</sql>", "idx": 1031}
{"instruction": "real_estate_properties contains tables such as ref_feature_types, ref_property_types, other_available_features, properties, other_property_features. Table ref_feature_types has columns such as feature_type_code, feature_type_name. feature_type_code is the primary key. Table ref_property_types has columns such as property_type_code, property_type_description. property_type_code is the primary key. The property_type_code contains values such as Apartment, House. Table other_available_features has columns such as feature_id, feature_type_code, feature_name, feature_description. feature_id is the primary key. Table properties has columns such as property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details. property_id is the primary key. The property_type_code contains values such as Apartment, House. Table other_property_features has columns such as property_id, feature_id, property_feature_description.  is the primary key. The feature_type_code of other_available_features is the foreign key of feature_type_code of ref_feature_types. The property_type_code of properties is the foreign key of property_type_code of ref_property_types. The property_id of other_property_features is the foreign key of property_id of properties. The feature_id of other_property_features is the foreign key of feature_id of other_available_features.", "input": "What are the names of properties that are either houses or apartments with more than 1 room?", "output": "select property_name from properties where property_type_code = \"House\" union select property_name from properties where property_type_code = \"Apartment\" and room_count > 1", "table_creating": "<sql>\n-- Reference table for feature types\nCREATE TABLE ref_feature_types (\n    feature_type_code VARCHAR(20) PRIMARY KEY,\n    feature_type_name VARCHAR(100) NOT NULL\n);\n\n-- Reference table for property types\nCREATE TABLE ref_property_types (\n    property_type_code VARCHAR(20) PRIMARY KEY,\n    property_type_description VARCHAR(100) NOT NULL\n);\n\n-- Table for available features\nCREATE TABLE other_available_features (\n    feature_id INT PRIMARY KEY,\n    feature_type_code VARCHAR(20) NOT NULL,\n    feature_name VARCHAR(100) NOT NULL,\n    feature_description TEXT,\n    FOREIGN KEY (feature_type_code) REFERENCES ref_feature_types(feature_type_code)\n);\n\n-- Table for properties\nCREATE TABLE properties (\n    property_id INT PRIMARY KEY,\n    property_type_code VARCHAR(20) NOT NULL,\n    date_on_market DATE,\n    date_sold DATE,\n    property_name VARCHAR(100),\n    property_address VARCHAR(255),\n    room_count INT,\n    vendor_requested_price DECIMAL(15,2),\n    buyer_offered_price DECIMAL(15,2),\n    agreed_selling_price DECIMAL(15,2),\n    apt_feature_1 VARCHAR(100),\n    apt_feature_2 VARCHAR(100),\n    apt_feature_3 VARCHAR(100),\n    fld_feature_1 VARCHAR(100),\n    fld_feature_2 VARCHAR(100),\n    fld_feature_3 VARCHAR(100),\n    hse_feature_1 VARCHAR(100),\n    hse_feature_2 VARCHAR(100),\n    hse_feature_3 VARCHAR(100),\n    oth_feature_1 VARCHAR(100),\n    oth_feature_2 VARCHAR(100),\n    oth_feature_3 VARCHAR(100),\n    shp_feature_1 VARCHAR(100),\n    shp_feature_2 VARCHAR(100),\n    shp_feature_3 VARCHAR(100),\n    other_property_details TEXT,\n    FOREIGN KEY (property_type_code) REFERENCES ref_property_types(property_type_code)\n);\n\n-- Junction table for additional property features\nCREATE TABLE other_property_features (\n    property_id INT NOT NULL,\n    feature_id INT NOT NULL,\n    property_feature_description TEXT,\n    PRIMARY KEY (property_id, feature_id),\n    FOREIGN KEY (property_id) REFERENCES properties(property_id),\n    FOREIGN KEY (feature_id) REFERENCES other_available_features(feature_id)\n);\n</sql>", "idx": 1033}
