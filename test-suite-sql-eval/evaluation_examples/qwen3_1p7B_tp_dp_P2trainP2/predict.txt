SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age DESC;

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT t1.song_name, t1.song_release_year FROM singer AS t1 INNER JOIN singer_in_concert AS t2 ON t1.singer_id = t2.singer_id ORDER BY t1.age LIMIT 1;

SELECT T1.song_name, T1.song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id ORDER BY T1.age LIMIT 1;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT country, COUNT(*) FROM singer GROUP BY country;

SELECT s.country, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.country;

SELECT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT AVG(capacity), MAX(capacity) FROM stadium;

SELECT name, capacity FROM stadium WHERE AVG(highest - lowest) = (SELECT MAX(avg_diff) FROM (SELECT (highest - lowest) AS avg_diff FROM stadium) AS subquery);

SELECT name, capacity FROM stadium WHERE AVG(highest - lowest) = (SELECT MAX(avg_attendance) FROM (SELECT (highest + lowest)/2 AS avg_attendance FROM stadium GROUP BY stadium_id) AS subquery);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT s.name AS stadium_name, COUNT(c.concert_id) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;

SELECT s.name AS stadium_name, COUNT(c.concert_id) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;

SELECT s.name, s.capacity FROM stadium s INNER JOIN ( SELECT stadium_id, COUNT(*) AS num_concerts FROM concert WHERE year >= 2014 GROUP BY stadium_id ORDER BY num_concerts DESC LIMIT 1 ) t ON s.stadium_id = t.stadium_id;

SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.stadium_id IS NULL;

SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.stadium_id IS NULL;

SELECT DISTINCT country FROM singer WHERE age > 40 INTERSECT SELECT DISTINCT country FROM singer WHERE age < 30;

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);

SELECT s.name FROM stadium s LEFT JOIN ( SELECT stadium_id FROM concert WHERE year = 2014 GROUP BY stadium_id ) c ON s.stadium_id = c.stadium_id WHERE c.stadium_id IS NULL;

SELECT c.concert_name, c.theme, COUNT(sc.singer_id) AS num_singers FROM concert c LEFT JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name;

SELECT c.concert_name, c.theme, COUNT(sc.singer_id) FROM concert c JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name, c.theme;

SELECT s.name AS singer_name, COUNT(c.concert_id) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name;

SELECT s.name AS singer_name, COUNT(c.concert_id) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name;

SELECT DISTINCT T3.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = 2014;

SELECT DISTINCT T3.name FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T1.singer_id = T3.singer_id WHERE T2.year = 2014;

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T2.concert_id IN ( SELECT concert_id FROM concert WHERE theme LIKE '%Stadium%' );

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.song_name LIKE '% Hey%' GROUP BY T1.name;

SELECT s.name, s.location FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN (2014, 2015) GROUP BY s.stadium_id HAVING COUNT(DISTINCT c.year) = 2;

SELECT s.location, s.name FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN (2014, 2015) GROUP BY s.stadium_id HAVING COUNT(DISTINCT c.year) = 2;

SELECT COUNT(*) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 );

SELECT COUNT(*) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 );

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT MIN(weight) FROM pets WHERE pettype = 'dog' AND pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT pettype, MAX(weight) as max_weight FROM pets GROUP BY pettype;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20;

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20;

SELECT COUNT(*) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid INNER JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.sex = 'F' AND T1.pettype = 'dog';

SELECT COUNT(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.sex = 'F';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype IN ('cat', 'dog');

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype IN ('cat', 'dog');

SELECT DISTINCT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog') GROUP BY T1.stuid HAVING COUNT(DISTINCT T3.pettype) = 2;

SELECT DISTINCT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog') GROUP BY T1.stuid HAVING COUNT(DISTINCT T3.pettype) = 2;

SELECT T1.major, T1.age FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid IS NULL;

SELECT T1.major, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid LEFT OUTER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype != 'Cat';

SELECT stuid FROM has_pet WHERE petid NOT IN ( SELECT petid FROM pets WHERE pettype = 'Cat' );

SELECT stuid FROM has_pet WHERE NOT EXISTS ( SELECT petid FROM pets WHERE pettype = 'Cat' );

SELECT DISTINCT T1.fname, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid IN ( SELECT petid FROM pets WHERE pettype = 'dog' ) AND NOT EXISTS ( SELECT petid FROM pets WHERE pettype = 'cat' );

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype != 'cat' AND T2.pettype = 'dog';

SELECT pettype, weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT pettype, weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT p.pettype, AVG(p.pet_age) AS avg_age, MAX(p.pet_age) AS max_age FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.pet_age) AS avg_age, MAX(p.pet_age) AS max_age FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.weight) FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.weight) FROM pets p GROUP BY p.pettype;

SELECT T1.fname, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid;

SELECT DISTINCT T1.fname, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid;

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT COUNT(DISTINCT sp.petid), s.stuid FROM has_pet sp JOIN student s ON sp.stuid = s.stuid GROUP BY s.stuid;

SELECT sp.stuid, COUNT(sp.petid) FROM has_pet sp GROUP BY sp.stuid;

SELECT DISTINCT T1.fname, T1.sex FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1;

SELECT DISTINCT T1.fname, T1.sex FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(T2.petid) > 1;

SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat' AND T3.pet_age = 3;

SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat' AND T3.pet_age = 3;

SELECT AVG(age) FROM student WHERE NOT stuid IN ( SELECT T1.stuid FROM has_pet AS T1 );

SELECT AVG(age) FROM student WHERE NOT stuid IN ( SELECT T1.stuid FROM has_pet AS T1 );

SELECT COUNT(continent) FROM continents;

SELECT COUNT(contid) FROM continents;

SELECT c.continent, c.contid, COUNT(DISTINCT co.countryid) FROM continents c LEFT JOIN countries co ON c.contid = co.continent GROUP BY c.continent;

SELECT continent AS name, contid, COUNT(DISTINCT countryid) FROM countries GROUP BY contid;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT T1.fullname, T2.id, COUNT(*) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T2.maker;

SELECT DISTINCT T1.id, T1.fullname, COUNT(T3.model) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN model_list AS T3 ON T1.id = T3.maker GROUP BY T1.id;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.horsepower ASC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.horsepower ASC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.weight < ( SELECT AVG(weight) FROM cars_data );

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.weight < (SELECT AVG(weight) FROM cars_data);

SELECT DISTINCT T3.make FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.model = T2.model INNER JOIN car_makers AS T3 ON T2.maker = T3.id WHERE T1.year = 1970;

SELECT DISTINCT T3.make FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.model = T2.model INNER JOIN car_names AS T3 ON T2.model = T3.model WHERE T1.year = 1970;

SELECT T3.make, MIN(T2.year) FROM model_list AS T1 JOIN car_names AS T2 ON T1.model = T2.model JOIN car_makers AS T3 ON T1.maker = T3.id GROUP BY T3.make;

SELECT T.make, T.year FROM ( SELECT DISTINCT T3.make, MIN(T3.year) AS year FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.model = T2.model INNER JOIN car_makers AS T3 ON T2.maker = T3.id GROUP BY T3.make ) t;

SELECT DISTINCT T1.model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model WHERE T1.maker IS NOT NULL AND T1.model != '' AND T1.year > 1980;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.country = 3 AND T2.year > 1980;

SELECT c.continent, COUNT(cm.id) FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.continent;

SELECT c.continent, COUNT(DISTINCT m.id) FROM car_makers m JOIN countries c ON m.country = c.countryid GROUP BY c.continent;

SELECT T1.countryname FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country GROUP BY T1.countryid ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid GROUP BY T2.country ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*), T1.fullname FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.fullname;

SELECT T3.make, COUNT(T2.model), T1.id, T1.fullname FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker INNER JOIN car_names AS T3 ON T2.model = T3.model GROUP BY T3.make;

SELECT T1.accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'AMC Hornet Sportabout (SW)' AND T1.year BETWEEN 1970 AND 1979;

SELECT T1.accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'AMC Hornet Sportabout (SW)' AND T1.year BETWEEN 1970 AND 1979;

SELECT COUNT(*) FROM car_makers WHERE country = ( SELECT countryid FROM countries WHERE countryname = 'France' );

SELECT COUNT(DISTINCT T3.id) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country JOIN car_names AS T3 ON T2.id = T3.makeid WHERE T1.continent = 'Europe' AND T1.countryname = 'France';

SELECT COUNT(*) FROM model_list WHERE maker = ( SELECT DISTINCT m.country FROM car_makers m WHERE m.country = 1 );

SELECT COUNT(*) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id WHERE T2.country = ( SELECT countryid FROM countries WHERE countryname = 'United States' );

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT DISTINCT T3.make, T2.model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker JOIN car_names AS T3 ON T2.model = T3.model;

SELECT DISTINCT T1.make, T2.model FROM car_names AS T1 JOIN model_list AS T2 ON T1.model = T2.model;

SELECT DISTINCT T2.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid;

SELECT DISTINCT T2.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT year, AVG(weight) FROM cars_data GROUP BY year;

SELECT year, AVG(weight), AVG(horsepower) FROM cars_data GROUP BY year;

SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryid HAVING COUNT(DISTINCT cm.id) >= 3;

SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = 'Europe' GROUP BY c.countryname HAVING COUNT(DISTINCT cm.id) >= 3;

SELECT MAX(T1.horsepower), T2.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.cylinders = 3 GROUP BY T2.make;

SELECT T1.make, MAX(T1.horsepower) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 3 GROUP BY T1.make;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.mpg DESC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(T1.edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.model = 'volvo';

SELECT AVG(T1.edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'Volvo';

SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;

SELECT MAX(a.cylinders), MAX(a.accelerate) FROM car_data a;

SELECT T1.model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model GROUP BY T1.model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT model FROM model_list GROUP BY model ORDER BY COUNT(maker) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.fullname = 'American Motor Company';

SELECT COUNT(*) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id WHERE T2.fullname = 'American Motor Company';

SELECT T1.fullname, T1.id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING COUNT(T2.model) > 3;

SELECT DISTINCT T1.makeid, T2.make FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id GROUP BY T2.id HAVING COUNT(T2.model) > 3;

SELECT DISTINCT T1.model FROM model_list AS T1 JOIN car_names AS T2 ON T1.model = T2.model WHERE T2.make = 'General Motors' OR T2.weight > 3500;

SELECT DISTINCT T1.model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model WHERE T2.make IN ('General Motors', 'chevrolet') OR T2.weight > 3500;

SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.weight BETWEEN 3000 AND 4000;

SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid WHERE T2.continent = 'Europe' AND T1.weight < 4000 OR T1.weight > 3000;

SELECT T1.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid ORDER BY T1.accelerate DESC LIMIT 1;

SELECT T1.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid ORDER BY T1.accelerate DESC LIMIT 1;

SELECT T1.cylinders FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T1.model = 'volvo' ORDER BY T2.accelerate LIMIT 1;

SELECT T1.cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'volvo' ORDER BY T1.accelerate LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(DISTINCT c.countryname) FROM ( SELECT COUNT(*) AS cnt FROM car_makers GROUP BY country HAVING cnt > 2 ) c;

SELECT COUNT(DISTINCT c.countryid) FROM ( SELECT COUNT(*) AS cnt FROM car_makers GROUP BY maker HAVING cnt > 2 ) c;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT T1.model FROM model_list AS T1 JOIN car_names AS T2 ON T1.model = T2.model WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;

SELECT DISTINCT makeid, make FROM car_names WHERE model IN ( SELECT model FROM model_list WHERE maker IN ( SELECT maker FROM car_makers WHERE country = ( SELECT country FROM countries ORDER BY RANDOM() LIMIT 1 ) ) ) AND hp < ( SELECT MAX(horsepower) FROM cars_data ) AND cylinders <= 3;

SELECT DISTINCT makeid, make FROM car_names WHERE model IN ( SELECT model FROM model_list ) AND ( SELECT cylinders FROM cars_data WHERE id = ( SELECT id FROM car_names WHERE makeid = t.makeid ) ) < 4 OR ( SELECT cylinders FROM cars_data WHERE id = ( SELECT id FROM car_names WHERE makeid = t.makeid ) ) IS NULL;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT DISTINCT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.weight < 3500 AND T2.maker != 'Ford Motor Company';

SELECT DISTINCT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id WHERE T2.weight < 3500 AND T1.make != 'Ford';

SELECT c.countryname FROM countries c WHERE c.continent NOT IN ( SELECT T.continent FROM ( SELECT DISTINCT continent FROM car_makers ) T );

SELECT c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country WHERE cm.id IS NULL;

SELECT DISTINCT T.id, T.maker FROM ( SELECT COUNT(T2.model) AS num FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id ) AS T WHERE T.num >= 2 AND ( SELECT COUNT(*) FROM car_makers ) > 3;

SELECT DISTINCT T.id, T.make FROM ( SELECT T1.id, T1.make FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING COUNT(T2.model) >= 2 ) AS T WHERE ( SELECT COUNT(*) FROM cars_data WHERE id IN ( SELECT id FROM car_makers ) ) > 3;

SELECT DISTINCT T1.countryid, T1.countryname FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T2.maker > 3 OR (SELECT COUNT(*) FROM model_list WHERE model = 'fiat');

SELECT DISTINCT T1.countryid, T1.countryname FROM countries AS T1 INNER JOIN ( SELECT DISTINCT country FROM car_makers UNION SELECT model FROM model_list ) AS T2 ON T1.countryid = T2.maker;

SELECT country FROM airlines WHERE airline = 'JetBlue Airways';

SELECT country FROM airlines WHERE airline = 'Jetblue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT COUNT(DISTINCT airline) FROM flights;

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(DISTINCT airportcode) FROM airports;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT city, country FROM airports WHERE airportname = 'Alton';

SELECT city, country FROM airports WHERE airportname = 'Alton';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';

SELECT airportname FROM airports WHERE city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE sourceairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE sourceairport = ( SELECT airportcode FROM airports WHERE airportname = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE destairport = ( SELECT airportcode FROM airports WHERE airportname LIKE 'Aberdeen%' );

SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' ) AND destairport = ( SELECT airportcode FROM airports WHERE city = 'Ashley' );

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY Airport';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT T2.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT t2.city FROM flights AS t1 INNER JOIN airports AS t2 ON t1.destairport = t2.airportcode GROUP BY t2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT city FROM flights GROUP BY sourceairport ORDER BY COUNT(sourceairport) DESC LIMIT 1;

SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(sourceairport) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(sourceairport) LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.abbreviation, T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T1.abbreviation ORDER BY COUNT(*) LIMIT 1;

SELECT T1.abbreviation, T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.airline GROUP BY T1.abbreviation ORDER BY COUNT(*) LIMIT 1;

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';

SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';

SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';

SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM flights WHERE destairport = 'CVO';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city IN ('APG', 'CVO') GROUP BY T1.airline HAVING COUNT(DISTINCT T2.city) = 2;

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'APG');

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'APG');

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT T1.flightno FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid WHERE T2.airline = 'United Airlines';

SELECT T1.flightno FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.abbreviation WHERE T2.airline = 'United Airlines';

SELECT T2.flightno FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport WHERE T1.airportname = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T2.airportcode = T1.destairport WHERE T2.airportname = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T2.airportcode = T1.destairport WHERE T2.airportname = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen ';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' ) OR destairport IN ( SELECT airportcode FROM airports WHERE city = 'Abilene' );

SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');

SELECT airportname FROM airports WHERE airportcode NOT IN ( SELECT DISTINCT sourceairport FROM flights ) AND airportcode NOT IN ( SELECT DISTINCT destairport FROM flights );

SELECT DISTINCT A.airportcode FROM airports A LEFT JOIN flights F ON A.airportcode = F.sourceairport OR A.airportcode = F.destairport WHERE F.flightno IS NULL;

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age ASC;

SELECT name FROM employee ORDER BY age;

SELECT e.city, COUNT(e.employee_id) AS num_employees FROM employee e GROUP BY e.city;

SELECT e.city, COUNT(e.employee_id) FROM employee e GROUP BY e.city;

SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(*) > 1;

SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(*) > 1;

SELECT s.location, COUNT(s.shop_id) FROM shop s GROUP BY s.location;

SELECT s.location, COUNT(s.shop_id) FROM shop s GROUP BY s.location;

SELECT T2.manager_name, T2.district FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id ORDER BY T1.number_products DESC LIMIT 1;

SELECT T2.manager_name, T2.district FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id ORDER BY T1.number_products DESC LIMIT 1;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT T1.name FROM shop AS T1 INNER JOIN ( SELECT AVG(number_products) as avg_num_products FROM shop ) AS T2 ON 1=1 WHERE T1.number_products > T2.avg_num_products;

SELECT DISTINCT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);

SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee AS e JOIN hiring AS h ON e.employee_id = h.employee_id JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id WHERE ev.bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;

SELECT e.name FROM employee e LEFT JOIN evaluation el ON e.employee_id = el.employee_id WHERE el.year_awarded IS NULL;

SELECT e.name FROM employee e LEFT JOIN evaluation AS ev ON e.employee_id = ev.employee_id WHERE ev.employee_id IS NULL;

SELECT T1.name FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);

SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);

SELECT s.name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id WHERE h.employee_id IS NULL;

SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees FROM hiring h JOIN shop s ON h.shop_id = s.shop_id GROUP BY h.shop_id;

SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) FROM evaluation;

SELECT * FROM hiring;

SELECT * FROM hiring;

SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;

SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(document_id) FROM documents;

SELECT COUNT(document_id) FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT document_id, document_name, other_details FROM documents;

SELECT t1.document_name, t2.template_id FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t1.document_description LIKE '%w%';

SELECT document_name, document_id FROM documents WHERE document_description LIKE '%w%';

SELECT t.document_id, t.template_id, d.document_description FROM documents t INNER JOIN templates dd ON t.template_id = dd.template_id WHERE t.document_name = 'Robbin CV';

SELECT t.document_id, t.template_id, t.document_description FROM documents AS t WHERE t.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT t1.template_type_code) FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code;

SELECT COUNT(DISTINCT t1.template_type_code) FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents AS t3 ON t2.template_id = t3.template_id;

SELECT COUNT(t.document_id) FROM templates t INNER JOIN documents d ON t.template_id = d.template_id WHERE t.template_type_code = 'PPT';

SELECT COUNT(T1.document_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'PPT';

SELECT t1.template_id, COUNT(t2.document_id) FROM templates t1 INNER JOIN documents t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id;

SELECT t1.document_id, COUNT(t1.document_id) FROM documents AS t1 GROUP BY t1.document_id;

SELECT t1.template_id, t2.template_type_code FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id GROUP BY t2.template_type_code ORDER BY COUNT(t1.document_id) DESC LIMIT 1;

SELECT t1.template_id, t2.template_type_code FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id GROUP BY t2.template_type_code ORDER BY COUNT(t1.document_id) DESC LIMIT 1;

SELECT t1.template_id FROM templates AS t1 INNER JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_id HAVING COUNT(t2.document_id) > 1;

SELECT DISTINCT t1.template_id FROM documents AS t1 INNER JOIN ( SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(*) > 1 ) AS t2 ON t1.document_id = t2.document_id;

SELECT t1.template_id FROM templates AS t1 LEFT JOIN documents AS t2 ON t1.template_id = t2.template_id WHERE t2.document_id IS NULL;

SELECT t1.template_id FROM templates AS t1 LEFT JOIN documents AS t2 ON t1.template_id = t2.template_id WHERE t2.document_id IS NULL;

SELECT COUNT(DISTINCT t1.template_id) FROM templates t1;

SELECT COUNT(*) FROM templates;

SELECT DISTINCT template_id, version_number, template_type_code FROM templates;

SELECT t1.template_id, t1.version_number, t1.template_type_code FROM templates AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code;

SELECT DISTINCT template_type_code FROM templates;

SELECT DISTINCT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code;

SELECT DISTINCT t1.template_id FROM templates AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code WHERE t2.template_type_code IN ('PP', 'PPT');

SELECT DISTINCT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT t1.template_type_code, COUNT(t1.template_id) FROM templates t1 GROUP BY t1.template_type_code;

SELECT t1.template_type_code, COUNT(t2.document_id) FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code;

SELECT t1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY t1.template_type_code ORDER BY COUNT(t1.template_id) DESC LIMIT 1;

SELECT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY t1.template_type_code HAVING COUNT(t2.template_id) < 3;

SELECT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code HAVING COUNT(t2.template_id) < 3;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY version_number, template_type_code LIMIT 1;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY version_number, template_type_code;

SELECT t1.template_type_code FROM templates AS t1 INNER JOIN documents AS t2 ON t1.template_id = t2.template_id WHERE t2.document_name = 'Data base';

SELECT t1.template_type_code FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents AS t3 ON t2.template_id = t3.template_id WHERE t3.document_name = 'Data base';

SELECT t.document_name FROM documents AS t WHERE t.template_id IN ( SELECT id FROM templates WHERE template_type_code = 'BK' );

SELECT t.document_name FROM documents AS t WHERE t.template_id IN ( SELECT m.template_id FROM templates AS m WHERE m.template_type_code = 'BK' );

SELECT t1.template_type_code, COUNT(t3.document_id) FROM ref_template_types t1 INNER JOIN templates t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents t3 ON t2.template_id = t3.template_id GROUP BY t1.template_type_code;

SELECT t1.template_type_code, COUNT(t3.document_id) FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents AS t3 ON t2.template_id = t3.template_id GROUP BY t1.template_type_code;

SELECT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN documents AS T2 ON T1.template_type_code = T2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(t2.document_id) DESC LIMIT 1;

SELECT t1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY t1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT t1.template_type_code FROM ref_template_types AS t1 LEFT JOIN documents AS t2 ON t1.template_type_code = t2.template_id WHERE t2.document_id IS NULL;

SELECT t1.template_type_code FROM ref_template_types AS t1 LEFT JOIN documents AS t2 ON t1.template_type_code = t2.template_id WHERE t2.document_id IS NULL;

SELECT * FROM ref_template_types;

SELECT DISTINCT t1.template_type_code, t1.template_type_description FROM ref_template_types AS T1;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT DISTINCT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT T1.template_type_description FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_id IN ( SELECT document_id FROM documents );

SELECT DISTINCT t1.template_type_description FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents AS t3 ON t2.template_id = t3.template_id;

SELECT t1.template_id FROM templates AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code WHERE t2.template_type_description = 'Presentation';

SELECT DISTINCT t1.template_id FROM templates AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code WHERE t2.template_type_description = 'Presentation';

SELECT COUNT(paragraph_id) FROM paragraphs;

SELECT COUNT(paragraph_id) FROM paragraphs;

SELECT COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Summer Show';

SELECT COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Summer Show';

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT T1.* FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text LIKE '%Korea%';

SELECT T1.paragraph_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T1.document_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews';

SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, document_name, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id;

SELECT document_id, document_name, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id, document_name FROM documents GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1;

SELECT document_id, document_name FROM documents WHERE document_id IN ( SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1 );

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT name FROM teacher ORDER BY age;

SELECT name FROM teacher ORDER BY age;

SELECT t.age, t.hometown FROM teacher t;

SELECT t.age, t.hometown FROM teacher t;

SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';

SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT hometown FROM teacher ORDER BY age LIMIT 1;

SELECT hometown FROM teacher WHERE age = ( SELECT MIN(age) FROM teacher );

SELECT T2.hometown, COUNT(*) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown;

SELECT t.hometown, COUNT(t.teacher_id) FROM teacher t GROUP BY t.hometown;

SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;

SELECT T3.name AS teacher_name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id;

SELECT T3.name AS teacher_name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id;

SELECT T3.name, T2.course FROM course_arrange AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id ORDER BY T3.name;

SELECT T3.name AS teacher_name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id ORDER BY teacher_name;

SELECT T3.name FROM course AS T1 INNER JOIN course_arrange AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T2.teacher_id = T3.teacher_id WHERE T1.course = 'Math';

SELECT DISTINCT T2.name FROM course AS T1 INNER JOIN teacher AS T2 ON T1.course_id = T2.teacher_id WHERE T1.course LIKE '%math%';

SELECT t.name, COUNT(ca.course_id) FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.course_id) FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id HAVING COUNT(*) >= 2;

SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id HAVING COUNT(T1.course_id) >= 2;

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.teacher_id IS NULL;

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.teacher_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;

SELECT AVG(age) FROM visitor WHERE level_of_membership <= 'Member';

SELECT v.name, v.level_of_membership FROM visitor v WHERE v.id IN ( SELECT visitor_id FROM visit WHERE total_spent > 30 ) ORDER BY v.age DESC, v.id;

SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010 );

SELECT visitor.id, visitor.name, visitor.age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY visitor.id HAVING COUNT(DISTINCT museum_id) > 1;

SELECT visitor_id, name, level_of_membership FROM visitor WHERE id IN ( SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY SUM(total_spent) DESC LIMIT 1 );

SELECT T2.id, T2.name FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id GROUP BY T1.museum_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM museum WHERE museum_id NOT IN ( SELECT museum_id FROM visit );

SELECT T1.name, T1.age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T2.num_of_ticket = ( SELECT MAX(num_of_ticket) FROM visit );

SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;

SELECT SUM(total_spent) FROM visit WHERE visitor_id IN ( SELECT id FROM visitor WHERE level_of_membership = 'Level_1' );

SELECT T3.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id INNER JOIN visitor AS T3 ON T2.visitor_id = T3.id WHERE T1.open_year < 2009 AND T1.open_year > 2011;

SELECT COUNT(visitor.id) FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id WHERE visit.museum_id IS NULL AND (SELECT open_year FROM museum WHERE museum_id = visit.museum_id) < 2010;

SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN countries AS T2 ON T1.country_code = T2.country_code WHERE T2.country_name = 'USA';

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(T2.winner_rank) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id;

SELECT AVG(T2.winner_rank) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.winner_rank IS NOT NULL;

SELECT MAX(loser_rank) FROM matches;

SELECT MAX(loser_rank) FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_id) > 10;

SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(tourney_id) > 10;

SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016) GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.year) = 2;

SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016) GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.year) = 2;

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE STRFTIME('%Y', tourney_date) IN ('2013', '2016');

SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.country_code, T1.first_name HAVING COUNT(DISTINCT T2.tourney_name) = 2;

SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.tourney_name) = 2;

SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date DESC;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1;

SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT winner_name, winner_rank_points FROM matches WHERE winner_rank = ( SELECT MAX(winner_rank) FROM matches );

SELECT T1.first_name, T1.last_name, T1.ranking_points FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.win_count DESC LIMIT 1;

SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches );

SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open' );

SELECT T2.loser_name, T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.minutes = ( SELECT MAX(minutes) FROM matches );

SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.minutes = ( SELECT MAX(minutes) FROM matches );

SELECT p.first_name, AVG(ranking) FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;

SELECT T1.first_name, AVG(T3.ranking) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name;

SELECT p.first_name, SUM(ranking_points) FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;

SELECT T1.first_name, SUM(T3.ranking_points) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name;

SELECT COUNT(DISTINCT T1.player_id), T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.country_code;

SELECT COUNT(DISTINCT T1.country_code), T2.country FROM players AS T1 INNER JOIN countries AS T2 ON T1.country_code = T2.country_code GROUP BY T2.country;

SELECT COUNT(DISTINCT T2.country_code) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.country_code FROM ( SELECT COUNT(*) AS num FROM players GROUP BY country_code ORDER BY num DESC LIMIT 1 ) AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id;

SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;

SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;

SELECT strftime('%Y', tourney_date) AS year, COUNT(year) FROM matches GROUP BY year;

SELECT year, COUNT(year) FROM matches GROUP BY year;

SELECT T1.first_name, T1.last_name, T1.winner_rank FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T1.birth_date DESC LIMIT 3;

SELECT T1.first_name, T1.last_name, T1.winner_rank FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T1.birth_date DESC LIMIT 3;

SELECT COUNT(DISTINCT T1.player_id) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name LIKE 'WTA Championships' AND T2.hand = 'L';

SELECT COUNT(T1.player_id) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name LIKE 'WTA Championships';

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T2.winner_rank_points DESC LIMIT 1;

SELECT COUNT(DISTINCT CASE WHEN T1.hand = 'Left-hand' THEN T2.player_id END), COUNT(DISTINCT CASE WHEN T1.hand = 'Right-hand' THEN T2.player_id END) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id;

SELECT COUNT(DISTINCT CASE WHEN T1.hand = 'Left-hand' THEN T2.player_id END), COUNT(DISTINCT CASE WHEN T1.hand = 'Right-hand' THEN T2.player_id END) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id;

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name DESC;

SELECT b.name, b.date, b.result FROM battle b;

SELECT t1.name as battle_name, MAX(t3.killed) as max_deaths, MIN(t3.injured) as min_injuries FROM battle AS t1 JOIN ship AS t2 ON t1.id = t2.lost_in_battle JOIN death AS t3 ON t2.id = t3.caused_by_ship_id GROUP BY t1.name;

SELECT AVG(injured / NULLIF(killed, 0)) FROM death;

SELECT d.note FROM death AS d JOIN ship AS s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';

SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';

SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';

SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id HAVING SUM(killed) > 10;

SELECT ship.id, ship.name FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM(death.injured) DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225);

SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice', 'HMS Atalanta');

SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location NOT LIKE '%English Channel%';

SELECT note FROM death WHERE note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(course_id) FROM courses;

SELECT COUNT(course_id) FROM courses;

SELECT course_description FROM courses WHERE course_name = 'Math';

SELECT T1.course_description FROM courses AS T1 INNER JOIN degree_programs AS T2 ON T1.course_id = T2.degree_program_id WHERE T2.department_id IN ( SELECT department_id FROM departments WHERE department_name LIKE 'Math%' );

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT department_name, department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1;

SELECT T2.department_name, T1.degree_program_id FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1;

SELECT COUNT(DISTINCT department_id) FROM degree_programs;

SELECT COUNT(DISTINCT T.department_id) FROM degree_programs AS T;

SELECT COUNT(DISTINCT T2.degree_summary_name) FROM courses AS T1 INNER JOIN degree_programs AS T2 ON T1.course_id = T2.department_id;

SELECT COUNT(DISTINCT T2.degree_summary_name) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id;

SELECT COUNT(T2.degree_program_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE 'Engineering%';

SELECT COUNT(T2.degree_program_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE 'Engineering%';

SELECT section_name, section_description FROM sections;

SELECT section_name, section_description FROM sections;

SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) <= 2;

SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2;

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT T.semester_name, T.semester_id FROM semesters AS T GROUP BY T.semester_id ORDER BY COUNT(T.semester_id) DESC LIMIT 1;

SELECT T.semester_name, T.semester_id FROM semesters AS T GROUP BY T.semester_id ORDER BY COUNT(T.semester_id) DESC LIMIT 1;

SELECT department_description FROM departments WHERE department_name ILIKE '%Computer%';

SELECT department_description FROM departments WHERE department_name ILIKE '%computer%';

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.semester_id IN ( SELECT semester_id FROM semesters GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 );

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.semester_id IN ( SELECT semester_id FROM semesters GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 );

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors';

SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T2.degree_summary_name) DESC LIMIT 1;

SELECT degree_program_id, degree_summary_name FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT T2.degree_program_id, T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id), MAX(COUNT(T2.student_enrolment_id)) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T.semester_name FROM semesters AS T LEFT JOIN student_enrolment AS S ON T.semester_id = S.semester_id WHERE S.student_id IS NULL;

SELECT T.semester_name FROM semesters AS T WHERE T.semester_id NOT IN ( SELECT DISTINCT semester_id FROM student_enrolment );

SELECT T4.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN courses AS T3 ON T2.course_id = T3.course_id INNER JOIN sections AS T4 ON T3.course_id = T4.course_id;

SELECT T4.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN courses AS T3 ON T2.course_id = T3.course_id INNER JOIN sections AS T4 ON T3.course_id = T4.course_id GROUP BY T4.course_name;

SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT T4.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN courses AS T3 ON T2.course_id = T3.course_id INNER JOIN sections AS T4 ON T3.course_id = T4.course_id GROUP BY T4.course_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN ( SELECT student_id FROM student_enrolment );

SELECT T1.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN ( SELECT student_id FROM student_enrolment );

SELECT T1.transcript_date, T1.transcript_id FROM transcripts AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.transcript_id = T2.student_enrolment_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_enrolment_id) >= 2;

SELECT t.transcript_id, t.transcript_date FROM transcripts t JOIN student_enrolment_courses sce ON t.transcript_id = sce.transcript_id GROUP BY t.transcript_id HAVING COUNT(sce.student_course_id) >= 2;

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;

SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM students );

SELECT first_name, middle_name, last_name FROM students WHERE date_left IS NULL ORDER BY date_left LIMIT 1;

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.permanent_address_id IS NOT NULL AND T1.permanent_address_id <> T1.current_address_id;

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permentary_address_id = T2.address_id WHERE T1.current_address_id != T2.address_id;

SELECT current_address_id, line_1, line_2 FROM addresses WHERE current_address_id IN ( SELECT permanent_address_id FROM students );

SELECT t.address_id, t.line_1, t.line_2 FROM addresses t GROUP BY t.address_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(T.transcript_date) FROM ( SELECT DISTINCT T1.transcript_date FROM transcripts AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id ) T;

SELECT AVG(transcript_date) FROM transcripts;

SELECT MIN(transcript_date), other_details FROM transcripts;

SELECT MIN(T1.transcript_date), T1.other_details FROM transcripts AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id;

SELECT COUNT(transcript_id) FROM transcripts WHERE transcript_date >= '2013-08-01' AND transcript_date < '2014-08-01';

SELECT COUNT(transcript_id) FROM transcripts;

SELECT MAX(T.transcript_date) FROM ( SELECT DISTINCT ON (transcript_date) transcript_date FROM transcripts WHERE other_details = 'Released' ORDER BY transcript_date DESC ) T;

SELECT MAX(transcript_date) FROM transcripts;

SELECT COUNT(T2.transcript_id), T2.student_enrolment_id FROM student_enrolment AS T1 INNER JOIN transcripts AS T2 ON T1.student_enrolment_id = T2.transcript_id GROUP BY T2.student_enrolment_id ORDER BY COUNT(T2.transcript_id) DESC LIMIT 1;

SELECT T2.student_enrolment_id, COUNT(T1.transcript_id) FROM transcripts AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.transcript_id = T2.student_course_id GROUP BY T2.student_enrolment_id ORDER BY COUNT(T1.transcript_id) DESC LIMIT 1;

SELECT t.transcript_id FROM transcripts t ORDER BY COUNT(t.transcript_id) ASC LIMIT 1;

SELECT t.transcript_date, t.transcript_id FROM transcripts t ORDER BY COUNT(t.transcript_id) LIMIT 1;

SELECT T.semester_name FROM ( SELECT T1.semester_name, COUNT(T2.student_id) AS num_students FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master' ) GROUP BY T1.semester_name ) AS T WHERE T.num_students > 0;

SELECT T.semester_id FROM ( SELECT T1.semester_id FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters' ) INTERSECT SELECT T1.semester_id FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors' ) ) t;

SELECT COUNT(DISTINCT T1.address_id) FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id;

SELECT DISTINCT line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students );

SELECT * FROM students ORDER BY last_name DESC;

SELECT other_student_details FROM students ORDER BY last_name DESC;

SELECT section_description FROM sections WHERE section_name = 'section H';

SELECT section_description FROM sections WHERE section_name = 'H';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon ORDER BY title;

SELECT * FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT t.title, t.director, t.air_date FROM cartoon t ORDER BY t.air_date;

SELECT t.title, t.directed_by FROM tv_series t ORDER BY t.air_date;

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT t.title FROM cartoon t WHERE t.directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT country, COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT COUNT(DISTINCT series_name), content FROM tv_channel GROUP BY content;

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT COUNT(*) FROM tv_channel WHERE language = 'english';

SELECT COUNT(*) FROM tv_channel WHERE language = 'english';

SELECT language, COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) LIMIT 1;

SELECT t.language, COUNT(DISTINCT t.id) AS channel_count FROM tv_channel t GROUP BY t.language ORDER BY channel_count LIMIT 1;

SELECT language, COUNT(*) FROM tv_channel GROUP BY language;

SELECT language, COUNT(*) FROM tv_channel GROUP BY language;

SELECT t.tv_channel, t.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel INNER JOIN cartoon c ON t.id = c.channel WHERE c.title = 'The Rise of the Blue Beetle!';

SELECT t.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel WHERE s.title = 'The Rise of the Blue Beetle';

SELECT t.title FROM tv_channel tc JOIN tv_series ts ON tc.id = ts.channel JOIN cartoon c ON tc.id = c.channel WHERE ts.series_name = 'Sky Radio';

SELECT t.title FROM tv_series s JOIN cartoon t ON s.channel = t.channel WHERE s.series_name = 'Sky Radio';

SELECT episode FROM tv_series ORDER BY rating DESC;

SELECT episode FROM tv_series ORDER BY rating DESC;

SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;

SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;

SELECT MIN(t.share), MAX(t.share) FROM tv_series t;

SELECT MAX(t.share), MIN(t.share) FROM tv_series t;

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime';

SELECT series_name FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio';

SELECT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio';

SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by;

SELECT d.director, COUNT(c.id) AS num_of_cartoons FROM cartoon c JOIN tv_channel ch ON c.channel = ch.id JOIN tv_series t ON ch.id = t.channel GROUP BY d.director;

SELECT production_code, channel FROM cartoon WHERE air_date = ( SELECT MAX(air_date) FROM cartoon );

SELECT production_code, channel FROM cartoon WHERE original_air_date = ( SELECT MAX(original_air_date) FROM cartoon );

SELECT DISTINCT T1.package_option, T2.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.hight_definition_tv = TRUE;

SELECT DISTINCT package_option, series_name FROM tv_channel WHERE hight_definition_tv = TRUE;

SELECT DISTINCT T2.country FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.written_by = 'Todd Casey';

SELECT DISTINCT t.country FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel INNER JOIN cartoon c ON t.id = c.channel WHERE c.written_by = 'Todd Casey';

SELECT DISTINCT T2.country FROM tv_channel AS T1 LEFT JOIN ( SELECT DISTINCT channel FROM tv_series WHERE writer = 'Todd Casey' ) AS T2 ON T1.id = T2.channel WHERE T2.channel IS NULL;

SELECT DISTINCT t.country FROM tv_channel t LEFT JOIN ( SELECT DISTINCT channel FROM tv_series WHERE writer = 'Todd Casey' ) cs ON t.id = cs.channel WHERE cs.channel IS NULL;

SELECT t.series_name, t.country FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel INNER JOIN cartoon c ON t.id = c.channel WHERE c.directed_by = 'Ben Jones' AND c.written_by = 'Michael Chang';

SELECT t.series_name, t.country FROM tv_channel t INNER JOIN ( SELECT DISTINCT channel FROM cartoon WHERE directed_by = 'Ben Jones' UNION SELECT DISTINCT channel FROM cartoon WHERE directed_by = 'Michael Chang' ) c ON t.id = c.channel;

SELECT DISTINCT t.pixel_aspect_ratio_par, t.country FROM tv_channel t WHERE t.language <> 'english';

SELECT DISTINCT T1.pixel_aspect_ratio_par, T1.country FROM tv_channel AS T1 JOIN ( SELECT DISTINCT channel FROM tv_series WHERE language != 'English' ) AS T2 ON T1.id = T2.channel;

SELECT t.country FROM tv_channel t GROUP BY t.country HAVING COUNT(t.id) > 2;

SELECT channel FROM tv_channel GROUP BY channel HAVING COUNT(*) > 2;

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT poker_player.earnings FROM poker_player ORDER BY earnings DESC;

SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT final_table_made, best_finish FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player );

SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player );

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT DISTINCT T1.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id;

SELECT DISTINCT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT DISTINCT T1.name FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id = T2.people_id WHERE T2.earnings > 300000;

SELECT DISTINCT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000;

SELECT name FROM poker_player ORDER BY final_table_made ASC;

SELECT name FROM poker_player WHERE final_table_made > 0 ORDER BY final_table_made ASC;

SELECT T1.birth_date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T2.earnings ASC LIMIT 1;

SELECT T1.birth_date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T2.earnings ASC LIMIT 1;

SELECT t1.money_rank FROM poker_player AS t1 INNER JOIN people AS t2 ON t1.people_id = t2.people_id ORDER BY t2.height DESC LIMIT 1;

SELECT T2.money_rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T1.height DESC LIMIT 1;

SELECT AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT p.name FROM poker_player p ORDER BY p.earnings DESC;

SELECT name FROM poker_player WHERE final_table_made = 1 ORDER BY earnings DESC;

SELECT p.nationality, COUNT(*) FROM people p GROUP BY p.nationality;

SELECT COUNT(nationality), nationality FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name FROM people WHERE nationality <> 'Russia';

SELECT name FROM people WHERE nationality <> 'Russia';

SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player );

SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player );

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM area_code_state;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT vote_id, phone_number, state FROM votes;

SELECT MAX(area_code), MIN(area_code) FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT T2.state, T1.created FROM votes AS T1 JOIN area_code_state AS T2 ON T1.state = T2.state;

SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN ( SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2 );

SELECT contestant_number, contestant_name FROM ( SELECT contestant_number, contestant_name, ROW_NUMBER() OVER (ORDER BY COUNT(*) ASC) AS rank FROM votes GROUP BY contestant_number ) AS subquery WHERE rank = 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);

SELECT T2.area_code FROM votes AS T1 INNER JOIN area_code_state AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT v.created, s.state, t.phone_number FROM votes v JOIN contestants c ON v.contestant_number = c.contestant_number JOIN area_code_state s ON v.state = s.area_code WHERE c.contestant_name = 'Tabatha Gehling';

SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state WHERE T2.contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') INTERSECT SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state WHERE T2.contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss');

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT name FROM country WHERE indepyear > 1950;

SELECT name FROM country WHERE indepyear > 1950;

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean';

SELECT continent FROM country WHERE name = 'Anguilla';

SELECT continent FROM country WHERE name = 'Anguilla';

SELECT T1.region FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Kabul';

SELECT T1.region FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Kabul';

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba' ORDER BY T1.percentage DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba' ORDER BY T1.percentage DESC LIMIT 1;

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT region, population FROM country WHERE name = 'Angola';

SELECT T1.region, T1.population FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Angola';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countryregion AS T2 ON T1.code = T2.countrycode WHERE T2.region = 'Central Africa';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = ( SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia' );

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;

SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';

SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Africa' AND T1.governmentform = 'Republic';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe';

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT AVG(T1.gnp), SUM(T1.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.governmentform = 'US territory';

SELECT AVG(T1.gnp), SUM(T1.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Washington';

SELECT COUNT(DISTINCT T.language) FROM ( SELECT DISTINCT T1.language AS language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code ) T;

SELECT COUNT(DISTINCT T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT SUM(CASE WHEN T1.name = 'Aruba' THEN 1 ELSE 0 END) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode;

SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba';

SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Afghanistan' AND T1.isofficial = TRUE;

SELECT SUM(CASE WHEN T1.governmentform = 'republic' THEN 1 ELSE 0 END) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Afghanistan' AND T2.isofficial = 1;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1;

SELECT T.continent FROM ( SELECT T1.continent, COUNT(DISTINCT T3.language) AS num FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode INNER JOIN language AS T3 ON T2.language = T3.name GROUP BY T1.continent ) AS T ORDER BY T.num DESC LIMIT 1;

SELECT T.continent FROM ( SELECT T1.continent, COUNT(T3.language) AS num FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode INNER JOIN language AS T3 ON T2.language = T3.name GROUP BY T1.continent ) AS T ORDER BY T.num DESC LIMIT 1;

SELECT COUNT(DISTINCT T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch');

SELECT COUNT(DISTINCT T1.countrycode) FROM countrylanguage AS T1 INNER JOIN language AS T2 ON T1.language = T2.name WHERE T2.name IN ('English', 'Dutch');

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) = 2;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) = 2;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') AND T2.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') AND T2.isofficial = TRUE;

SELECT COUNT(DISTINCT T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese';

SELECT COUNT(continent) FROM country WHERE localname = 'China';

SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch');

SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('Dutch', 'English');

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch') AND T2.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch') AND T2.isofficial = TRUE;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Asia' ORDER BY T1.percentage DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Asia' GROUP BY T1.language ORDER BY COUNT(T1.language) DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(T1.language) = 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(*) = 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'english' ORDER BY T1.population DESC LIMIT 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'english' ORDER BY T1.population DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT name, population, lifeexpectancy FROM country WHERE region = 'Asia' ORDER BY surfacearea DESC LIMIT 1;

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT SUM(CASE WHEN T1.language != 'English' THEN T1.population ELSE 0 END) FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.headofstate = 'Beatrix';

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.headofstate = 'Beatrix';

SELECT COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T1.gnp IS NOT NULL;

SELECT COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T2.isofficial = 'T';

SELECT name FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' );

SELECT name FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' );

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T2.population < ( SELECT MIN(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode ) GROUP BY T1.name;

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.population < ( SELECT MIN(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode ) GROUP BY T1.name;

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T2.population > ALL ( SELECT MAX(population) FROM city WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Africa' ) );

SELECT T1.name FROM country AS T1 INNER JOIN ( SELECT MAX(population) FROM country WHERE continent = 'Africa' ) AS T2 ON T1.population > T2.population WHERE T1.continent = 'Asia';

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' GROUP BY T1.code;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' GROUP BY T1.code;

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' AND T1.governmentform != 'Republic';

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' AND T1.governmentform != 'republic';

SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Europe' AND T2.language != 'English';

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.district LIKE '%Europe%' AND T2.language = 'english' AND T2.isofficial = 'f';

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T2.isofficial = TRUE AND T1.district LIKE '%Asia%';

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T1.district LIKE '%Asia%';

SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;

SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;

SELECT T1.population, T1.name, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) > 3;

SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) > 2;

SELECT COUNT(T1.id), T2.district FROM city AS T1 INNER JOIN ( SELECT AVG(population) FROM city ) AS T2 ON 1=1 WHERE T1.population > T2.population GROUP BY T2.district;

SELECT COUNT(id), district FROM city WHERE population > ( SELECT AVG(population) FROM city ) GROUP BY district;

SELECT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' GROUP BY T1.governmentform HAVING AVG(T1.lifeexpectancy) > 72;

SELECT DISTINCT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72 GROUP BY T1.governmentform;

SELECT T.continent, AVG(T.lifeexpectancy), SUM(T.population) FROM country AS T WHERE T.lifeexpectancy < 72 GROUP BY T.continent;

SELECT T.continent, SUM(T.population), AVG(T.lifeexpectancy) FROM country AS T GROUP BY T.continent HAVING AVG(T.lifeexpectancy) < 72;

SELECT T1.name, T1.area FROM country AS T1 INNER JOIN ( SELECT DISTINCT countrycode, MAX(surfacearea) AS maxarea FROM country GROUP BY countrycode LIMIT 5 ) AS T2 ON T1.code = T2.countrycode;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT T1.name FROM country AS T1 INNER JOIN population AS T2 ON T1.code = T2.country ORDER BY T2.population DESC LIMIT 3;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population LIMIT 3;

SELECT name FROM country ORDER BY population LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT name FROM city WHERE population BETWEEN '160000' AND '900000';

SELECT name FROM city WHERE population BETWEEN '160000' AND '900000';

SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN ( SELECT COUNT(DISTINCT countrycode) AS num FROM countrylanguage GROUP BY language ORDER BY num DESC LIMIT 1 ) AS T2 ON T1.language = T2.num;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.language ORDER BY SUM(T1.percentage) DESC LIMIT 1;

SELECT T1.code, T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 80;

SELECT COUNT(DISTINCT T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.percentage > 70;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.percentage > 80;

SELECT COUNT(DISTINCT conductor_id) FROM conductor;

SELECT COUNT(DISTINCT conductor_id) FROM conductor;

SELECT name FROM conductor ORDER BY age ASC;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality <> 'USA';

SELECT name FROM conductor WHERE nationality <> 'USA';

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT MAX(share), MIN(share) FROM performance WHERE type NOT IN ('Live final');

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);

SELECT name FROM conductor WHERE (YEAR(MAX(year_of_work)) - YEAR(MIN(year_of_work))) / (MAX(year_of_work) - MIN(year_of_work)) = (SELECT MAX((YEAR(MAX(year_of_work)) - YEAR(MIN(year_of_work))) / (MAX(year_of_work) - MIN(year_of_work))) FROM conductor);

SELECT DISTINCT T1.name, T2.orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id;

SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT DISTINCT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.conductor_id HAVING COUNT(DISTINCT T2.orchestra_id) > 1;

SELECT DISTINCT c.name FROM conductor c WHERE c.conductor_id IN ( SELECT o.conductor_id FROM orchestra o GROUP BY o.conductor_id HAVING COUNT(DISTINCT o.orchestra_id) > 1 );

SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008;

SELECT DISTINCT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008;

SELECT record_company, COUNT(DISTINCT orchestra) AS num_orchestras FROM orchestra GROUP BY record_company;

SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company;

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format);

SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;

SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (SELECT MAX(count_distinct_orchestra_id) FROM orchestra GROUP BY record_company);

SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(record_company) = (SELECT MAX(count_orchestras) FROM (SELECT record_company, COUNT(orchestra_id) AS count_orchestras FROM orchestra GROUP BY record_company) AS subquery);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT DISTINCT T1.record_company FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 OR T1.year_of_founded > 2003;

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded >= 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';

SELECT DISTINCT T1.year_of_founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(DISTINCT T2.performance_id) > 1;

SELECT T.year_of_founded FROM orchestra AS T GROUP BY T.year_of_founded HAVING COUNT(DISTINCT T.performance_id) > 1;

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT T1.name, T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT T1.name, T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id;

SELECT DISTINCT grade FROM highschooler;

SELECT T1.name, T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT T2.grade FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id = ( SELECT id FROM highschooler WHERE name = 'Kyle' );

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(student_id) >= 4;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT T2.student_id, COUNT(T1.friend_id) FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.student_id;

SELECT T2.student_id, COUNT(T1.friend_id) FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.id;

SELECT T1.name, COUNT(T3.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id GROUP BY T1.name;

SELECT T1.name, COUNT(T3.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id GROUP BY T1.name;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.friend_id) DESC LIMIT 1;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id ORDER BY COUNT(T2.friend_id) DESC LIMIT 1;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3;

SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle';

SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle';

SELECT COUNT(T2.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT COUNT(T2.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT T.id FROM highschooler AS T WHERE T.id NOT IN ( SELECT DISTINCT T2.student_id FROM friend AS T2 );

SELECT T.id FROM highschooler AS T LEFT JOIN friend AS F ON T.id = F.student_id WHERE F.student_id IS NULL;

SELECT T1.name FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT T1.name FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.friend_id GROUP BY T1.id HAVING COUNT(DISTINCT T2.friend_id) > 1 AND COUNT(DISTINCT T3.liked_id) > 1;

SELECT T1.id FROM friend AS T1 INNER JOIN likes AS T2 ON T1.student_id = T2.student_id;

SELECT DISTINCT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.friend_id;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id;

SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;

SELECT student_id, COUNT(student_id) FROM likes GROUP BY student_id;

SELECT T3.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id GROUP BY T3.name;

SELECT T3.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id GROUP BY T3.student_id;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.liked_id) DESC LIMIT 1;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.liked_id) DESC LIMIT 1;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.id HAVING COUNT(T2.id) >= 2;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name HAVING COUNT(T1.liked_id) >= 2;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 2;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 2;

SELECT COUNT(*) FROM likes WHERE student_id IN ( SELECT id FROM highschooler WHERE name = 'Kyle' );

SELECT COUNT(T2.likes) FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT MIN(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT MIN(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT DISTINCT s.state FROM owners o INNER JOIN professionals p ON o.state = p.state;

SELECT DISTINCT T1.state FROM owners AS T1 JOIN professionals AS T2 ON T1.state = T2.state;

SELECT AVG(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments );

SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2;

SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2;

SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000;

SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000;

SELECT DISTINCT T1.first_name FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id LEFT JOIN dogs AS T3 ON T2.owner_id = T3.owner_id WHERE T1.first_name IS NOT NULL AND T2.first_name IS NOT NULL AND T3.first_name IS NULL;

SELECT DISTINCT T1.first_name FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id LEFT JOIN dogs AS T3 ON T2.owner_id = T3.owner_id WHERE T1.first_name NOT IN (T3.first_name);

SELECT p.professional_id, p.role_code, p.email_address FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments );

SELECT owner_id, first_name, last_name FROM owners o WHERE o.owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT p.professional_id, p.role_code, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;

SELECT p.professional_id, p.role_code, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;

SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT breed_name FROM breeds WHERE breed_code = ( SELECT COUNT(*) FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT o.owner_id, o.last_name FROM owners o JOIN treatments t ON o.owner_id = t.owner_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;

SELECT T1.owner_id, T1.last_name FROM owners AS T1 JOIN treatments AS T2 ON T1.owner_id = T2.dog_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1;

SELECT t.treatment_type_description FROM treatment_types t JOIN treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;

SELECT t.treatment_type_description FROM treatment_types t JOIN treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o JOIN ( SELECT owner_id, SUM(charge_amount) AS total_paid FROM charges GROUP BY owner_id ORDER BY total_paid DESC LIMIT 1 ) c ON o.owner_id = c.owner_id;

SELECT T1.owner_id, T1.zip_code FROM owners AS T1 JOIN ( SELECT dog_id, SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY dog_id ORDER BY total_cost DESC LIMIT 1 ) AS T2 ON T1.owner_id = T2.dog_id;

SELECT professional_id, cell_number FROM professionals p WHERE p.professional_id IN ( SELECT t.professional_id FROM treatments t GROUP BY t.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2 );

SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;

SELECT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.treatment_type_code, t.date_of_treatment, tt.treatment_type_description, t.cost_of_treatment FROM treatments t INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT t.treatment_type_description, t.cost_of_treatment FROM treatments t;

SELECT T1.first_name, T1.last_name, T3.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id JOIN sizes AS T3 ON T2.size_code = T3.size_code WHERE T2.gender = 'M' OR T2.gender = 'F';

SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id;

SELECT T1.first_name, T3.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id JOIN ( SELECT DISTINCT owner_id, name FROM dogs ) AS T3 ON T1.owner_id = T3.owner_id;

SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE ( SELECT COUNT(*) FROM breeds b WHERE b.breed_code = d.breed_code ) = ( SELECT MIN(count_) FROM ( SELECT breed_code, COUNT(*) AS count_ FROM breeds GROUP BY breed_code ) AS subquery );

SELECT T1.name, T3.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id JOIN professionals AS T3 ON T2.professional_id = T3.professional_id WHERE T1.breed_code = ( SELECT breed_code FROM breeds ORDER BY COUNT(*) ASC LIMIT 1 );

SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';

SELECT T1.first_name, T4.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';

SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;

SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;

SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1;

SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1;

SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';

SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';

SELECT date_arrived, date_departed FROM dogs;

SELECT date_arrived, date_departed FROM dogs;

SELECT COUNT(DISTINCT d.dog_id) FROM treatments t JOIN dogs d ON t.dog_id = d.dog_id;

SELECT COUNT(DISTINCT d.dog_id) FROM treatments t JOIN dogs d ON t.dog_id = d.dog_id;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN ( SELECT DISTINCT city FROM owners WHERE first_name = 'Dr' OR first_name = 'Prof' ) AS T2 ON T1.city = T2.city;

SELECT DISTINCT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.city LIKE '%West%';

SELECT T.first_name, T.last_name, T.email_address FROM owners AS T WHERE T.state LIKE '%North%';

SELECT DISTINCT T.first_name, T.last_name, T.email_address FROM owners AS T WHERE T.state LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT MAX(cost_of_treatment) FROM treatments WHERE date_of_treatment = ( SELECT MAX(date_of_treatment) FROM treatments );

SELECT T1.cost_of_treatment FROM treatments AS T1 ORDER BY T1.date_of_treatment DESC LIMIT 1;

SELECT COUNT(DISTINCT d.dog_id) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;

SELECT COUNT(DISTINCT d.dog_id) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;

SELECT COUNT(o.owner_id) FROM owners o LEFT JOIN ( SELECT DISTINCT owner_id FROM dogs ) d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;

SELECT COUNT(DISTINCT o.owner_id) FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;

SELECT COUNT(DISTINCT p.professional_id) FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT COUNT(DISTINCT p.professional_id) FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;

SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y';

SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT ct.charge_type, SUM(ct.charge_amount) FROM charges ct GROUP BY ct.charge_type;

SELECT charge_type, charge_amount FROM charges;

SELECT MAX(charge_amount) FROM charges WHERE charge_type = 'Expensive';

SELECT charge_amount FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges);

SELECT email_address, cell_number, home_phone FROM professionals;

SELECT t.first_name, t.last_name, t.email_address, t.cell_number, t.home_phone FROM professionals t;

SELECT b.breed_name, s.size_description FROM breeds b CROSS JOIN sizes s;

SELECT DISTINCT b.breed_name, s.size_description FROM breeds b CROSS JOIN sizes s;

SELECT t.first_name, tt.treatment_type_description FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id INNER JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT t.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT COUNT(*) FROM singer;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT singer.birth_year, singer.citizenship FROM singer;

SELECT singer.birth_year, singer.citizenship FROM singer;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT s.name FROM singer s ORDER BY s.net_worth_millions DESC LIMIT 1;

SELECT s.name FROM singer s ORDER BY s.net_worth_millions DESC LIMIT 1;

SELECT s.citizenship, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.citizenship;

SELECT s.citizenship, COUNT(*) FROM singer s GROUP BY s.citizenship;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT MAX(s.net_worth_millions) AS max_net_worth, s.citizenship FROM singer s GROUP BY s.citizenship;

SELECT T1.title, T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id;

SELECT T1.title, T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id;

SELECT DISTINCT s.name FROM singer s JOIN song t ON s.singer_id = t.singer_id WHERE t.sales > 300000;

SELECT DISTINCT s.name FROM singer s JOIN song t ON s.singer_id = t.singer_id WHERE t.sales > 300000;

SELECT s.name FROM singer s JOIN ( SELECT singer_id, COUNT(*) as song_count FROM song GROUP BY singer_id HAVING COUNT(*) > 1 ) sub ON s.singer_id = sub.singer_id;

SELECT s.name FROM singer s JOIN ( SELECT singer_id, COUNT(*) as cnt FROM song GROUP BY singer_id HAVING cnt > 1 ) t ON s.singer_id = t.singer_id;

SELECT s.name, SUM(so.sales) FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;

SELECT s.name, SUM(so.sales) FROM singer s JOIN song so ON s.singer_id = so.singer_id GROUP BY s.name;

SELECT s.name FROM singer s LEFT JOIN song t ON s.singer_id = t.singer_id WHERE t.song_id IS NULL;

SELECT s.name FROM singer s LEFT JOIN song t ON s.singer_id = t.singer_id WHERE t.song_id IS NULL;

SELECT s.citizenship FROM singer s WHERE s.birth_year < 1945 OR s.birth_year > 1955 GROUP BY s.citizenship HAVING COUNT(DISTINCT s.singer_id) > 1;

SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = 'AirCon';

SELECT DISTINCT t.property_type_code, t.property_type_description FROM ref_property_types AS t WHERE t.property_type_code = 't';

SELECT DISTINCT property_name FROM properties WHERE (room_count > 1 AND property_type_code = 'H') OR (room_count > 1 AND property_type_code = 'A');

