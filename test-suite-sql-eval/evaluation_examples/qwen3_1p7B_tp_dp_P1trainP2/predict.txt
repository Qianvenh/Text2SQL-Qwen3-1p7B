SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT T1.song_name, T1.song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age = (SELECT MIN(age) FROM singer);

SELECT T1.song_name, T1.song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age = (SELECT MIN(age) FROM singer);

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT s.country, COUNT(*) FROM singer s GROUP BY s.country;

SELECT s.country, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.country;

SELECT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT AVG(capacity), MAX(capacity) FROM stadium;

SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);

SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT s.name AS stadium_name, COUNT(c.concert_id) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;

SELECT s.name AS stadium_name, COUNT(c.concert_id) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;

SELECT T1.name, T1.capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year >= 2014 GROUP BY T1.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);

SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.concert_id IS NULL;

SELECT s.country FROM singer s WHERE s.age > 40 INTERSECT SELECT s.country FROM singer s WHERE s.age < 30;

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);

SELECT s.name FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IS NULL OR c.year != 2014;

SELECT c.concert_name, c.theme, COUNT(sc.singer_id) AS num_singers FROM concert c LEFT JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name, c.theme;

SELECT c.concert_name, t.theme, COUNT(DISTINCT s.singer_id) AS num_singers FROM concert c JOIN theater t ON c.stadium_id = t.stadium_id JOIN singer_in_concert sic ON c.concert_id = sic.concert_id JOIN singer s ON sic.singer_id = s.singer_id GROUP BY c.concert_name, t.theme;

SELECT s.name AS singer_name, COUNT(c.concert_id) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name;

SELECT s.name AS singer_name, COUNT(c.concert_id) AS num_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.singer_id = sic.singer_id LEFT JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name;

SELECT DISTINCT T3.name FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T1.singer_id = T3.singer_id WHERE T2.year = 2014;

SELECT DISTINCT T3.name FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014;

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T2.concert_id IN (SELECT concert_id FROM concert WHERE theme LIKE '%Hey%');

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T3.year = 2022 AND T3.stadium_id IN (SELECT stadium_id FROM stadium WHERE name LIKE '%Stadium%');

SELECT s.location, s.name FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.location, s.name HAVING COUNT(DISTINCT c.year) = 2;

SELECT DISTINCT T1.name, T1.location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year IN (2014, 2015) GROUP BY T1.name HAVING COUNT(DISTINCT T2.year) = 2;

SELECT COUNT(*) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.highest = (SELECT MAX(capacity) FROM stadium);

SELECT COUNT(*) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity = (SELECT MAX(capacity) FROM stadium);

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT MIN(weight) FROM pets WHERE pettype = 'dog';

SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1;

SELECT pettype, MAX(weight) as max_weight FROM pets GROUP BY pettype;

SELECT pettype, MAX(weight) as max_weight FROM pets GROUP BY pettype;

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20;

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20;

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T2.sex = 'F' AND T3.pettype = 'dog';

SELECT COUNT(*) FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T2.sex = 'F' AND T3.pettype = 'dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype IN ('cat', 'dog');

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype IN ('cat', 'dog');

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog') GROUP BY T1.stuid HAVING COUNT(DISTINCT T3.pettype) = 2;

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog') GROUP BY T1.fname HAVING COUNT(DISTINCT T3.pettype) = 2;

SELECT major, age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM has_pet AS T1 INNER JOIN pets AS T2 ON T1.petid = T2.petid WHERE pettype = 'Cat');

SELECT s.major, s.age FROM student s LEFT JOIN has_pet hp ON s.stuid = hp.stuid WHERE hp.petid IS NULL AND s.sex = 'F';

SELECT stuid FROM student WHERE NOT stuid IN ( SELECT T1.stuid FROM has_pet AS T1 INNER JOIN pets AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'Cat' );

SELECT stuid FROM student WHERE NOT stuid IN ( SELECT T1.stuid FROM has_pet AS T1 INNER JOIN pets AS T2 ON T1.petid = T2.petid WHERE T2.pettype = 'Cat' );

SELECT DISTINCT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' AND NOT EXISTS (SELECT * FROM has_pet AS T4 WHERE T4.stuid = T2.stuid AND T4.petid IN (SELECT petid FROM pets WHERE pettype = 'cat'));

SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' AND NOT EXISTS (SELECT * FROM pets AS T4 WHERE T4.pettype = 'cat' AND T4.petid = T3.petid);

SELECT pettype, weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT pettype, weight FROM pets WHERE pet_age = ( SELECT MIN(pet_age) FROM pets );

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT p.pettype, AVG(p.pet_age) AS avg_age, MAX(p.pet_age) AS max_age FROM pets p GROUP BY p.pettype;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;

SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid;

SELECT DISTINCT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid;

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT COUNT(DISTINCT T2.petid), T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid;

SELECT sp.stuid, COUNT(sp.petid) FROM student sp JOIN has_pet hp ON sp.stuid = hp.stuid GROUP BY sp.stuid;

SELECT DISTINCT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1;

SELECT DISTINCT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1;

SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.age = 3 AND T3.pettype = 'Cat' LIMIT 1;

SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'Cat' AND T1.age = ( SELECT MAX(age) FROM student );

SELECT AVG(age) FROM student s WHERE NOT EXISTS (SELECT * FROM has_pet h WHERE h.stuid = s.stuid);

SELECT AVG(s.age) FROM student s LEFT JOIN has_pet h ON s.stuid = h.stuid WHERE h.petid IS NULL;

SELECT COUNT(continent) FROM continents;

SELECT COUNT(contid) FROM continents;

SELECT T.continent, COUNT(DISTINCT T.countryid) AS num_countries FROM countries AS T GROUP BY T.continent;

SELECT c.continent, COUNT(DISTINCT co.countryid) AS num_countries FROM continents c INNER JOIN countries co ON c.contid = co.continent GROUP BY c.continent;

SELECT COUNT(DISTINCT c.countryid) FROM countries c;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT T3.make, COUNT(T2.model), T2.id, T2.fullname FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker INNER JOIN car_names AS T3 ON T2.model = T3.model GROUP BY T3.make;

SELECT T.id, T.make, COUNT(T2.model) FROM car_makers AS T LEFT JOIN model_list AS T2 ON T.id = T2.maker GROUP BY T.id;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.horsepower ASC LIMIT 1;

SELECT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.modelid ORDER BY T1.horsepower ASC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.make = T2.make WHERE T2.weight < ( SELECT AVG(weight) FROM cars_data );

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.make = T2.id WHERE T2.weight < ( SELECT AVG(weight) FROM cars_data );

SELECT DISTINCT T.make FROM car_names AS T WHERE T.year = 1970;

SELECT DISTINCT T.make FROM car_names AS T WHERE T.year = 1970;

SELECT DISTINCT T3.make, T2.year FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id INNER JOIN car_makers AS T3 ON T2.id = T3.id ORDER BY T2.year LIMIT 1;

SELECT T.make, T.year FROM cars_data AS T ORDER BY T.year ASC LIMIT 1;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.year > 1980;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.year > 1980;

SELECT c.continent, COUNT(cm.id) FROM car_makers cm JOIN countries c ON cm.country = c.countryid GROUP BY c.continent;

SELECT c.continent, COUNT(cm.id) FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid GROUP BY c.continent;

SELECT T.countryname FROM ( SELECT COUNT(T3.id) AS num, T1.countryname FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country INNER JOIN model_list AS T3 ON T2.id = T3.maker GROUP BY T1.countryname ) AS T ORDER BY T.num DESC LIMIT 1;

SELECT T3.countryname FROM ( SELECT COUNT(*) AS num , T1.make, T3.continent FROM car_names AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN continents AS T3 ON T2.continent = T3.contid GROUP BY T1.make, T3.continent ORDER BY num DESC LIMIT 1 ) AS T4;

SELECT COUNT(*), T1.fullname FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.fullname;

SELECT m.make, COUNT(ml.modelid), m.id, m.fullname FROM car_makers m LEFT JOIN model_list ml ON m.id = ml.maker GROUP BY m.make;

SELECT T1.accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'AMC Hornet Sportabout (SW)';

SELECT T1.accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'AMC' AND T2.model = 'Hornet Sportabout (SW)';

SELECT COUNT(*) FROM car_makers WHERE country = ( SELECT countryid FROM countries WHERE countryname = 'France' );

SELECT COUNT(DISTINCT T3.make) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country JOIN car_names AS T3 ON T2.id = T3.make WHERE T1.continent = 2;

SELECT COUNT(*) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.country = 3;

SELECT COUNT(T2.model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.country = ( SELECT countryid FROM countries WHERE countryname = 'United States' );

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT DISTINCT T3.make, T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker INNER JOIN car_names AS T3 ON T2.model = T3.model;

SELECT DISTINCT T3.make, T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker INNER JOIN car_names AS T3 ON T2.model = T3.model;

SELECT DISTINCT T2.countryname, T1.id FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid;

SELECT DISTINCT T2.countryname, T3.countryid FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN continents AS T3 ON T2.continent = T3.contid;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT year, AVG(weight) FROM cars_data GROUP BY year;

SELECT year, AVG(weight), COUNT(*) FROM cars_data GROUP BY year;

SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = (SELECT continent FROM continents WHERE continent = 'Europe') GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3;

SELECT c.countryname FROM countries c JOIN car_makers cm ON c.countryid = cm.country WHERE c.continent = (SELECT continent FROM continents WHERE continent = 'Europe') GROUP BY c.countryname HAVING COUNT(DISTINCT cm.maker) >= 3;

SELECT MAX(T1.horsepower), T2.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.cylinders = 3;

SELECT T.make, MAX(T.horsepower) FROM cars_data AS T WHERE T.cylinders = 3 GROUP BY T.make;

SELECT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker ORDER BY T1.maker DESC LIMIT 1;

SELECT T1.model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.makeid = T2.id ORDER BY T2.mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(T1.edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.model = 'volvo';

SELECT AVG(T1.edispl) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'Volvo';

SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;

SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;

SELECT T1.model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model GROUP BY T2.make ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model GROUP BY T1.model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(DISTINCT T1.model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id WHERE T2.fullname = 'American Motor Company';

SELECT COUNT(*) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id WHERE T2.fullname = 'American Motor Company';

SELECT T1.fullname, T1.id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING COUNT(T2.model) > 3;

SELECT DISTINCT T2.make, T2.id FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.model = T2.model GROUP BY T2.make HAVING COUNT(*) > 3;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.fullname = 'General Motors' OR T1.weight > 3500;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.fullname = 'General Motors' OR T1.weight > 3500;

SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.weight BETWEEN 3000 AND 4000;

SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid WHERE T1.weight < 4000 OR T1.weight > 3000;

SELECT T1.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid ORDER BY T1.accelerate DESC LIMIT 1;

SELECT T1.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid ORDER BY T1.accelerate DESC LIMIT 1;

SELECT T1.cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.model = 'volvo' ORDER BY T1.accelerate LIMIT 1;

SELECT T1.cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T2.make = 'volvo' ORDER BY T1.accelerate LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(DISTINCT c.countryid) FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) > 2;

SELECT COUNT(DISTINCT c.countryid) FROM ( SELECT DISTINCT T3.countryid FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN car_names AS T3 ON T1.id = T3.makeid GROUP BY T3.makeid HAVING COUNT(*) > 2 ) c;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.model = T2.model WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;

SELECT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.model = T2.model WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;

SELECT DISTINCT T2.makeid, T2.make FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.model = T2.model WHERE T2.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND T2.cylinders <= 3;

SELECT DISTINCT T2.makeid, T2.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.horsepower > ( SELECT MIN(horsepower) FROM cars_data ) AND T1.cylinders < 4;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT DISTINCT T2.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.weight < 3500 AND T2.make != 'Ford Motor Company';

SELECT DISTINCT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.model WHERE T1.weight < 3500 AND T2.maker != 'Ford';

SELECT DISTINCT c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country WHERE cm.id IS NULL;

SELECT c.countryname FROM countries c LEFT JOIN car_makers cm ON c.countryid = cm.country WHERE cm.id IS NULL;

SELECT DISTINCT maker, id FROM car_makers WHERE maker IN ( SELECT maker FROM model_list GROUP BY maker HAVING COUNT(model) >= 2 ) AND id IN ( SELECT maker FROM car_makers GROUP BY maker HAVING COUNT(maker) > 3 );

SELECT DISTINCT T.id, T.make FROM ( SELECT T1.id, T1.make FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id HAVING COUNT(DISTINCT T2.model) >= 2 ) AS T INNER JOIN cars_data AS T2 ON T.make = T2.make GROUP BY T.make HAVING COUNT(T2.id) > 3;

SELECT DISTINCT c.countryid, c.countryname FROM car_makers cm INNER JOIN countries c ON cm.country = c.countryid WHERE cm.id IN ( SELECT maker FROM model_list WHERE model = 'fiat' ) GROUP BY c.countryid HAVING COUNT(DISTINCT cm.maker) > 3;

SELECT DISTINCT c.countryid, c.countryname FROM countries c WHERE c.continent IN (SELECT continent FROM (SELECT DISTINCT continent FROM car_makers GROUP BY continent HAVING COUNT(maker) > 3 UNION SELECT 'conti' AS continent FROM model_list WHERE model = 'fiat') t);

SELECT country FROM airlines WHERE airline = 'JetBlue Airways';

SELECT country FROM airlines WHERE airline = 'Jetblue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(*) FROM airlines;

SELECT COUNT(DISTINCT airportcode) FROM airports;

SELECT COUNT(DISTINCT airportcode) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT city, country FROM airports WHERE airportname = 'Alton';

SELECT city, country FROM airports WHERE airportname = 'Alton';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE city = 'Aberdeen';

SELECT airportname FROM airports WHERE city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE sourceairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE sourceairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE sourceairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' ) AND destairport IN ( SELECT airportcode FROM airports WHERE city = 'Ashley' );

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABY' AND destairport = 'ASH';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN ( SELECT airportcode FROM airports WHERE airportname = 'ASY' );

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY Airport';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' );

SELECT t2.city FROM flights AS t1 INNER JOIN airports AS t2 ON t1.destairport = t2.airportcode GROUP BY t2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.airportcode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.airportcode ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.airportcode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.airportcode ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.airportcode FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.airportcode ORDER BY COUNT(*) ASC LIMIT 1;

SELECT T1.airportcode FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport GROUP BY T1.airportcode ORDER BY COUNT(*) LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airline, COUNT(*) AS numflights FROM flights GROUP BY airline ORDER BY numflights DESC LIMIT 1;

SELECT T1.abbreviation, T1.country FROM airlines AS T1 INNER JOIN flights AS t2 ON T1.airline = T2.airline GROUP BY T1.airline ORDER BY COUNT(*) LIMIT 1;

SELECT T1.abbreviation, T3.country FROM airlines AS T1 JOIN flights AS T2 ON T1.airline = T2.airline JOIN airports AS T3 ON T2.sourceairport = T3.airportcode GROUP BY T1.abbreviation ORDER BY COUNT(*) LIMIT 1;

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destinationairport = T2.airportcode WHERE T2.airportname = 'AHD';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.airportname = 'AHD';

SELECT airline FROM flights WHERE sourceairport = 'APG' INTERSECT SELECT airline FROM flights WHERE destairport = 'CVO';

SELECT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city IN ('APG', 'CVO') GROUP BY T1.airline HAVING COUNT(DISTINCT T2.airportcode) = 2;

SELECT airline FROM flights WHERE sourceairport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'APG');

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND NOT EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'APG');

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.airportname = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destinationairport = T2.airportcode WHERE T2.airportname = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city = 'APG';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen ';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destinationairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT T1.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destinationairport = T2.airportcode WHERE T2.city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' ), ( SELECT airportcode FROM airports WHERE city = 'Abilene' );

SELECT COUNT(*) FROM flights WHERE destairport IN ( SELECT airportcode FROM airports WHERE city = 'Aberdeen' UNION SELECT airportcode FROM airports WHERE city = 'Abilene' );

SELECT DISTINCT T2.airportname FROM airports AS T1 LEFT JOIN flights AS T2 ON T1.airportcode = T2.sourceairport OR T1.airportcode = T2.destairport WHERE T2.flightno IS NULL;

SELECT DISTINCT T2.airportcode FROM airports AS T1 LEFT JOIN flights AS T2 ON T1.airportcode = T2.sourceairport OR T1.airportcode = T2.destairport WHERE T2.flightno IS NULL;

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age ASC;

SELECT name FROM employee ORDER BY age ASC;

SELECT city, COUNT(*) FROM employee GROUP BY city;

SELECT city, COUNT(*) FROM employee GROUP BY city;

SELECT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(*) > 1;

SELECT city FROM employee AS e1 INNER JOIN hiring AS h ON e1.employee_id = h.employee_id WHERE e1.age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT location, COUNT(*) FROM shop GROUP BY location;

SELECT location, COUNT(*) FROM shop GROUP BY location;

SELECT T2.manager_name, T2.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T1.number_products = (SELECT MAX(number_products) FROM shop);

SELECT T2.manager_name, T2.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T1.number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(ev.year_awarded) DESC LIMIT 1;

SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id ORDER BY T2.bonus DESC LIMIT 1;

SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id ORDER BY T2.bonus DESC LIMIT 1;

SELECT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.year_awarded IS NULL;

SELECT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.employee_id IS NULL;

SELECT T1.name FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);

SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);

SELECT T1.name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T2.employee_id IS NULL;

SELECT T3.name AS shop_name, COUNT(*) FROM hiring AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id INNER JOIN shop AS T3 ON T1.shop_id = T3.shop_id GROUP BY T3.name;

SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_employees FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) FROM evaluation;

SELECT * FROM hiring;

SELECT * FROM hiring;

SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;

SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(document_id) FROM documents;

SELECT COUNT(document_id) FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT document_id, document_name, other_details FROM documents;

SELECT t1.document_name, t2.template_id FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id WHERE t1.document_description LIKE '%w%';

SELECT t.document_name, t.template_id FROM documents t WHERE t.document_description LIKE '%w%';

SELECT t.document_id, t.template_id, d.document_description FROM documents t INNER JOIN paragraphs p ON t.document_id = p.document_id WHERE p.paragraph_text LIKE 'Robbin%';

SELECT t.document_id, t.template_id, d.document_description FROM documents t INNER JOIN paragraphs p ON t.document_id = p.document_id WHERE p.paragraph_text LIKE 'Robbin%';

SELECT COUNT(DISTINCT t1.template_id) FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id;

SELECT COUNT(DISTINCT t1.template_id) FROM documents AS t1 INNER JOIN templates AS t2 ON t1.template_id = t2.template_id;

SELECT COUNT(T1.document_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'PPT';

SELECT COUNT(T1.document_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T2.template_type_code = 'PPT';

SELECT t.template_id, COUNT(d.document_id) FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;

SELECT t1.template_id, COUNT(t1.document_id) FROM documents AS t1 GROUP BY t1.template_id;

SELECT t1.template_id, t1.template_type_code FROM templates t1 INNER JOIN documents d ON t1.template_id = d.template_id GROUP BY t1.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT t1.template_id, t1.template_type_code FROM templates t1 INNER JOIN documents d ON t1.template_id = d.template_id GROUP BY t1.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT DISTINCT t1.template_id FROM templates t1 INNER JOIN documents d ON t1.template_id = d.template_id GROUP BY t1.template_id HAVING COUNT(d.document_id) > 1;

SELECT t1.template_id FROM documents AS t1 INNER JOIN paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.template_id HAVING COUNT(t2.paragraph_id) > 1;

SELECT DISTINCT T1.template_id FROM templates AS T1 LEFT JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_id IS NULL;

SELECT DISTINCT T1.template_id FROM templates AS T1 LEFT JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_id IS NULL;

SELECT COUNT(DISTINCT t1.template_id) FROM templates t1;

SELECT COUNT(*) FROM templates;

SELECT DISTINCT template_id, version_number, template_type_code FROM templates;

SELECT t1.template_id, t1.version_number, t2.template_type_code FROM documents AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code;

SELECT DISTINCT template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM ref_template_types;

SELECT DISTINCT t.template_id FROM templates t WHERE t.template_type_code IN ('PP', 'PPT');

SELECT DISTINCT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT t1.template_type_code, COUNT(t2.document_id) FROM ref_template_types t1 LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code;

SELECT t1.template_type_code, COUNT(t2.document_id) FROM ref_template_types t1 LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code;

SELECT t1.template_type_code FROM templates AS t1 INNER JOIN ref_template_types AS t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code ORDER BY COUNT(t1.template_type_code) DESC LIMIT 1;

SELECT t1.template_type_code FROM ref_template_types AS t1 INNER JOIN ( SELECT COUNT(*) AS num , t1.template_type_code FROM ref_template_types t1 INNER JOIN templates t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code ORDER BY num DESC LIMIT 1 ) AS t3 ON t1.template_type_code = t3.t1;

SELECT DISTINCT t1.template_type_code FROM ref_template_types t1 INNER JOIN ( SELECT COUNT(*) AS cnt FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3 ) AS t2 ON t1.template_type_code = t2.cnt;

SELECT t1.template_type_code FROM ref_template_types t1 INNER JOIN ( SELECT COUNT(*) AS num FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3 ) AS t2 ON t1.template_type_code = t2.template_type_code;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY version_number,template_type_code;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY version_number, template_type_code;

SELECT T1.template_type_code FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base';

SELECT DISTINCT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code INNER JOIN documents AS T3 ON T2.template_id = T3.template_id WHERE T3.document_name = 'Data base';

SELECT t.document_name FROM documents t INNER JOIN templates s ON t.template_id = s.template_id WHERE s.template_type_code = 'BK';

SELECT t.document_name FROM documents t WHERE t.template_id IN ( SELECT ojek_id FROM order_jek WHERE jek_type = 'BK' );

SELECT t1.template_type_code, COUNT(t3.document_id) FROM ref_template_types t1 INNER JOIN templates t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents t3 ON t2.template_id = t3.template_id GROUP BY t1.template_type_code;

SELECT t1.template_type_code, COUNT(t3.document_id) FROM ref_template_types t1 INNER JOIN templates t2 ON t1.template_type_code = t2.template_type_code INNER JOIN documents t3 ON t2.template_id = t3.template_id GROUP BY t1.template_type_code;

SELECT t1.template_type_code FROM templates AS t1 INNER JOIN documents AS t2 ON t1.template_id = t2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(t2.document_id) DESC LIMIT 1;

SELECT t1.template_type_code FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code GROUP BY t1.template_type_code ORDER BY COUNT(t1.template_type_code) DESC LIMIT 1;

SELECT DISTINCT t1.template_type_code FROM ref_template_types t1 LEFT JOIN documents d ON t1.template_type_code = d.template_id WHERE d.document_id IS NULL;

SELECT t1.template_type_code FROM ref_template_types t1 LEFT JOIN templates t2 ON t1.template_type_code = t2.template_type_code WHERE t2.template_id IS NULL;

SELECT * FROM ref_template_types;

SELECT DISTINCT t1.template_type_code, t1.template_type_description FROM ref_template_types AS t1 INNER JOIN templates AS t2 ON t1.template_type_code = t2.template_type_code;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT T1.template_type_description FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code;

SELECT DISTINCT T1.template_type_description FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code INNER JOIN documents AS T3 ON T2.template_id = T3.template_id;

SELECT t.template_id FROM templates t INNER JOIN ref_template_types r ON t.template_type_code = r.template_type_code WHERE r.template_type_description = 'Presentation';

SELECT DISTINCT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation';

SELECT COUNT(paragraph_id) FROM paragraphs;

SELECT COUNT(paragraph_id) FROM paragraphs;

SELECT COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Summer Show';

SELECT COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Summer Show';

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT T1.* FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text LIKE '%Korea%';

SELECT T1.paragraph_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T1.paragraph_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews';

SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, document_name, COUNT(paragraph_id) FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY document_id;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id, document_name FROM documents WHERE ( SELECT COUNT(paragraph_id) FROM paragraphs WHERE document_id = documents.document_id ) = ( SELECT MAX(count_paragraphs) FROM ( SELECT document_id, COUNT(paragraph_id) AS count_paragraphs FROM paragraphs GROUP BY document_id ) AS subquery );

SELECT document_id, COUNT(paragraph_id) AS num_of_paragras FROM paragraphs GROUP BY document_id ORDER BY num_of_paragras DESC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(teacher_id) FROM teacher;

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT name FROM teacher ORDER BY age;

SELECT name FROM teacher ORDER BY age;

SELECT t.age, t.hometown FROM teacher t;

SELECT t.age, t.hometown FROM teacher t;

SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District';

SELECT T2.name FROM course AS T1 INNER JOIN teacher AS T2 ON T1.course_id = T2.teacher_id WHERE T2.hometown <> 'Little Lever Urban District';

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT hometown FROM teacher ORDER BY age LIMIT 1;

SELECT hometown FROM teacher ORDER BY age LIMIT 1;

SELECT t.hometown, COUNT(t.teacher_id) FROM teacher t GROUP BY t.hometown;

SELECT t.hometown, COUNT(t.teacher_id) FROM teacher t GROUP BY t.hometown;

SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;

SELECT T3.name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id;

SELECT t.name, c.course FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id INNER JOIN course c ON ca.course_id = c.course_id;

SELECT T3.name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id ORDER BY T3.name;

SELECT T3.name AS teacher_name, T2.course FROM course_arrange AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T1.teacher_id = T3.teacher_id ORDER BY T3.name;

SELECT T3.name FROM course AS T1 INNER JOIN course_arrange AS T2 ON T1.course_id = T2.course_id INNER JOIN teacher AS T3 ON T2.teacher_id = T3.teacher_id WHERE T1.course = 'Math';

SELECT DISTINCT T2.name FROM course AS T1 INNER JOIN teacher AS T2 ON T1.course_id = T2.teacher_id WHERE T1.course LIKE '%math%';

SELECT t.name, COUNT(ca.course_id) FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.course_id) FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id HAVING COUNT(*) >= 2;

SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.name HAVING COUNT(*) >= 2;

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.teacher_id IS NULL;

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.course_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT T1.name FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.level_of_membership > '4' ORDER BY T1.level_of_membership DESC;

SELECT AVG(age) FROM visitor WHERE level_of_membership <= '4';

SELECT T3.name, T3.level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id INNER JOIN museum AS T3 ON T2.museum_id = T3.museum_id WHERE T3.num_of_staff > 50 GROUP BY T3.name, T3.level_of_membership ORDER BY T1.age DESC;

SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010 );

SELECT T3.id, T3.name, T3.age FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id INNER JOIN visitor AS T3 ON T1.visitor_id = T3.id GROUP BY T1.visitor_id HAVING COUNT(T1.museum_id) > 1;

SELECT T3.id, T3.name, T3.level_of_membership FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id INNER JOIN visitor AS T3 ON T1.visitor_id = T3.id ORDER BY T1.total_spent DESC LIMIT 1;

SELECT T2.museum_id, T2.name FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id GROUP BY T2.museum_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);

SELECT T3.name, T3.age FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id INNER JOIN visitor AS T3 ON T1.visitor_id = T3.id ORDER BY T1.num_of_ticket DESC LIMIT 1;

SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;

SELECT SUM(total_spent) FROM visit WHERE visitor_id IN ( SELECT id FROM visitor WHERE level_of_membership = 'Level_1' );

SELECT T3.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id INNER JOIN visitor AS T3 ON T2.visitor_id = T3.id WHERE T1.open_year < 2009 AND T1.open_year > 2011;

SELECT COUNT(visitor.id) FROM visitor LEFT JOIN visit ON visitor.id = visit.visitor_id WHERE visit.museum_id IS NULL AND visitor.open_year > 2010;

SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;

SELECT COUNT(DISTINCT T1.player_id) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(T1.loser_age), AVG(T1.winner_age) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id OR T1.loser_id = T2.player_id;

SELECT AVG(T1.winner_rank) FROM ( SELECT winner_rank FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ) AS T3;

SELECT AVG(T1.winner_rank) FROM ( SELECT winner_rank FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ) AS T3;

SELECT MAX(T2.loser_rank) FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id;

SELECT MAX(T2.loser_rank) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;

SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016);

SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016) GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.year) = 2;

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE strftime('%Y', tourney_date) IN ('2013', '2016');

SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_name WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.country_code, T1.first_name HAVING COUNT(DISTINCT T2.tourney_name) = 2;

SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner WHERE T2.tournament_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.tournament_name) = 2;

SELECT first_name, country_code FROM players WHERE birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 1;

SELECT first_name, country_code FROM players WHERE birth_date IS NOT NULL ORDER BY birth_date ASC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(DISTINCT T2.ranking) DESC LIMIT 1;

SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT winner_name, winner_rank_points FROM matches AS T1 INNER JOIN winners AS T2 ON T1.match_num = T2.match_num GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.first_name, T1.last_name , SUM(T3.ranking_points) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.match_num) DESC LIMIT 1;

SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open' );

SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open' );

SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id ORDER BY T2.minutes DESC LIMIT 1;

SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id ORDER BY T2.minutes DESC LIMIT 1;

SELECT p.first_name, AVG(T2.ranking) FROM players AS p INNER JOIN rankings AS T2 ON p.player_id = T2.player_id GROUP BY p.player_id;

SELECT T1.first_name, AVG(T3.ranking_points) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.player_id;

SELECT T1.first_name, SUM(T3.ranking_points) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.player_id;

SELECT T1.first_name, SUM(T3.ranking_points) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.player_id;

SELECT COUNT(DISTINCT T1.player_id), T3.country FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN countries AS T3 ON T1.country_code = T3.country_code GROUP BY T3.country;

SELECT COUNT(DISTINCT T1.country_code), T2.first_name, T2.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.first_name, T2.last_name;

SELECT T.country_code FROM ( SELECT COUNT(T1.player_id), T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.country_code ORDER BY COUNT(T1.player_id) DESC LIMIT 1 ) AS T;

SELECT T2.country_code FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id GROUP BY T2.country_code ORDER BY COUNT(T2.country_code) DESC LIMIT 1;

SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;

SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;

SELECT year, COUNT(match_num) FROM matches GROUP BY year;

SELECT year, COUNT(match_num) FROM matches GROUP BY year;

SELECT T1.first_name, T1.last_name, T2.rank FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.year + (CAST(T1.birth_date AS DATE)) LIMIT 3;

SELECT T1.first_name, T1.last_name, T2.rank FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.year ASC LIMIT 3;

SELECT COUNT(DISTINCT T1.player_id) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name LIKE 'WTA Championships%' AND T2.hand = 'L';

SELECT COUNT(T1.player_id) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name LIKE 'WTA Championships' AND T2.hand = 'L';

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking_points = ( SELECT MAX(ranking_points) FROM rankings );

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_points DESC LIMIT 1;

SELECT winner_hand, COUNT(winner_id) FROM matches GROUP BY winner_hand;

SELECT COUNT(DISTINCT player_id), winner_hand FROM matches GROUP BY winner_hand;

SELECT COUNT(*) FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T1.result = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name DESC;

SELECT b.name, b.date, b.result FROM battle b;

SELECT MAX(killed + injured) AS max_death_toll, MIN(killed + injured) AS min_death_toll FROM death GROUP BY caused_by_ship_id;

SELECT AVG(injured) FROM death GROUP BY caused_by_ship_id;

SELECT d.note FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';

SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';

SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';

SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id WHERE d.killed > 10 GROUP BY b.id;

SELECT d.id, s.name, SUM(d.injured) as total_injuries FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.id ORDER BY total_injuries DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225);

SELECT T3.name, T3.date FROM ship AS T1 INNER JOIN battle AS T2 ON T1.lost_in_battle = T2.id INNER JOIN ship AS T3 ON T1.id = T3.id WHERE T1.name = 'Lettice' AND T3.name = 'HMS Atalanta';

SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location NOT LIKE '%English Channel%' GROUP BY b.name, b.result, b.bulgarian_commander;

SELECT note FROM death WHERE note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(course_id) FROM courses;

SELECT COUNT(course_id) FROM courses;

SELECT course_description FROM courses WHERE course_name = 'Mathematics';

SELECT T1.course_description FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id WHERE T1.department_id IN ( SELECT department_id FROM degree_programs WHERE degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name LIKE '%Math%' ) );

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT department_name, department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1;

SELECT T2.department_name, COUNT(T1.degree_program_id) AS num FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY num DESC LIMIT 1;

SELECT COUNT(DISTINCT department_id) FROM degree_programs;

SELECT COUNT(DISTINCT T.department_id) FROM degree_programs AS T;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;

SELECT COUNT(T2.degree_program_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE 'Engineering%';

SELECT COUNT(T2.degree_program_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE 'Engineering%';

SELECT section_name, section_description FROM sections;

SELECT section_name, section_description FROM sections;

SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) <= 2;

SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2;

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT T1.semester_name, T1.semester_id FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_name ORDER BY COUNT(T1.semester_name) DESC LIMIT 1;

SELECT T2.semester_name, T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id IN (1, 2) GROUP BY T1.student_id;

SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_program_id IN (1, 2) GROUP BY T1.student_id;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors';

SELECT T2.degree_program_id FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.degree_program_id, T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.degree_program_id, T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;

<think>  </think>  SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS num_enrollments FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id, COUNT(T2.student_id) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT T.semester_name FROM semesters AS T LEFT JOIN student_enrolment AS U ON T.semester_id = U.semester_id WHERE U.student_id IS NULL;

SELECT T2.semester_name FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.student_id IS NULL GROUP BY T2.semester_name;

SELECT DISTINCT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id;

SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name;

SELECT T4.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN courses AS T3 ON T2.course_id = T3.course_id INNER JOIN ( SELECT course_id, COUNT(*) FROM student_enrolment GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS T4 ON T3.course_id = T4.course_id;

SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT T1.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN ( SELECT student_id FROM student_enrolment );

SELECT T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.state_province_county = 'North Carolina' AND T2.degree_program_id IS NULL;

SELECT T.transcript_date FROM ( SELECT DISTINCT ON (T1.student_course_id) student_course_id, COUNT(*) AS num FROM student_enrolment_courses AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY student_course_id ) AS T WHERE T.num > 2;

<think>  </think>  SELECT T.transcript_date, T.transcript_id FROM ( SELECT DISTINCT ON (transcript_id) student_course_id, COUNT(course_id) AS num_courses FROM student_enrolment_courses GROUP BY student_course_id ) T WHERE num_courses > 1;

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id ORDER BY T1.date_left LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.semester_id IN ( SELECT MIN(semester_id) FROM semesters ) ORDER BY T1.date_left LIMIT 1;

SELECT T1.first_name FROM students AS T1 INNER JOIN permanent_addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id IS NOT NULL AND T2.address_id IS NOT NULL;

SELECT T1.first_name FROM students AS T1 INNER JOIN permanent_addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id IS NOT NULL AND T2.address_id IS NOT NULL;

<think>  </think>  SELECT address_id, line_1, line_2, line_3 FROM addresses WHERE address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(current_address_id) DESC LIMIT 1 );

SELECT address_id, line_1, line_2 FROM addresses GROUP BY address_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(DATEDIFF('day', T1.transcript_date, '2014-07-01')) FROM transcripts AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.transcript_id = T2.student_course_id;

SELECT AVG(CAST(SUBSTR(transcript_date, 1, 4) AS INT)) FROM transcripts;

SELECT MIN(transcript_date), other_details FROM transcripts GROUP BY other_details;

SELECT MIN(T1.transcript_date), T1.other_details FROM transcripts AS T1 INNER JOIN student_enrolment AS T2 ON T1.transcript_id = T2.student_enrolment_id GROUP BY T1.transcript_id;

SELECT COUNT(transcript_id) FROM transcripts WHERE transcript_date >= '2010-01-01' AND transcript_date < '2011-01-01';

SELECT COUNT(transcript_id) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT COUNT(DISTINCT T2.transcript_id), T2.student_enrolment_id FROM student_enrolment AS T1 INNER JOIN transcripts AS T2 ON T2.student_id = T1.student_id GROUP BY T2.student_enrolment_id ORDER BY COUNT(DISTINCT T2.transcript_id) DESC LIMIT 1;

SELECT COUNT(DISTINCT T2.transcript_id), T1.student_enrolment_id FROM student_enrolment AS T1 INNER JOIN transcript_contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_enrolment_id ORDER BY COUNT(DISTINCT T2.transcript_id) DESC LIMIT 1;

SELECT T1.transcript_date, T1.transcript_id FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) LIMIT 1;

SELECT t.transcript_date, t.transcript_id FROM transcripts t ORDER BY COUNT(t.transcript_id) LIMIT 1;

SELECT T1.semester_name FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor', SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master' ) GROUP BY T1.semester_name;

SELECT T2.semester_id FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T2.semester_id;

SELECT COUNT(DISTINCT T1.address_id) FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id;

SELECT DISTINCT line_1, line_2, line_3 FROM addresses;

SELECT * FROM students ORDER BY last_name DESC, first_name DESC;

SELECT other_details FROM students ORDER BY last_name DESC;

SELECT section_description FROM sections WHERE section_name = 'H';

SELECT section_description FROM sections WHERE section_name = 'H';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title ASC;

SELECT title FROM cartoon ORDER BY title ASC;

SELECT * FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT t.title, t.directed_by, t.original_air_date FROM cartoon t ORDER BY t.original_air_date;

SELECT t.title, t.directed_by FROM tv_series t ORDER BY t.air_date;

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT country, COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT COUNT(*) FROM tv_channel WHERE language = 'english';

SELECT COUNT(*) FROM tv_channel WHERE language = 'english';

SELECT language, COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) LIMIT 1;

SELECT t.language, COUNT(t.id) as num_channels FROM tv_channel t GROUP BY t.language ORDER BY num_channels LIMIT 1;

SELECT language, COUNT(*) FROM tv_channel GROUP BY language;

SELECT language, COUNT(*) FROM tv_channel GROUP BY language;

SELECT t.series_name FROM tv_channel t JOIN cartoon c ON t.id = c.channel WHERE c.title = 'The Rise of the Blue Beetle!';

SELECT DISTINCT T1.series_name FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.title = 'The Rise of the Blue Beetle';

SELECT DISTINCT t.title FROM tv_channel tc JOIN tv_series ts ON tc.id = ts.channel JOIN cartoon t ON ts.channel = t.channel WHERE tc.series_name = 'Sky Radio';

SELECT t.title FROM tv_series s JOIN cartoon t ON s.channel = t.channel WHERE s.series_name = 'Sky Radio';

SELECT T1.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id ORDER BY T1.rating DESC;

SELECT episode FROM tv_series ORDER BY rating DESC;

SELECT episode, rating FROM tv_series WHERE rating IN ( SELECT MAX(rating) FROM tv_series ) LIMIT 3;

SELECT episode, rating FROM tv_series WHERE rating IN ( SELECT MAX(rating) FROM tv_series ) LIMIT 3;

SELECT MIN(t.share), MAX(t.share) FROM tv_series t;

SELECT MAX(t.share), MIN(t.share) FROM tv_series t;

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT DISTINCT T2.series_name FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime';

SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime');

SELECT DISTINCT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio';

SELECT T2.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio';

SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by;

SELECT d.directed_by, COUNT(c.id) FROM tv_director d JOIN cartoon c ON d.id = c.director_id GROUP BY d.directed_by;

SELECT t.production_code, t.channel FROM cartoon t ORDER BY t.air_date DESC LIMIT 1;

SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon);

SELECT DISTINCT t.package_option, t.series_name FROM tv_channel t WHERE t.hight_definition_tv = TRUE;

SELECT DISTINCT package_option, series_name FROM tv_channel WHERE hight_definition_tv = TRUE;

SELECT DISTINCT T2.country FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id INNER JOIN cartoon AS T3 ON T3.channel = T2.id WHERE T3.written_by = 'Todd Casey';

SELECT DISTINCT t.country FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel INNER JOIN cartoon c ON t.id = c.channel WHERE c.written_by = 'Todd Casey';

SELECT DISTINCT T2.country FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id LEFT JOIN cartoon AS T3 ON T3.channel = T2.id WHERE T3.directed_by IS NULL AND T3.written_by = 'Todd Casey';

SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT DISTINCT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' AND T2.written_by = 'Michael Chang';

SELECT DISTINCT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' OR T2.directed_by = 'Michael Chang';

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'english';

SELECT t.pixel_aspect_ratio_par, t.country FROM tv_channel t WHERE t.language != 'english';

SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2;

SELECT channel FROM tv_channel GROUP BY channel HAVING COUNT(*) > 2;

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT DISTINCT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT DISTINCT T1.package_option FROM tv_channel AS T1 LEFT JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by IS NULL;

SELECT COUNT(poker_player_id) FROM poker_player;

SELECT COUNT(poker_player_id) FROM poker_player;

SELECT * FROM poker_player ORDER BY earnings DESC;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT AVG(earnings) FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player );

SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player );

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000;

SELECT name FROM poker_player ORDER BY final_table_made ASC;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.final_table_made ASC;

SELECT T1.birth_date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T2.earnings LIMIT 1;

SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings LIMIT 1;

SELECT T2.money_rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T1.height DESC LIMIT 1;

SELECT T2.money_rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T1.height DESC LIMIT 1;

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC;

SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC;

SELECT p.nationality, COUNT(p.people_id) AS num_people FROM people p GROUP BY p.nationality;

SELECT nationality, COUNT(nationality) FROM people GROUP BY nationality;

SELECT nationality, COUNT(nationality) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT people_id) >= 2;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name FROM people WHERE nationality <> 'Russia';

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM area_code_state;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT vote_id, phone_number, state FROM votes;

SELECT MAX(area_code), MIN(area_code) FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT T2.state, T1.created FROM votes AS T1 INNER JOIN area_code_state AS T2 ON T1.state = T2.state;

SELECT T.contestant_number, T.contestant_name FROM contestants AS T GROUP BY T.contestant_number HAVING COUNT(*) >= 2;

SELECT t.contestant_number, t.contestant_name FROM ( SELECT contestant_number, COUNT(*) AS num_votes FROM votes GROUP BY contestant_number ORDER BY num_votes ASC LIMIT 1 ) t;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);

SELECT T2.area_code FROM votes AS T1 INNER JOIN area_code_state AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.created, T1.state, T1.phone_number FROM votes AS T1 INNER JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling';

SELECT T1.area_code FROM area_code_state AS T1 INNER JOIN votes AS T2 ON T1.area_code = T2.state WHERE T2.contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') AND T2.contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss');

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT name FROM country WHERE indepyear > 1950;

SELECT name FROM country WHERE indepyear > 1950;

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean';

SELECT continent FROM country WHERE localname = 'Anguilla';

SELECT T.continent FROM country AS T WHERE T.code = 'AGU';

SELECT T1.region FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Kabul';

SELECT T1.region FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Kabul';

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba' ORDER BY T1.percentage DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba' ORDER BY T1.percentage DESC LIMIT 1;

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT region, population FROM country WHERE name = 'Angola';

SELECT T1.region, T1.population FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Angola';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Central Africa';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Central African' AND T2.isofficial = TRUE;

SELECT name FROM country WHERE lifeexpectancy = ( SELECT MIN(lifeexpectancy) FROM country WHERE region = 'Asia' );

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;

SELECT SUM(population), MAX(gnp) FROM country WHERE region = 'Asia';

SELECT SUM(population), MAX(gnp) FROM country WHERE region = 'Asia';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.governmentform = 'Republic';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE region IN ('Asia', 'Europe');

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT AVG(T1.gnp), SUM(T1.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.governmentform = 'US';

SELECT AVG(T1.gnp), SUM(T1.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.district = 'US Territories';

SELECT COUNT(DISTINCT T.language) FROM ( SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code ) T;

SELECT COUNT(DISTINCT T.language) FROM ( SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code ) T;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba';

SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba';

SELECT COUNT(language) FROM countrylanguage WHERE isofficial = TRUE AND countrycode = 'AF';

SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Afghanistan' AND T1.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1;

SELECT T.continent FROM ( SELECT T1.continent, COUNT(DISTINCT T4.language) AS num FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T2.countrycode = T3.countrycode INNER JOIN language AS T4 ON T3.language = T4.code GROUP BY T1.continent ) T ORDER BY T.num DESC LIMIT 1;

SELECT T.continent FROM ( SELECT T1.continent, COUNT(T4.language) AS num FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T2.countrycode = T3.countrycode GROUP BY T1.continent ) AS T ORDER BY T.num DESC LIMIT 1;

SELECT COUNT(*) FROM countrylanguage WHERE language IN ('english', 'dutch') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2;

SELECT COUNT(DISTINCT T1.countrycode) FROM countrylanguage AS T1 INNER JOIN language AS T2 ON T1.language = T2.name WHERE T2.name IN ('English', 'Dutch');

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) = 2;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) = 2;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') AND T2.isofficial = TRUE GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) = 2;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'french') AND T2.isofficial = TRUE;

SELECT COUNT(DISTINCT T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese';

SELECT COUNT(DISTINCT T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese';

SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('Dutch', 'English');

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch') AND T2.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('english', 'dutch') AND T2.isofficial = TRUE;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Asia' ORDER BY T1.percentage DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.region = 'Asia' GROUP BY T1.language ORDER BY COUNT(T1.language) DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(T1.language) = 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(DISTINCT T2.name) = 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'english' GROUP BY T1.id ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'english' GROUP BY T1.name ORDER BY COUNT(T1.population) DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'english' AND T2.isofficial = FALSE;

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'english' AND T2.isofficial = FALSE;

SELECT SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.headofstate = 'Beatrix' AND T1.isofficial = TRUE;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.headofstate = 'Beatrix' AND T1.isofficial = TRUE;

SELECT COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T2.isofficial = TRUE;

SELECT COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T2.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.surfacearea > ( SELECT MAX(surfacearea) FROM country AS T2 INNER JOIN city AS T3 ON T2.code = T3.countrycode WHERE T2.continent = 'Europe' );

SELECT name FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' );

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.population < ( SELECT MIN(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Asia' );

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.population < ( SELECT MIN(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Asia' );

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T1.population > ( SELECT MAX(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Africa' );

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T1.population > ALL ( SELECT MAX(population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Africa' );

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' AND T2.isofficial = FALSE;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' GROUP BY T1.code;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english';

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' AND T1.governmentform != 'Republic';

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'english' AND T1.governmentform != 'republic';

SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN countrylanguage AS T3 ON T1.countrycode = T3.countrycode WHERE T2.continent = 'Europe' AND T3.language = 'English' AND T3.isofficial = FALSE;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.continent = 'Europe' AND T2.language = 'english' AND T2.isofficial = FALSE;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T2.isofficial = TRUE AND T1.countrycode IN ( SELECT code FROM country WHERE region = 'Asia' );

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T2.isofficial = TRUE AND T1.continent = 'Asia';

SELECT T1.name, T1.indepyear, T1.surfacearea FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population LIMIT 1;

SELECT T1.name, T1.indepyear, T1.surfacearea FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population LIMIT 1;

SELECT T1.population, T1.name, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.area DESC LIMIT 1;

SELECT T1.name, T1.population, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.area DESC LIMIT 1;

SELECT T1.name, COUNT(T3.language) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T2.countrycode = T3.countrycode GROUP BY T1.name HAVING COUNT(T3.language) > 3;

SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) > 2;

SELECT COUNT(T1.id), T2.district FROM city AS T1 INNER JOIN ( SELECT district, AVG(population) FROM city GROUP BY district ) AS T2 ON T1.district = T2.district WHERE T1.population > T2.avgpopulation;

SELECT COUNT(id), district FROM city WHERE population > ( SELECT AVG(population) FROM city ) GROUP BY district;

SELECT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72 GROUP BY T1.governmentform;

SELECT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.governmentform HAVING AVG(T1.lifeexpectancy) > 72;

SELECT T.continent, AVG(T.lifeexpectancy), SUM(T.population) FROM country AS T WHERE T.lifeexpectancy < 72 GROUP BY T.continent;

SELECT T.continent, SUM(T.population), AVG(T.lifeexpectancy) FROM country AS T GROUP BY T.continent HAVING AVG(T.lifeexpectancy) < 72;

SELECT T1.name, T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 5;

SELECT T1.name, T1.surfacearea FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 5;

SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 3;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country ORDER BY population LIMIT 3;

SELECT name FROM country ORDER BY population LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT name FROM country WHERE region = 'Europe' AND population = 80000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT name FROM city WHERE population BETWEEN '160000' AND '900000';

SELECT name FROM city WHERE population BETWEEN '160000' AND '900000';

SELECT T.language FROM ( SELECT T1.language, COUNT(T2.countrycode) AS num FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.language ) T ORDER BY T.num DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.language ORDER BY COUNT(DISTINCT T2.name) DESC LIMIT 1;

SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.countrycode ORDER BY SUM(T1.percentage) DESC LIMIT 1;

SELECT T1.code, T3.language FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T2.countrycode = T3.countrycode GROUP BY T1.code ORDER BY SUM(T3.percentage) DESC LIMIT 1;

SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage = ( SELECT MAX(percentage) FROM countrylanguage );

SELECT COUNT(DISTINCT T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'spanish' AND T2.percentage > 70;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.percentage > 70;

SELECT COUNT(conductor_id) FROM conductor;

SELECT COUNT(conductor_id) FROM conductor;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id ORDER BY T1.year_of_founded DESC;

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);

SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);

SELECT T1.name, T3.orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id JOIN performance AS T3 ON T2.orchestra_id = T3.orchestra_id;

SELECT T3.name AS conductor_name, T2.orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id JOIN performance AS T3 ON T1.orchestra_id = T3.orchestra_id;

SELECT DISTINCT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name HAVING COUNT(DISTINCT T2.orchestra_id) > 1;

SELECT DISTINCT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name HAVING COUNT(DISTINCT T2.orchestra_id) > 1;

SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT d.name FROM conductor d INNER JOIN orchestra o ON d.conductor_id = o.conductor_id GROUP BY d.name ORDER BY COUNT(o.orchestra_id) DESC LIMIT 1;

SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008;

SELECT DISTINCT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008;

SELECT record_company, COUNT(record_company) FROM orchestra GROUP BY record_company;

SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company;

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;

SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC;

SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(DISTINCT orchestra_id) = (SELECT COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY orchestra_id ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1);

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(record_company) DESC LIMIT 1;

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 OR T1.year_of_founded > 2003;

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT DISTINCT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(DISTINCT T2.performance_id) > 1;

SELECT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(DISTINCT T2.performance_id) > 1;

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT T1.name, T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id;

SELECT T1.name, T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.friend_id;

SELECT DISTINCT grade FROM highschooler;

SELECT T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(DISTINCT id) >= 4;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;

SELECT T1.student_id, COUNT(T3.id) FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN likes AS T3 ON T1.student_id = T3.student_id GROUP BY T1.student_id;

SELECT T2.student_id, COUNT(T1.friend_id) FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.student_id;

SELECT T1.name, COUNT(T3.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN highschooler AS T3 ON T3.id = T2.friend_id GROUP BY T1.name;

SELECT T1.name, COUNT(T3.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN highschooler AS T3 ON T2.friend_id = T3.id GROUP BY T1.name;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.friend_id) DESC LIMIT 1;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.friend_id) DESC LIMIT 1;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 3;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3;

SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle';

SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle';

SELECT COUNT(T2.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT COUNT(T2.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT student_id FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend );

SELECT T.id FROM highschooler AS T LEFT JOIN friend AS F ON T.id = F.student_id WHERE F.student_id IS NULL;

SELECT T1.name FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT T1.name FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT DISTINCT T2.id FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN likes AS T3 ON T3.student_id = T2.id;

SELECT T1.student_id FROM friend AS T1 INNER JOIN likes AS T2 ON T1.student_id = T2.student_id;

SELECT DISTINCT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.friend_id;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T1.id;

SELECT COUNT(student_id), SUM(CASE WHEN liked_id = student_id THEN 1 ELSE 0 END) FROM likes GROUP BY student_id;

SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;

SELECT T3.name, COUNT(T2.student_id), SUM(T2.likes) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id GROUP BY T3.name;

SELECT T3.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id GROUP BY T3.student_id;

SELECT T3.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN ( SELECT name FROM highschooler ORDER BY COUNT(*) DESC LIMIT 1 ) AS T3 ON T2.id = T3.id;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.liked_id) DESC LIMIT 1;

SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.liked_id) >= 2;

SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.id HAVING COUNT(T1.liked_id) >= 2;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 2;

SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 2;

SELECT COUNT(*) FROM likes WHERE student_id IN ( SELECT id FROM highschooler WHERE name = 'Kyle' );

SELECT COUNT(*) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle';

SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id;

SELECT MIN(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT MIN(T1.grade) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL;

SELECT o.state FROM owners o INNER JOIN professionals p ON o.state = p.state GROUP BY o.state HAVING COUNT(DISTINCT o.owner_id) > 1 AND COUNT(DISTINCT p.professional_id) > 1;

SELECT DISTINCT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state;

SELECT AVG(T1.age) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;

SELECT AVG(DATEDIFF(CURDATE(), T.date_of_birth)/365.25) FROM dogs D JOIN treatments T ON D.dog_id = T.dog_id;

SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2;

SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' UNION SELECT professional_id, last_name, cell_number FROM treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2;

SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000;

SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000;

SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT p.professional_id, p.role_code, p.email_address FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN ( SELECT owner_id, COUNT(*) AS num_dogs FROM dogs GROUP BY owner_id ORDER BY num_dogs DESC LIMIT 1 ) d ON o.owner_id = d.owner_id;

SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN ( SELECT owner_id, COUNT(*) AS num_dogs FROM dogs GROUP BY owner_id ORDER BY num_dogs DESC LIMIT 1 ) d ON o.owner_id = d.owner_id;

SELECT p.professional_id, p.role, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;

SELECT p.professional_id, p.role_code, p.first_name FROM professionals p GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;

SELECT b.breed_name FROM breeds b JOIN ( SELECT COUNT(*) AS num_dogs, breed_code FROM dogs GROUP BY breed_code ORDER BY num_dogs DESC LIMIT 1 ) d ON b.breed_code = d.breed_code;

SELECT b.breed_name FROM breeds b JOIN ( SELECT COUNT(*) AS num_dogs, b.breed_name FROM breeds b JOIN dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ) subquery ON 1=1 ORDER BY subquery.num_dogs DESC LIMIT 1;

SELECT o.owner_id, o.last_name FROM owners o JOIN ( SELECT dog_id, COUNT(*) AS num_treatments FROM treatments GROUP BY dog_id ORDER BY num_treatments DESC LIMIT 1 ) t ON o.owner_id = t.dog_id;

SELECT T1.owner_id, T1.last_name FROM owners AS T1 INNER JOIN treatments AS T2 ON T1.owner_id = T2.professional_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1;

SELECT t.treatment_type_description FROM treatments t JOIN ( SELECT treatment_type_code, MIN(cost_of_treatment) AS min_cost FROM treatments GROUP BY treatment_type_code ) sub ON t.treatment_type_code = sub.treatment_type_code LIMIT 1;

SELECT t.treatment_type_description FROM treatment_types t JOIN ( SELECT treatment_type_code, MIN(cost_of_treatment) AS min_cost FROM treatments GROUP BY treatment_type_code ) sub ON t.treatment_type_code = sub.treatment_type_code;

SELECT o.owner_id, o.zip_code FROM owners o JOIN ( SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY owner_id ORDER BY total_cost DESC LIMIT 1 ) t ON o.owner_id = t.owner_id;

SELECT o.owner_id, o.zip_code FROM owners o JOIN ( SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM treatments GROUP BY owner_id ) t ON o.owner_id = t.owner_id ORDER BY t.total_cost DESC LIMIT 1;

SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );

SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;

SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.treatment_type_description, t.cost_of_treatment FROM treatments t;

SELECT t.treatment_type_description, t.cost_of_treatment FROM treatments t;

SELECT o.first_name, o.last_name, d.size_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT o.first_name, o.last_name, d.size_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT T1.name, T3.date_of_treatment FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN professionals AS T3 ON T2.professional_id = T3.professional_id INNER JOIN breeds AS T4 ON T1.breed_code = T4.breed_code WHERE T4.breed_name = 'Bribe';

SELECT T1.name, T3.date_of_treatment FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN professionals AS T3 ON T2.professional_id = T3.professional_id WHERE T1.breed_code = ( SELECT breed_code FROM breeds ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';

SELECT T1.first_name, T3.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id JOIN breeds AS T3 ON T2.breed_code = T3.breed_code WHERE T1.state = 'Virginia';

SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;

SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id;

SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1;

SELECT T3.last_name FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN professionals AS T3 ON T2.owner_id = T3.professional_id ORDER BY T1.age LIMIT 1;

SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');

SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';

SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id;

SELECT T1.date_arrived, T1.date_departure FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id;

SELECT COUNT(DISTINCT t.dog_id) FROM treatments t;

SELECT COUNT(DISTINCT t.dog_id) FROM treatments t;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT DISTINCT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 WHERE T1.city LIKE '%West%';

SELECT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.city LIKE '%West%';

SELECT T.first_name, T.last_name, T.email_address FROM owners AS T WHERE T.state LIKE '%North%';

SELECT DISTINCT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 INNER JOIN states AS T2 ON T1.state = T2.state_code WHERE T2.state_name LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < ( SELECT AVG(age) FROM dogs );

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT MAX(cost_of_treatment) FROM treatments;

SELECT T1.cost_of_treatment FROM treatments AS T1 INNER JOIN dogs AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.date_of_treatment DESC LIMIT 1;

SELECT COUNT(DISTINCT d.dog_id) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;

SELECT COUNT(DISTINCT d.dog_id) FROM dogs d LEFT JOIN treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;

SELECT COUNT(DISTINCT o.owner_id) FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;

SELECT COUNT(DISTINCT o.owner_id) AS num_owners FROM owners o LEFT JOIN dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT COUNT(DISTINCT p.professional_id) FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.abandoned_yn = 'Y';

SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT ct.charge_type, SUM(charges.CHARGE_AMOUNT) FROM charges AS chares JOIN treatment_types AS ct ON chares.treatment_type_code = ct.treatment_type_code GROUP BY ct.charge_type;

SELECT charge_type, charge_amount FROM charges;

SELECT MAX(cost_of_treatment) FROM treatments;

SELECT charge_amount FROM charges WHERE charge_type = (SELECT MAX(charge_type) FROM charges);

SELECT email_address, cell_number, home_phone FROM professionals;

SELECT email_address, cell_number, home_phone FROM professionals;

SELECT b.breed_name, s.size_description FROM breeds b CROSS JOIN sizes s;

SELECT DISTINCT b.breed_name, s.size_description FROM breeds b CROSS JOIN sizes s;

SELECT t.first_name, t.treatment_type_description FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.first_name, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT singer.birth_year, singer.citizenship FROM singer;

SELECT singer.birth_year, singer.citizenship FROM singer;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'French';

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer);

SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer);

SELECT s.citizenship, COUNT(*) FROM singer s GROUP BY s.citizenship;

SELECT s.citizenship, COUNT(*) FROM singer s GROUP BY s.citizenship;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT T1.title, T2.name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id;

SELECT T2.title, T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id;

SELECT DISTINCT s.name FROM singer s JOIN song t ON s.singer_id = t.singer_id WHERE t.sales > 300000;

SELECT DISTINCT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.sales > 300000;

SELECT singer.name FROM singer WHERE singer.singer_id IN (SELECT song.singer_id FROM song GROUP BY song.singer_id HAVING COUNT(*) > 1);

SELECT s.name FROM singer s INNER JOIN ( SELECT singer_id, COUNT(*) AS num_songs FROM song GROUP BY singer_id HAVING COUNT(*) > 1 ) t ON s.singer_id = t.singer_id;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT s.name FROM singer s LEFT JOIN song t ON s.singer_id = t.singer_id WHERE t.song_id IS NULL;

SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;

SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = 'AirCon';

SELECT DISTINCT T1.property_type_description FROM ref_property_types AS T1 INNER JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T2.property_type_code = 'P1';

SELECT DISTINCT property_name FROM properties WHERE (property_type_code = 'H' OR property_type_code = 'AP') AND room_count > 1;

