SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'French';

SELECT s.name, s.song_release_year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT s.song_name, s.song_release_year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id ORDER BY s.age ASC;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT T1.country, COUNT(T2.singer_id) as num_singers FROM country T1 INNER JOIN singer T2 ON T1.code = T2.country GROUP BY T1.country;

SELECT country, COUNT(*) FROM singer GROUP BY country;

SELECT s.song_name, s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id JOIN stadium st ON c.stadium_id = st.stadium_id WHERE s.age > (SELECT AVG(age) FROM singer);

SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT AVG(capacity), MAX(capacity) FROM stadium;

SELECT name, capacity FROM stadium WHERE highest = (SELECT AVG(attendance) FROM concert WHERE stadium_id = stadium.stadium_id);

SELECT name, capacity FROM stadium WHERE highest = (SELECT MAX(average) FROM stadium);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT s.name, COUNT(*) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id, s.name;

SELECT stadium_id, COUNT(*) FROM concert GROUP BY stadium_id;

SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(c.concert_id) DESC;

SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013 ORDER BY capacity DESC LIMIT 1);

SELECT year, COUNT(*) as Num_Concerts FROM concert GROUP BY year ORDER BY Num_Concerts DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);

SELECT DISTINCT s.country FROM singer s WHERE s.age > 40 AND s.is_male = TRUE UNION SELECT DISTINCT s.country FROM singer s WHERE s.age < 30 AND s.is_male = FALSE;

SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE concert.year = 2014 AND stadium_id = stadium.stadium_id);

SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE concert.year = 2014 AND stadium_id = stadium.stadium_id);

SELECT c.concert_name, COUNT(DISTINCT sc.singer_id) as num_singers FROM concert c JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name;

SELECT c.concert_name, c.theme, COUNT(DISTINCT s.singer_id) as num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id JOIN singer s ON sic.singer_id = s.singer_id GROUP BY c.concert_name, c.theme;

SELECT s.name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id WHERE sic.year = 2014;

SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id WHERE sic.year = 2014;

SELECT s.name, c.country FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.song_name LIKE '%Hey%';

SELECT s.name, s.country FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id WHERE s.song_name LIKE '%Hey%';

SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014 UNION ALL SELECT stadium_id FROM concert WHERE year = 2015);

SELECT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year = 2014 AND c.year = 2015;

SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));

SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT weight FROM pets WHERE pet_age = (SELECT MAX(pet_age) FROM pets);

SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY age ASC LIMIT 1;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT COUNT(*) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(*) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(DISTINCT sp.petid) FROM student s JOIN has_pet sp ON s.stuid = sp.stuid WHERE s.sex = 'F' AND sp.pettype = 'Dog';

SELECT COUNT(DISTINCT p.petid) FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE hp.stuid IN (SELECT stuid FROM student WHERE sex = 'F') AND p.pettype = 'dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype IN ('cat', 'dog'));

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype IN ('cat', 'dog'));

SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid JOIN pets AS T4 ON T2.petid = T4.petid WHERE T3.pettpe = 'cat' AND T4.pettpe = 'dog';

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog'))) AND sex = 'M';

SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE pettype != 'cat';

SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN (SELECT sp.stuid FROM has_pet sp WHERE sp.petid IN (SELECT p.petid FROM pets p WHERE p.pettype = 'cat'));

SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = 'Cat'));

SELECT T2.stuid FROM student T2 LEFT JOIN has_pet T3 ON T2.stuid = T3.stuid WHERE T3.petid != (SELECT petid FROM pets WHERE pettype = 'cat');

SELECT fname, age FROM student WHERE sex = 'M' AND fname IN (SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE pettype = 'dog') AND fname NOT IN (SELECT fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE pettype = 'cat');

SELECT fname FROM student WHERE sex = 'M' AND major = 'CS' AND (pettype = 'dog') AND NOT EXISTS (SELECT 1 FROM has_pet WHERE stuid = student.stuid AND pettype = 'cat');

SELECT pettype, weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid WHERE age = (SELECT MIN(age) FROM pets);

SELECT p.pettype, p.weight FROM pets p JOIN has_pet h ON p.petid = h.petid JOIN student s ON h.stuid = s.stuid WHERE s.age = (SELECT MIN(age) FROM student);

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;

SELECT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;

SELECT DISTINCT fname, age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT stuid, COUNT(*) AS num_pets FROM has_pet GROUP BY stuid HAVING COUNT(*) > 0;

SELECT stuid, COUNT(*) as num_pets FROM has_pet GROUP BY stuid;

SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);

SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);

SELECT lname FROM student WHERE EXISTS (SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pet_age = 3 AND has_pet.stuid = student.stuid);

SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pet_age = 3);

SELECT AVG(s.age) FROM student s WHERE s.stuid NOT IN (SELECT stuid FROM has_pet);

SELECT AVG(student.age) AS average_age FROM student WHERE student.stuid NOT IN (     SELECT stuid     FROM has_pet );

SELECT COUNT(*) FROM continents;

SELECT COUNT(*) FROM continents;

SELECT T1.contid, T1.continent, COUNT(*) as num_countries FROM continents AS T1 INNER JOIN countries AS T2 ON T1.contid = T2.continent GROUP BY T1.contid, T1.continent;

SELECT continents.contid, continents.continent, COUNT(countries.countryid) as num_countries FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;

SELECT COUNT(*) FROM countries;

SELECT COUNT(*) FROM countries;

SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS count  FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id, car_makers.fullname;

SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id;

SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1;

SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);

SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT fullname FROM car_makers WHERE year = 1970;

SELECT DISTINCT maker FROM car_makers WHERE year IN (SELECT year FROM cars_data);

SELECT car_makers.fullname AS make, MIN(cars_data.year) AS production_time FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id GROUP BY car_makers.fullname;

SELECT c.maker, c.year FROM cars_data c ORDER BY c.year LIMIT 1;

SELECT DISTINCT model FROM cars_data WHERE year > 1980;

SELECT DISTINCT model FROM cars_data WHERE year > 1980;

SELECT c.continent, COUNT(*) as count FROM continents c JOIN countries co ON c.contid = co.continent GROUP BY c.continent;

SELECT continents.continent, COUNT(car_makers.id) FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;

SELECT countryname FROM countries WHERE continent IN (SELECT continent FROM continents GROUP BY continent ORDER BY COUNT(*) DESC LIMIT 1);

SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_names ON car_makers.id = car_names.makeid GROUP BY countries.countryid ORDER BY COUNT(*) DESC LIMIT 1;

SELECT car_makers.fullname, COUNT(*) AS count FROM car_makers GROUP BY car_makers.fullname;

SELECT id, fullname FROM car_makers;

SELECT accelerate FROM cars_data WHERE maker = "amc hornet sportabout (sw)" ;

SELECT accelerate FROM cars_data WHERE maker = (SELECT make FROM car_names WHERE model = 'amc hornet sportabout') AND country = (SELECT countryid FROM countries WHERE countryname = 'sw');

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');

SELECT COUNT(*) FROM car_names WHERE country IN (SELECT countryid FROM countries WHERE countryname = 'USA');

SELECT COUNT(DISTINCT model) FROM cars_data WHERE country = (SELECT countryid FROM countries WHERE countryname = 'United States');

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT model_list.model, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker;

SELECT maker, model FROM model_list;

SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NOT NULL;

SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NOT NULL;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT year, AVG(weight) AS avg_weight FROM cars_data GROUP BY year;

SELECT c.year, AVG(c.weight) AS average_weight FROM cars_data c GROUP BY c.year;

SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN continents ON countries.continent = continents.contid WHERE continents.continent = 'Europe' GROUP BY countries.countryid HAVING COUNT(*) >= 3;

SELECT countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = (SELECT contid FROM continents WHERE continent = 'Europe') AND car_makers.count >= 3;

SELECT MAX(horsepower) AS max_horsepower, maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT MAX(horsepower) AS max_horsepower, maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT model, mpg FROM cars_data ORDER BY mpg DESC LIMIT 1;

SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(cedispl) AS avg_edispl FROM cars_data WHERE model = 'volvo';

SELECT AVG(edispl) FROM cars_data WHERE make = 'volvo';

SELECT MAX(accelerate) FROM cars_data WHERE cylinders IN (SELECT cylinders FROM cars_data);

SELECT MAX(accelerate) FROM cars_data;

SELECT model FROM car_names GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');

SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');

SELECT c.fullname, c.id FROM car_makers c JOIN model_list m ON c.id = m.maker WHERE c.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3);

SELECT id, fullname FROM car_makers WHERE COUNT(model) > 3;

SELECT DISTINCT model FROM cars_data WHERE maker IN (SELECT id FROM car_makers WHERE fullname LIKE '%General Motors%') AND weight > 3500;

SELECT DISTINCT model FROM cars_data WHERE maker IN (SELECT id FROM car_makers WHERE fullname LIKE '%General Motors%') AND weight > 3500;

SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;

SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000;

SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;

SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data) AND model = 'volvo';

SELECT COUNT(*) FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo') AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo'));

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1);

SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT DISTINCT countryid FROM car_makers);

SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT DISTINCT countryid FROM car_makers);

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT cd.makeid, cn.make  FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cd.cylinders <= 3;

SELECT id, fullname FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM cars_data WHERE cars_data.id = car_makers.id AND cars_data.horsepower <= 4);

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders >= 8 OR year < 1980;

SELECT model FROM cars_data WHERE weight < 3500 AND maker != (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company');

SELECT model FROM car_names WHERE weight < 3500 AND MAKE != 'Ford Motor Company';

SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT countryid FROM car_makers);

SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);

SELECT id, maker FROM car_makers WHERE COUNT(*) >= 2 AND COUNT(maker) > 3;

SELECT id, maker FROM car_makers WHERE COUNT(model) >= 2 AND COUNT(*) > 3;

SELECT c.id, c.countryname FROM countries c JOIN car_makers km ON c.country = km.country WHERE km.count > 3 OR km.fullname = 'fiat';

SELECT countries.countryid, countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN cars_data ON car_makers.id = cars_data.id WHERE (COUNT(car_makers.id) > 3) OR EXISTS(SELECT 1 FROM cars_data WHERE model = 'Fiat');

SELECT country FROM airlines WHERE airline = "JetBlue Airways";

SELECT country FROM airlines WHERE airline = "jetblue airways";

SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways";

SELECT abbreviation FROM airlines WHERE airline = "Jetblue Airways";

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airports.airportcode, airports.airportname FROM airports WHERE cities = "Anthony";

SELECT airportcode, airportname FROM airports WHERE city = "Anthony";

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) AS TotalFlights FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT cities.city, countries.country FROM airports JOIN cities ON airports.city = cities.city JOIN countries ON airports.country = countries.country WHERE airports.airportname = "alton";

SELECT cities.city, airports.country FROM airports JOIN flights ON flights.sourceairport = airports.airportcode WHERE airports.airportname = "Alton";

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE city = "Aberdeen";

SELECT airportname FROM airports WHERE city = "Aberdeen";

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE country = 'ATO');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.airportname = 'ASY Airport' AND T1.airline = 'United Airlines';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city = 'Aberdeen' AND T1.airline = 'United Airlines';

SELECT COUNT(flightno) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.city FROM airports a JOIN flights f ON a.airportcode = f.destairport GROUP BY a.city ORDER BY COUNT(f.flightno) DESC LIMIT 1;

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports GROUP BY airportcode ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport ORDER BY COUNT(flights.flightno) ASC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT abbreviation, country FROM airlines ORDER BY COUNT(*) DESC LIMIT 1;

SELECT abbreviation, country FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1);

SELECT a.airline FROM flights f JOIN airlines a ON f.airline = a.uid WHERE f.sourceairport = 'AHD';

SELECT airline FROM flights WHERE sourceairport = 'AHD';

SELECT airline FROM flights WHERE destairport = "AHD";

SELECT airline FROM flights WHERE destairport = 'AHD';

SELECT DISTINCT T1.airline FROM flights T1 INNER JOIN airports T2 ON T1.sourceairport = T2.airportcode INNER JOIN airports T3 ON T1.destairport = T3.airportcode WHERE T2.airportcode = 'APG' AND T3.airportcode = 'CVO';

SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline WHERE f.sourceairport IN (SELECT airportcode FROM airports WHERE airportname LIKE 'APG') AND f.destairport IN (SELECT airportcode FROM airports WHERE airportname LIKE 'CVO');

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND destairport != 'APG';

SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO' AND destairport != 'APG');

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE destairport = "APG";

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen ';

SELECT flightno FROM flights WHERE sourceairport = 'ABN';

SELECT flightno FROM flights WHERE destairport = 'ABE' AND country = 'UK';

SELECT flightno FROM flights WHERE destairport = ('Aberdeen');

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene');

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene');

SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);

SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) AS total_employees FROM employee;

SELECT employee.name, employee.age FROM employee ORDER BY employee.age ASC;

SELECT name FROM employee ORDER BY age;

SELECT e.city, COUNT(e.employee_id) AS employee_count FROM employee e GROUP BY e.city;

SELECT u.city, COUNT(e.employee_id) AS employee_count FROM hiring h INNER JOIN employee e ON h.employee_id = e.employee_id INNER JOIN shop u ON h.shop_id = u.shop_id GROUP BY u.city;

SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT DISTINCT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(*) > 1;

SELECT location, COUNT(*) as count FROM shop GROUP BY location;

SELECT location, COUNT(*) as count FROM shop GROUP BY location;

SELECT shop.manager_name, shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1;

SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;

SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT name FROM evaluation ORDER BY bonus DESC LIMIT 1;

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation WHERE bonus > 0);

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);

SELECT s.name FROM shop s INNER JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.shop_id ORDER BY COUNT(h.employee_id) DESC LIMIT 1;

SELECT name FROM shop ORDER BY COUNT(employee_id) DESC LIMIT 1;

SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;

SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);

SELECT shop.name, COUNT(*) AS NumEmployeesHired FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name;

SELECT shop.name, COUNT(*) AS num_employees FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) AS total_bonus FROM evaluation;

SELECT * FROM hiring;

SELECT s.name, s.location, s.district, h.start_from, h.is_full_time FROM hiring h JOIN shop s ON h.shop_id = s.shop_id;

SELECT district FROM shop WHERE number_products < 3000 AND number_products > 10000;

SELECT DISTINCT shop.district FROM shop WHERE shop.number_products < 3000 AND shop.number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(*) FROM documents;

SELECT COUNT(*) FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT documents.document_id, documents.template_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text LIKE '%w%';

SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';

SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';

SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT template_id) FROM documents;

SELECT COUNT(DISTINCT template_id) FROM documents;

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT template_id, COUNT(*) as num_documents FROM documents GROUP BY template_id;

SELECT DISTINCT template_id, COUNT(*) AS count FROM documents GROUP BY template_id;

SELECT t.template_id, t.template_type_code FROM templates t WHERE t.template_id IN (     SELECT d.template_id     FROM documents d     GROUP BY d.template_id     ORDER BY COUNT(d.document_id) DESC     LIMIT 1 );

SELECT templates.template_id, ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY templates.template_id, ref_template_types.template_type_code ORDER BY COUNT(documents.template_id) DESC LIMIT 1;

SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1;

SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1;

SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);

SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);

SELECT COUNT(*) FROM templates;

SELECT COUNT(*) FROM templates;

SELECT template_id, version_number, template_type_code FROM templates;

SELECT template_id, version_number, template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM templates;

SELECT template_type_code FROM ref_template_types;

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT template_type_code, COUNT(*) AS template_count FROM templates GROUP BY template_type_code;

SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;

SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3);

SELECT version_number, template_type_code FROM templates ORDER BY version_number LIMIT 1;

SELECT version_number, template_type_code FROM templates ORDER BY version_number ASC LIMIT 1;

SELECT template_type_code FROM templates WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Data base');

SELECT template_type_code FROM templates WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Data base');

SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK');

SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK');

SELECT template_type_code, COUNT(*) as num_documents FROM documents GROUP BY template_type_code;

SELECT template_type_code, COUNT(*) AS count FROM templates GROUP BY template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM documents);

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates);

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT template_type_description FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates);

SELECT template_details FROM templates WHERE template_id IN (SELECT template_id FROM documents);

SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation');

SELECT template_id FROM templates WHERE template_type_description = 'Presentation';

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT d.document_name, d.document_description, p.paragraph_text FROM documents d JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text LIKE '%Korea%';

SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');

SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');

SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');

SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');

SELECT document_id, COUNT(*) as num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, COUNT(*) as num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) as num_paragraphs FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2;

SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT d.document_id, d.document_name FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;

SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;

SELECT document_id FROM documents ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM documents ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraph_id BETWEEN 1 AND 2;

SELECT document_id FROM documents WHERE COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT document_id, paragraph_text FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT d.document_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text LIKE '%Brazil%' AND p.paragraph_text LIKE '%Ireland%';

SELECT COUNT(*) FROM teacher;

SELECT COUNT(*) FROM teacher;

SELECT name FROM teacher ORDER BY age ASC;

SELECT name FROM teacher ORDER BY age ASC;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);

SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);

SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown;

SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;

SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 10;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT T.name, C.course FROM teacher T INNER JOIN course_arrange CA ON T.teacher_id = CA.teacher_id INNER JOIN course C ON CA.course_id = C.course_id;

SELECT t.name, c.course FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id INNER JOIN course c ON ca.course_id = c.course_id;

SELECT t.name, c.course FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id INNER JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;

SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;

SELECT T.name FROM course ArrangedWithTeacher JOIN course_arrange ON course_arrange.course_id = course.courses_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id WHERE course.coursename = "Math";

SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.grade = 'math';

SELECT t.name, COUNT(DISTINCT ca.course_id) as num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.teacher_id) AS num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, t.name;

SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2;

SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2;

SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.course_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT name FROM visitor WHERE level_of_membership > '4' ORDER BY level_of_membership DESC;

SELECT AVG(visitor.age) FROM visitor WHERE level_of_membership <= '4';

SELECT name, level_of_membership FROM visitor WHERE level_of_membership > '4' ORDER BY age DESC;

SELECT m.museum_id, m.name FROM museum m ORDER BY m.num_of_staff DESC LIMIT 1;

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010);

SELECT v.id, v.name, v.age FROM visitor v JOIN visit ON v.id = visit.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(*) > 1;

SELECT v.id, v.name, v.level_of_membership  FROM visitor v JOIN visit w ON v.id = w.visitor_id GROUP BY v.id, v.name, v.level_of_membership ORDER BY SUM(w.total_spent) DESC;

SELECT v.id, m.name FROM visit v JOIN museum m ON v.museum_id = m.museum_id GROUP BY v.museum_id ORDER BY COUNT(v.id) DESC LIMIT 1;

SELECT m.name FROM museum m LEFT JOIN visit v ON m.museum_id = v.museum_id WHERE v.visitor_id IS NULL;

SELECT v.name, v.age FROM visitor v JOIN visit ON v.id = visit.visitor_id GROUP BY v.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;

SELECT SUM(total_spent) FROM visit INNER JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = '1';

SELECT v.name FROM visitor v JOIN visit w ON v.id = w.visitor_id WHERE w.museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009 UNION ALL SELECT museum_id FROM museum WHERE open_year > 2011);

SELECT COUNT(*) FROM Visitor WHERE id NOT IN (SELECT visitor_id FROM Visit WHERE museum_id IN (SELECT museum_id FROM Museum WHERE open_year > 2010));

SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT winner_age, loser_age FROM matches;

SELECT AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_id IS NOT NULL; SELECT AVG(loser_age) AS avg_loser_age FROM matches WHERE loser_id IS NOT NULL;

SELECT AVG(winner_rank) FROM matches;

SELECT AVG(winner_rank) FROM matches;

SELECT MAX(winner_rank) FROM matches;

SELECT MAX(loser_rank) FROM matches;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;

SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;

SELECT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT player_id FROM players) AND year = 2016 AND winner_id IN (SELECT player_id FROM players);

SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE year = 2013 ) AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE year = 2016;

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open';

SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND m.tourney_name = 'Australian Open';

SELECT first_name, country_code FROM players ORDER BY winner_age DESC;

SELECT T1.first_name, T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_age DESC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT CONCAT(first_name, ' ', last_name) AS full_name, birth_date  FROM players  WHERE hand = 'left'  ORDER BY birth_date;

SELECT first_name, country_code FROM players ORDER BY COUNT(tourney_id) DESC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY COUNT(*) DESC LIMIT 1;

SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT p.first_name || ' ' || p.last_name AS name, r.ranking_points AS rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON m.year = r.ranking_date WHERE m.winner_id IN (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT winner_name, winner_rank_points FROM matches JOIN players ON winner_id = players.player_id ORDER BY winner_rank_points DESC LIMIT 1;

SELECT winner_name FROM table_2009095_2 WHERE championship = 'Australian Open' AND winner_rank_points = (SELECT MAX(ranking_points) FROM table_2009095_2 WHERE championship = 'Australian Open');

SELECT winner_name FROM matches JOIN players ON winner_id = player_id WHERE tourney_name = 'Australian open' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT winner_name, loser_name FROM matches JOIN players ON winner_id = players.player_id JOIN players ON loser_id = players.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches);

SELECT winner_name, loser_name FROM matches WHERE MATCHNUM IN (SELECT match_num FROM matches ORDER BY minutes DESC LIMIT 1);

SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;

SELECT p.first_name, AVG(r.ranking_points) AS average_rankings FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;

SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;

SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;

SELECT country_code, COUNT(*) FROM players GROUP BY country_code;

SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT country_code FROM players WHERE player_id IN (SELECT player_id FROM players GROUP BY player_id HAVING COUNT(*) > 50);

SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;

SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;

SELECT year, COUNT(*) FROM matches GROUP BY year;

SELECT year, COUNT(*) as match_count FROM matches GROUP BY year;

SELECT p.first_name || ' ' || p.last_name AS name, r.winner_rank AS rank FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date <= (SELECT MIN(ranking_date) + INTERVAL '1 YEAR' FROM rankings) ORDER BY r.ranking_date DESC LIMIT 3;

SELECT p.first_name, p.last_name, r.winner_rank FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date = (SELECT MIN(ranking_date) FROM rankings) LIMIT 3;

SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';

SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';

SELECT first_name, country_code, birth_date  FROM players  WHERE player_id IN (     SELECT winner_id      FROM matches      ORDER BY winner_rank_points DESC      LIMIT 1 );

SELECT first_name, country_code, birth_date FROM players WHERE player_id IN (SELECT player_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY ranking_points DESC LIMIT 1);

SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;

SELECT hand, COUNT(*) AS NumPlayers FROM players GROUP BY hand;

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name;

SELECT b.name, b.date, b.result FROM battle b;

SELECT MAX(injured), MIN(injured) FROM death;

SELECT AVG(killed + injured) AS avg_injuries FROM death;

SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');

SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';

SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig');

SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;

SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id ORDER BY SUM(d.injured) DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225);

SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' AND s.name = 'HMS Atalanta';

SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');

SELECT note FROM death WHERE note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(*) FROM courses;

SELECT COUNT(*) FROM courses;

SELECT course_description FROM courses WHERE course_name = 'math';

SELECT course_description FROM courses WHERE course_name LIKE 'math%';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";

SELECT d.department_id, d.department_name FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;

SELECT d.department_id, d.department_name FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;

SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;

SELECT COUNT(DISTINCT degree_programs.department_id) FROM degree_programs;

SELECT COUNT(DISTINCT course_name) FROM courses;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT section_name, section_description FROM sections;

SELECT section_name, section_description FROM sections;

SELECT c.course_id, c.course_name FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(sce.student_enrolment_id) <= 2;

SELECT c.course_name, c.course_id FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id GROUP BY c.course_id HAVING COUNT(sce.student_enrolment_id) < 2;

SELECT section_name FROM sections ORDER BY reverse(section_name);

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT s.semester_name, s.semester_id FROM semesters s JOIN student_enrolment_courses sce ON s.semester_id = sce.section_id GROUP BY s.semester_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT semester_id, section_name  FROM semesters  WHERE semester_id IN (SELECT MAX(student_enrolment.student_enrolment_id) FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN students ON student_enrolment.student_id = students.student_id);

SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT students.first_name, students.middle_name, students.last_name, students.student_id  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE student_enrolment.semester_id = (SELECT semester_id FROM semesters WHERE semester_name = 'Fall')  AND COUNT(degree_program_id) = 2;

SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM students S INNER JOIN student_enrolment_courses SEC ON S.student_id = SEC.student_enrolment_id INNER JOIN student_enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id INNER JOIN degree_programs D ON SE.degree_program_id = D.degree_program_id GROUP BY S.student_id, S.first_name, S.middle_name, S.last_name HAVING COUNT(D.Degree_program_id) = 2;

SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor';

SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors';

SELECT degree_programs.degree_summary_name AS program_type, COUNT(DISTINCT student_enrolment.student_id) AS num_students FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY num_students DESC LIMIT 1;

SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT degree_program_id, degree_summary_name FROM degree_programs ORDER BY COUNT(*) DESC LIMIT 1;

SELECT degree_program_id, degree_summary_name FROM degree_programs ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T1.enrollment_id) AS num_enrollments FROM student_enrolment_courses AS T1 JOIN student_enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_id ORDER BY COUNT(T1.enrollment_id) DESC LIMIT 1;

SELECT T2.first_name, T2.middle_name, T2.last_name, T1.student_id, COUNT(T1.student_enrolment_id) AS num_enrollments FROM student_enrolment_courses AS T1 JOIN student_enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN students AS T3 ON T2.student_id = T3.student_id GROUP BY T2.student_id ORDER BY num_enrollments DESC LIMIT 1;

SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT 1 FROM student_enrolment_courses sce JOIN student_enrolment se ON sce.student_enrolment_id = se.student_enrolment_id WHERE sce.course_id IS NULL);

SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);

SELECT c.course_name FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id;

SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment WHERE student_id IN (SELECT student_id FROM students)));

SELECT course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;

SELECT c.course_name FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id GROUP BY c.course_id ORDER BY COUNT(sce.student_id) DESC LIMIT 1;

SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment);

SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IS NULL);

SELECT transcript_id, transcript_date FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IN (SELECT student_course_id FROM student_enrolment_courses SC JOIN student_enrolment SE ON SC.student_enrolment_id = SE.student_enrolment_id WHERE SE.degree_program_id IN (SELECT degree_program_id FROM degree_programs D JOIN departments DE ON D.department_id = DE.department_id WHERE DE.department_name = 'Department Name'));

SELECT transcript_id, student_course_id FROM transcript_contents INNER JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcript_id, student_course_id HAVING COUNT(*) >= 2;

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT cell_mobile_number FROM students WHERE last_name = 'Ward' AND first_name = 'Timmothy';

SELECT S.first_name, S.middle_name, S.last_name FROM students AS S ORDER BY S.date_first_registered ASC LIMIT 1;

SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);

SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN courses ON student_enrolment_courses.course_id = courses.course_id JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE semesters.semester_name = 'Graduation' ORDER BY students.date_first_registered ASC;

SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);

SELECT s.first_name FROM students s WHERE s.current_address_id != s.permanent_address_id;

SELECT students.first_name FROM students WHERE students.permanent_address_id != students.current_address_id;

SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details  FROM addresses AS T1 JOIN (     SELECT current_address_id, COUNT(*) AS count     FROM students     GROUP BY current_address_id ) AS T2 ON T1.address_id = T2.current_address_id ORDER BY count DESC LIMIT 1;

SELECT student_enrolment.id, addresses.line_1, addresses.line_2 FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id JOIN addresses ON students.current_address_id = addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(transcript_date) FROM transcripts;

SELECT AVG(transcript_date) FROM transcripts;

SELECT transcript_date, other_details FROM transcripts;

SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT COUNT(*) AS max_transcripts, student_enrolment_id FROM transcript_contents GROUP BY student_enrolment_id;

SELECT MAX(t.transcript_id) AS max_transcript_id, c.course_id FROM student_enrolment_courses sc JOIN student_enrolment se ON sc.student_enrolment_id = se.student_enrolment_id JOIN courses c ON sc.course_id = c.course_id GROUP BY c.course_id;

SELECT t.transcript_date, tc.student_course_id FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Master','Bachelor')));

SELECT semester_id FROM semesters WHERE semester_name IN ('Masters', 'Bachelors');

SELECT COUNT(DISTINCT current_address_id) FROM students;

SELECT DISTINCT address_id FROM addresses WHERE EXISTS (SELECT 1 FROM students WHERE current_address_id = addresses.address_id OR permanent_address_id = addresses.address_id);

SELECT * FROM students ORDER BY last_name DESC, first_name DESC;

SELECT other_student_details FROM students ORDER BY last_name ASC;

SELECT section_name FROM sections WHERE section_id = 'h';

SELECT section_description FROM sections WHERE section_name = 'h';

SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';

SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon WHERE directed_by = "Ben Jones";

SELECT title FROM cartoon WHERE directed_by = "Ben Jones";

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(title) FROM cartoon WHERE written_by = "Joseph Kuhr";

SELECT title FROM cartoon ORDER BY original_air_date;

SELECT c.title, c.directed_by FROM cartoon c ORDER BY c.original_air_date;

SELECT title FROM cartoon WHERE directed_by IN ("Ben Jones", "Brandon Vietti");

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC;

SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;

SELECT series_name, content FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = "Sky Radio";

SELECT content FROM tv_channel WHERE package_option = "Sky Radio";

SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";

SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC LIMIT 1;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC LIMIT 1;

SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language;

SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');

SELECT series_name FROM tv_channel WHERE title = 'The Rise of the Blue Beetle';

SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');

SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");

SELECT episode, rating FROM tv_series ORDER BY rating DESC;

SELECT episode, rating FROM tv_series ORDER BY rating DESC;

SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3;

SELECT T1.episode, T1.rating FROM tv_series AS T1 ORDER BY T1.rating DESC LIMIT 3;

SELECT MIN(share) FROM tv_series; SELECT MAX(share) FROM tv_series;

SELECT MAX(share), MIN(share) FROM tv_series;

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = "A Love of a Lifetime");

SELECT series_name FROM tv_channel WHERE episode = "A Love of a Lifetime";

SELECT T1.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T2.series_name = 'Sky Radio';

SELECT episode FROM tv_series WHERE series_name = 'Sky Radio';

SELECT director, COUNT(*) AS count FROM cartoon GROUP BY director;

SELECT directed_by, COUNT(*) AS count FROM cartoon GROUP BY directed_by;

SELECT cartoon.production_code, tv_channel.channel FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY air_date DESC LIMIT 1;

SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;

SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = TRUE;

SELECT package_option, series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = TRUE;

SELECT DISTINCT country FROM tv_channel WHERE channel IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT series_name, country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by IN ('Ben Jones', 'Michael Chang'));

SELECT series_name, country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by IN ('Ben Jones', 'Michael Chang'));

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language NOT LIKE '%English%';

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';

SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2);

SELECT id FROM tv_channel WHERE COUNT(*) > 2;

SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT 1 FROM cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.directed_by = 'Ben Jones');

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT final_table_made, best_finish FROM poker_player;

SELECT final_table_made, best_finish FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;

SELECT name FROM people WHERE people_id IN (SELECT people_id FROM poker_player);

SELECT name FROM poker_player WHERE earnings > 300000;

SELECT p.name FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE p.earnings > 300000;

SELECT name FROM poker_player ORDER BY final_table_made ASC;

SELECT name FROM poker_player ORDER BY final_table_made ASC;

SELECT birth_date FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT birth_date FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT money_rank FROM poker_player WHERE height = (SELECT MAX(height) FROM people);

SELECT money_rank FROM poker_player WHERE height = (SELECT MAX(height) FROM people);

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC;

SELECT name FROM poker_player ORDER BY earnings DESC;

SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality;

SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(nationality) >= 2;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(*) FROM area_code_state;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT vote_id, phone_number, state FROM votes;

SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT state, created FROM votes;

SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name HAVING COUNT(vote_id) >= 2;

SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number ORDER BY COUNT(vote_id) ASC LIMIT 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);

SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1);

SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling');

SELECT DISTINCT area_code FROM votes WHERE contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling') AND contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss');

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT name FROM country WHERE indepyear > 1950;

SELECT name FROM country WHERE indepyear > 1950;

SELECT COUNT(DISTINCT country) FROM country WHERE governmentform = 'Republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT continent FROM country WHERE code = 'ANG';

SELECT continent FROM country WHERE code = 'ANG';

SELECT region FROM city WHERE name = "Kabul";

SELECT region FROM country WHERE name = "Kabul";

SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1;

SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');

SELECT population, lifeexpectancy FROM country WHERE code = 'BRZ';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT region, population FROM country WHERE code = 'ANG';

SELECT region, population FROM country WHERE code = 'ANG';

SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND region = 'Central Africa';

SELECT AVG(lifeexpectancy) FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE district LIKE '%Central Africa%');

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;

SELECT c.name FROM country c WHERE c.continent = 'Asia' ORDER BY c.lifeexpectancy ASC LIMIT 1;

SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM country WHERE continent = 'Asia';

SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM country WHERE continent = 'Asia';

SELECT AVG(countrylifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';

SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT population FROM city WHERE district = 'Gelderland';

SELECT SUM(population) FROM city WHERE district = "Gelderland";

SELECT AVG(gnp) AS avg_gnp, SUM(population) AS total_pop FROM country WHERE governmentform = 'US';

SELECT AVG(gnp) AS Mean_GNP, SUM(population) AS Total_Population FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode IN (SELECT countrycode FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE countrycode

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country;

SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');

SELECT COUNT(*) AS official_languages FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Afghanistan');

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = TRUE;

SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1);

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode ORDER BY cl.percentage DESC LIMIT 1;

SELECT continent FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(*) DESC LIMIT 1);

SELECT c.continent, COUNT(*) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY num_languages DESC LIMIT 1;

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE countrylanguage.language = 'English' AND countrylanguage.language = 'Dutch');

SELECT COUNT(*) FROM countrylanguage WHERE language IN ('English', 'Dutch');

SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND language = 'French');

SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' AND cl.isofficial = TRUE AND cl.percentage > 0 JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl2.language = 'French' AND cl2.isofficial = TRUE;

SELECT DISTINCT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.language = 'French';

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' AND cl.language = 'French';

SELECT COUNT(DISTINCT c.continent) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'Chinese';

SELECT COUNT(DISTINCT country.code) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese' AND countryregion = 'Asia';

SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'));

SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('dutch', 'english'));

SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = TRUE AND language IN ('English', 'Dutch'));

SELECT DISTINCT countrycode FROM countrylanguage WHERE isofficial = TRUE AND language IN ('English', 'Dutch');

SELECT language FROM countrylanguage JOIN country ON countrycode = country.code WHERE continent = 'Asia' ORDER BY percentage DESC LIMIT 1;

SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY percentage DESC LIMIT 1;

SELECT DISTINCT language FROM countrylanguage JOIN country ON countrycode = country.code WHERE isofficial = TRUE AND percentage = 1 AND region = 'republic governments';

SELECT DISTINCT language FROM countrylanguage JOIN country ON countrycode = country.code WHERE isofficial = TRUE AND percentage = 1 AND governmentform = 'republic';

SELECT name FROM city WHERE population = (SELECT MAX(population) FROM city WHERE countrycode IN (SELECT code FROM country WHERE localname = 'English'));

SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY population DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy  FROM country AS T1  INNER JOIN city AS T2 ON T1.code = T2.countrycode  WHERE T1.region = 'Asia'  ORDER BY T1.surfacearea DESC  LIMIT 1;

SELECT c.name, c.population, c.lifeexpectancy  FROM country c  WHERE c.continent = 'Asia'  ORDER BY c.population DESC  LIMIT 1;

SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT code FROM countrylanguage WHERE isofficial = FALSE);

SELECT AVG(lifeexpectancy) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = FALSE);

SELECT SUM(population) FROM country WHERE code IN (SELECT code FROM countrylanguage WHERE isofficial = FALSE);

SELECT COUNT(*) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English');

SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix');

SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Beatrix');

SELECT COUNT(DISTINCT cl.language) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.indepyear < 1930;

SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage JOIN country ON countrycode = country.code WHERE country.indepyear < 1930;

SELECT code FROM country WHERE surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe');

SELECT name FROM country WHERE continent = 'Europe' AND surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe');

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.continent = 'Africa' AND c.population < ALL(SELECT c2.population FROM country c2 WHERE c2.continent = 'Asia');

SELECT name FROM country WHERE continent = 'Africa' AND code IN (SELECT code FROM country WHERE continent = 'Asia') ORDER BY population;

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.continent = 'Asia' AND c.population > ALL(SELECT c2.population FROM country c2 WHERE c2.continent = 'Africa');

SELECT c.name FROM country c WHERE c.continent = 'Asia' AND c.population > ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Africa' );

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English');

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English');

SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = TRUE);

SELECT code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language != 'English');

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English') AND governmentform != 'Republic';

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND isofficial = TRUE AND language = 'English') AND governmentform != 'Republic';

SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'European' AND countrycode IN (SELECT countrycode FROM countrylanguage WHERE countrylanguage.isofficial = FALSE AND countrylanguage.language = 'English');

SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Europe' AND countrylanguage ISNULL OR countrylanguage.isofficial = FALSE AND countrylanguage.percentage < 1);

SELECT name FROM city WHERE countrycode IN (SELECT countrycode FROM country WHERE continent = 'Asia' AND region = 'Asia' AND localname LIKE '%Chinese%');

SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' AND isofficial = TRUE AND language = 'Chinese');

SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);

SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;

SELECT c.population, c.name, c.headofstate FROM country c ORDER BY c.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, COUNT(T2.language) AS num_languages FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.code HAVING COUNT(T2.language) >= 3;

SELECT c.name, COUNT(DISTINCT cl.language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code HAVING COUNT(DISTINCT cl.language) > 2;

SELECT district, COUNT(*) AS count FROM city GROUP BY district HAVING COUNT(*) > (SELECT AVG(population) FROM city);

SELECT district, COUNT(*) AS count FROM city GROUP BY district HAVING COUNT(*) > (SELECT AVG(population) FROM city);

SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;

SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;

SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population  FROM country  GROUP BY continent  HAVING AVG(lifeexpectancy) < 72;

SELECT continent, SUM(population) AS totalpopulation, AVG(lifeexpectancy) AS averagelifeexpectancy FROM country WHERE lifeexpectancy < 72 GROUP BY continent;

SELECT c.name, c.surfacearea FROM country c ORDER BY c.surfacearea DESC LIMIT 5;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country WHERE population IN (SELECT TOP 3 population FROM country ORDER BY population DESC);

SELECT name FROM country ORDER BY population ASC LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area  FROM country  WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surfacearea  FROM country  WHERE continent = 'North America' AND surfacearea > 3000;

SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;

SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;

SELECT T2.language FROM countrylanguage AS T2 INNER JOIN country AS T1 ON T2.countrycode = T1.code ORDER BY T2.percentage DESC LIMIT 1;

SELECT l.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code GROUP BY l.language ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.language, T1.name, T2.percentage FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name, T2.language ORDER BY T2.percentage DESC;

SELECT c.code, l.language, l.percentage FROM country c JOIN countrylanguage l ON c.code = l.countrycode ORDER BY l.percentage DESC;

SELECT SUM(percentage) FROM countrylanguage WHERE language = 'Spanish';

SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE isofficial = TRUE AND language = 'Spanish';

SELECT code FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE percentage > ALL(SELECT percentage FROM countrylanguage)) AND language = 'Spanish';

SELECT code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND isofficial = TRUE AND language = 'Spanish');

SELECT COUNT(*) FROM conductor;

SELECT COUNT(*) FROM conductor;

SELECT name FROM conductor ORDER BY age ASC;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality != "USA";

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share) FROM performance WHERE type != 'Live final'; SELECT MIN(share) FROM performance WHERE type != 'Live final';

SELECT MAX(share) FROM performance WHERE type != 'Live final'; SELECT MIN(share) FROM performance WHERE type != 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY YEAR_OF_WORK DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(year_of_work) DESC LIMIT 1;

SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT name FROM conductor GROUP BY name HAVING COUNT(*) > 1;

SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT orchestra_id) > 1;

SELECT name FROM conductor GROUP BY conductor_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM conductor WHERE EXISTS (SELECT 1 FROM orchestra WHERE orchestra.year_of_founded > 2008 AND conductor_id = conductor.conductor_id);

SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008);

SELECT record_company, COUNT(*) as count FROM orchestra GROUP BY record_company;

SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE record_company = "record company";

SELECT major_record_format FROM orchestra ORDER BY COUNT(*) ASC;

SELECT major_record_format FROM orchestra ORDER BY YEAROFWORK;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 UNION SELECT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1;

SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT name, grade FROM highschooler;

SELECT highschooler.name, highschooler.grade FROM highschooler;

SELECT grade FROM highschooler;

SELECT grade FROM highschooler;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) AS num_highschoolers FROM highschooler GROUP BY grade;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(id) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(id) >= 4;

SELECT DISTINCT grade FROM highschooler WHERE grade BETWEEN 9 AND 12;

SELECT T2.id, COUNT(DISTINCT T1.student_id) AS num_friends FROM friend T1 JOIN highschooler T2 ON T1.student_id = T2.id GROUP BY T2.id;

SELECT h.id, COUNT(f.friend_id) as num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id;

SELECT h.name, COUNT(f.student_id) AS num_friends FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name, COUNT(f.student_id) as friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE student_id IN (SELECT id FROM highschooler));

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE student_id = highschooler.id);

SELECT name FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));

SELECT name FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));

SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.liked_id WHERE f.friend_id IS NOT NULL AND l.student_id IS NOT NULL;

SELECT DISTINCT T2.id FROM highschooler AS T2 JOIN friend AS T1 ON T2.id = T1.student_id JOIN likes AS T3 ON T2.id = T3.student_id;

SELECT T2.name FROM highschooler AS T2 JOIN friend AS T1 ON T2.id = T1.student_id JOIN likes AS T3 ON T2.id = T3.liked_id WHERE T1.friend_id != T2.id AND T3.student_id != T2.id;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT liked_id FROM likes);

SELECT l.student_id, COUNT(*) AS total_likes FROM likes l GROUP BY l.student_id;

SELECT student_id, COUNT(*) AS total_likes FROM likes GROUP BY student_id;

SELECT f.name, COUNT(*) as like_count FROM friends f JOIN likes l ON f.student_id = l.student_id GROUP BY f.name;

SELECT name, COUNT(*) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY highschooler.id HAVING COUNT(*) >= 2;

SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes GROUP BY liked_id HAVING COUNT(*) >= 2);

SELECT name FROM highschooler WHERE grade > 5 AND COUNT(friend_id) >= 2;

SELECT name FROM highschooler WHERE grade > 5 AND EXISTS (SELECT 1 FROM friend WHERE friend.student_id = highschooler.id AND friend.friend_id = highschooler.id GROUP BY student_id HAVING COUNT(*) >= 2);

SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);

SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);

SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT grade FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT o.state FROM owners o INNER JOIN professionals p ON o.owner_id = p.owner_id WHERE o.state = p.state;

SELECT o.state FROM owners o INTERSECT SELECT p.state FROM professionals p;

SELECT AVG(dog_age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT AVG(d.age) FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id;

SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR professionals.state IS NULL AND professionals.cell_number IS NOT NULL AND professionals.id IS NOT NULL AND professionals.treatment_count > 2;

SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals INNER JOIN owners ON professionals.owner_id = owners.owner_id WHERE owners.state = 'Indiana' OR professionals.cell_number IN (SELECT COUNT(*) > 2 FROM treatments GROUP BY treatment_id);

SELECT name FROM dogs WHERE EXISTS (SELECT 1 FROM treatments WHERE dog_id = dogs.dog_id AND cost_of_treatment > 1000);

SELECT name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000 AND owner_id = dogs.owner_id;

SELECT first_name FROM owners UNION SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT first_name FROM owners UNION SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT professionals.professional_id, professionals.role_code, professionals.email_address  FROM professionals  WHERE professionals.professional_id NOT IN (SELECT treatment_id FROM treatments);

SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id, professionals.role_code, professionals.first_name HAVING COUNT(*) >= 2;

SELECT t.treatment_id, p.role_code, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id GROUP BY t.treatment_id, p.role_code, p.first_name HAVING COUNT(*) >= 2;

SELECT breed_name FROM breeds ORDER BY COUNT(*) DESC LIMIT 1;

SELECT breed_name FROM breeds ORDER BY COUNT(*) DESC LIMIT 1;

SELECT owner_id, last_name FROM owners WHERE owner_id IN (     SELECT dog_id     FROM dogs     GROUP BY dog_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1 ) ORDER BY SUM(cost_of_treatment) DESC;

SELECT owners.owner_id, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN treatments ON dogs.dog_id = treatments.dog_id INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;

SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);

SELECT t.treatment_type_description FROM treatment_types t JOIN treatments tr ON t.treatment_type_code = tr.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;

SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.charge_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1;

SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;

SELECT professionals.professional_id, professionals.cell_number FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;

SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'Rarest');

SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM breeds WHERE breed_name = 'Rarest'));

SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';

SELECT date_arrived, date_departed FROM dogs WHERE date_departed IS NOT NULL AND date_arrived IS NOT NULL AND EXISTS (SELECT 1 FROM treatments WHERE treatments.dog_id = dogs.dog_id);

SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);

SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MAX(age) FROM dogs);

SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id ORDER BY d.age ASC LIMIT 1;

SELECT T2.email_address FROM professionals AS T2 INNER JOIN owners AS T1 ON T2.owner_id = T1.owner_id WHERE T1.state = 'Hawaii' OR T1.state = 'Wisconsin';

SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');

SELECT date_arrived, date_departed FROM dogs;

SELECT d.date_arrived, d.date_departed FROM dogs d;

SELECT COUNT(DISTINCT t.dog_id) FROM treatments t;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT professionals.role_code, professionals.street, professionals.city, professionals.state  FROM professionals  WHERE professionals.city LIKE '%West%';

SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%';

SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';

SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North';

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;

SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);

SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT dog_id FROM dogs);

SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT COUNT(*) FROM professionals WHERE NOT EXISTS (SELECT 1 FROM treatments WHERE treatments.professional_id = professionals.professional_id);

SELECT d.name, d.age, d.weight FROM dogs d WHERE d.abandoned_yn = 'Y';

SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y';

SELECT AVG(age) as AverageAge FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT age FROM dogs ORDER BY age DESC LIMIT 1;

SELECT MAX(age) FROM dogs;

SELECT charge_type, charge_amount FROM charges;

SELECT charge_type, charge_amount FROM charges;

SELECT charge_type, charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;

SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;

SELECT email_address, cell_number, home_phone FROM professionals;

SELECT professionals.email_address, professionals.home_phone, professionals.cell_number FROM professionals;

SELECT breed_name, size_description FROM breeds JOIN sizes ON breeds.breed_code = sizes.size_code;

SELECT DISTINCT breed_code, size_code FROM dogs;

SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'French';

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT citizenship, MAX(net_worth_millions) as max_net_worth FROM singer GROUP BY citizenship;

SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;

SELECT s.title, s.name FROM song s;

SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id;

SELECT DISTINCT name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;

SELECT DISTINCT name FROM song JOIN singer ON song.singer_id = singer.singer_id WHERE sales > 300000;

SELECT name FROM singer GROUP BY name HAVING COUNT(*) > 1;

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT s.name, SUM(song.sales) AS total_sales FROM singer s JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;

SELECT s.name, SUM(song.sales) AS total_sales FROM singer s JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;

SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon');

SELECT ref_property_types.property_type_description FROM ref_property_types INNER JOIN properties ON ref_property_types.property_type_code = properties.property_type_code;

SELECT property_name FROM properties WHERE property_type_code IN ('house', 'apartment') AND room_count > 1;

