SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT T1.name, T1.country, T1.age FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id ORDER BY T1.age DESC;

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT t1.name, t3.year FROM singer AS t1 INNER JOIN singer_in_concert AS t2 ON t1.singer_id = t2.singer_id INNER JOIN concert AS t3 ON t2.concert_id = t3.concert_id ORDER BY t1.age ASC LIMIT 1;

SELECT T1.name, T1.song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age = (SELECT MAX(age) FROM singer);

SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20;

SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20;

SELECT DISTINCT T1.country, COUNT(T2.singer_id) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.country;

SELECT COUNT(DISTINCT country), country FROM singer GROUP BY country;

SELECT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT DISTINCT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT s.location, s.name FROM stadium s WHERE s.capacity BETWEEN 5000 AND 10000;

SELECT s.location, s.name FROM stadium s WHERE s.capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT AVG(capacity), MAX(highest) FROM stadium;

SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(avg_attendance) FROM (SELECT AVG(capacity) AS avg_attendance FROM stadium GROUP BY stadium_id) t);

SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(avg_attendance) FROM (SELECT AVG(capacity) AS avg_attendance FROM stadium GROUP BY stadium_id) t);

SELECT COUNT(*) FROM concert WHERE YEAR(year) IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE YEAR(year) IN (2014, 2015);

SELECT s.name, COUNT(c.concert_id) FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id;

SELECT s.name, COUNT(c.concert_id) FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id;

SELECT s.name, s.capacity FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE YEAR(c.year) >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name, s.capacity FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year > 2013 GROUP BY s.stadium_id ORDER BY COUNT(c.concert_id) DESC LIMIT 1;

SELECT YEAR(year) AS concert_year, COUNT(*) FROM concert GROUP BY YEAR(year) ORDER BY COUNT(*) DESC LIMIT 1;

SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE s.stadium_id = c.stadium_id );

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id );

SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 40 INTERSECT SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age < 30;

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id AND c.year = 2014 );

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.year = 2014 AND s.stadium_id = c.stadium_id );

SELECT c.concert_name, t.theme, COUNT(DISTINCT s.singer_id) FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_id = sic.concert_id JOIN singer AS s ON sic.singer_id = s.singer_id GROUP BY c.concert_name;

SELECT c.concert_name, t.theme, COUNT(DISTINCT s.name) FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_id = sic.concert_id JOIN singer AS s ON sic.singer_id = s.singer_id GROUP BY c.concert_name, t.theme;

SELECT T1.name, COUNT(T2.concert_id) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name;

SELECT s.name, COUNT(c.concert_id) FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id GROUP BY s.name;

SELECT DISTINCT T3.name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = 2014;

SELECT DISTINCT T3.name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = 2014;

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.song_name LIKE '%Hey%';

SELECT DISTINCT T1.name, T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T1.song_name LIKE '%hey%';

SELECT s.name, s.location FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE YEAR(c.year) IN (2014, 2015);

SELECT s.name, s.location FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE YEAR(c.year) IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 );

SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT MIN(weight) FROM pets WHERE pettype = 'dog';

SELECT T3.weight FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.age = (SELECT MAX(age) FROM student);

SELECT pettype, MAX(weight) FROM pets GROUP BY pettype;

SELECT p.pettype, MAX(p.weight) as max_weight FROM pets p GROUP BY p.pettype;

SELECT COUNT(*) FROM student AS s JOIN has_pet AS h ON s.stuid = h.stuid WHERE s.age > 20;

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE pettype = 'dog' AND student.sex = 'F';

SELECT COUNT(*) FROM student AS s JOIN has_pet AS hp ON s.stuid = hp.stuid JOIN pets AS p ON hp.petid = p.petid WHERE s.sex = 'F' AND p.pettype = 'Dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT DISTINCT T3.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog');

SELECT DISTINCT T3.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype IN ('cat', 'dog');

SELECT DISTINCT T3.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' AND T3.pettype = 'dog';

SELECT DISTINCT T3.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' AND T3.pettype = 'dog';

SELECT s.major, s.age FROM student AS s LEFT JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.petid IS NULL;

SELECT s.major, s.age FROM student AS s LEFT JOIN has_pet AS hp ON s.stuid = hp.stuid LEFT JOIN pets AS p ON hp.petid = p.petid WHERE p.pettype != 'Cat';

SELECT stuid FROM student WHERE NOT stuid IN ( SELECT stuid FROM has_pet WHERE pettype = 'Cat' );

SELECT DISTINCT stuid FROM student WHERE NOT stuid IN ( SELECT stuid FROM has_pet WHERE pettype = 'Cat' );

SELECT s.fname, s.age FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.pettype = 'dog' AND NOT EXISTS ( SELECT * FROM has_pet AS h WHERE h.stuid = s.stuid AND h.pettype = 'cat');

SELECT DISTINCT T3.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' AND NOT EXISTS ( SELECT * FROM pets AS T4 WHERE T4.pettype = 'cat' AND T4.petid = T2.petid );

SELECT T.pettype, T.weight FROM pets AS T INNER JOIN has_pet AS H ON T.petid = H.petid ORDER BY T.pet_age ASC LIMIT 1;

SELECT T.pettype, T.weight FROM pets AS T INNER JOIN has_pet AS H ON T.petid = H.petid WHERE T.pet_age = (SELECT MIN(T2.pet_age) FROM pets AS T2);

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT T.petid, T.weight FROM pets AS T WHERE T.pet_age > 1;

SELECT p.pettype, AVG(t.pet_age), MAX(t.pet_age) FROM pets AS t JOIN has_pet AS h ON t.petid = h.petid JOIN student AS s ON h.stuid = s.stuid GROUP BY p.pettype;

SELECT p.pettype, AVG(t.pet_age), MAX(t.pet_age) FROM pets AS t JOIN has_pet AS h ON t.petid = h.petid GROUP BY p.pettype;

SELECT p.pettype, AVG(t.weight) FROM pets AS t JOIN has_pet AS h ON t.petid = h.petid GROUP BY p.pettype;

SELECT p.pettype, AVG(t.weight) FROM pets AS t JOIN has_pet AS h ON t.petid = h.petid JOIN student AS s ON h.stuid = s.stuid GROUP BY p.pettype;

SELECT s.fname, s.age FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.petid IS NOT NULL;

SELECT DISTINCT T1.fname, T2.pet_age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid;

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith';

SELECT stuid, COUNT(*) FROM has_pet GROUP BY stuid;

SELECT stuid FROM has_pet GROUP BY stuid ORDER BY COUNT(*) DESC;

SELECT s.fname, s.sex FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1;

SELECT s.fname, s.sex FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1;

SELECT DISTINCT T2.lname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T1.petid IN ( SELECT petid FROM pets WHERE pettype = 'Cat' AND pet_age = 3 );

SELECT T2.lname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T1.petid IN (SELECT petid FROM pets WHERE pettype = 'Cat' AND pet_age = 3);

SELECT AVG(age) FROM student WHERE NOT stuid IN (SELECT stuid FROM has_pet);

SELECT AVG(age) FROM student WHERE NOT stuid IN (SELECT stuid FROM has_pet);

SELECT COUNT(DISTINCT continent) FROM continents;

SELECT COUNT(DISTINCT continent) FROM continents;

SELECT c.contid, c.continent, COUNT(c.country) FROM countries c GROUP BY c.contid;

SELECT c.contid, c.continent, COUNT(c.country) FROM continents c GROUP BY c.contid;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT T3.fullname, T1.id, COUNT(T2.model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id;

SELECT T3.fullname, T1.id, COUNT(T2.model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T1.id;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker ORDER BY T1.horsepower ASC LIMIT 1;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker ORDER BY T1.horsepower ASC LIMIT 1;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.weight < (SELECT AVG(weight) FROM cars_data);

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.weight < ( SELECT AVG(weight) FROM cars_data );

SELECT DISTINCT T3.fullname FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.id = T2.id INNER JOIN car_names AS T3 ON T3.makeid = T2.id WHERE T1.year = 1970;

SELECT DISTINCT T3.fullname FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.id = T2.id INNER JOIN car_names AS T3 ON T3.makeid = T2.id WHERE T1.year = 1970;

SELECT T3.make, T3.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.fullname WHERE T1.year = ( SELECT MIN(year) FROM cars_data );

SELECT T3.maker, T2.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.fullname ORDER BY T2.year ASC LIMIT 1;

SELECT DISTINCT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.year > 1980;

SELECT DISTINCT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.year > 1980;

SELECT c.continent, COUNT(c.country) FROM continents c INNER JOIN countries ON c.contid = countries.continent GROUP BY c.continent;

SELECT c.continent, COUNT(cm.id) FROM continents c INNER JOIN car_makers cm ON c.contid = cm.country GROUP BY c.continent;

SELECT DISTINCT T3.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN car_makers AS T3 ON T2.countryid = T3.country WHERE T1.id IN ( SELECT MAX(id) FROM car_makers );

SELECT T3.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid GROUP BY T1.maker ORDER BY COUNT(T1.id) DESC LIMIT 1;

SELECT T2.fullname, COUNT(T1.model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id GROUP BY T2.fullname;

SELECT T3.fullname, COUNT(T1.model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.maker = T2.id INNER JOIN car_names AS T3 ON T1.model = T3.model GROUP BY T2.id;

SELECT T3.accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T1.make = T3.fullname WHERE T1.model = 'amc hornet sportabout (sw)';

SELECT T3.accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.id = T2.id INNER JOIN car_makers AS T3 ON T1.makeid = T3.id WHERE T1.model = 'amc hornet sportabout (sw)';

SELECT COUNT(DISTINCT T2.maker) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T1.continent = 3;

SELECT COUNT(DISTINCT T3.maker) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country INNER JOIN car_names AS T3 ON T2.id = T3.makeid WHERE T1.countryname = 'France';

SELECT COUNT(*) FROM car_names WHERE makeid IN ( SELECT id FROM car_makers WHERE country = 3 );

SELECT COUNT(*) FROM cars_data WHERE country = ( SELECT countryid FROM countries WHERE countryname = 'United States' );

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT DISTINCT T1.maker, T1.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker;

SELECT T3.maker, T2.model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.make = T2.make INNER JOIN car_makers AS T3 ON T1.makeid = T3.id;

SELECT DISTINCT T3.country FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN car_makers AS T3 ON T2.countryid = T3.countryid;

SELECT DISTINCT T3.countryid, T3.fullname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid INNER JOIN car_names AS T3 ON T2.countryid = T3.makeid;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT AVG(weight), year FROM cars_data GROUP BY year;

SELECT T3.year, AVG(T3.weight), AVG(T3.year) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.fullname GROUP BY T3.year;

SELECT DISTINCT T2.country FROM continents AS T1 INNER JOIN countries AS T2 ON T1.contid = T2.continent WHERE T1.continent = 'Europe' GROUP BY T2.country HAVING COUNT(DISTINCT T2.id) >= 3;

SELECT DISTINCT T2.countryname FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.countryid WHERE T2.continent = 'Europe' GROUP BY T2.countryname HAVING COUNT(DISTINCT T1.maker) >= 3;

SELECT T2.make, MAX(T2.horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.cylinders = 3 GROUP BY T2.make;

SELECT T2.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.make WHERE T1.cylinders = 3 GROUP BY T2.make ORDER BY MAX(T1.horsepower) DESC LIMIT 1;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker ORDER BY T1.mpg DESC LIMIT 1;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker ORDER BY T1.mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(t.edispl) FROM cars_data t INNER JOIN model_list m ON t.id = m.model WHERE m.model = 'Volvo';

SELECT AVG(t.edispl) FROM cars_data t INNER JOIN car_names c ON t.id = c.makeid WHERE c.make = 'VOLVO';

SELECT T3.accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.model = T3.model GROUP BY T1.cylinders ORDER BY MAX(T3.accelerate);

SELECT MAX(a.accelerate) FROM cars_data a GROUP BY a.cylinders;

SELECT T3.model FROM car_makers AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.model = T3.model GROUP BY T3.model ORDER BY COUNT(T3.model) DESC LIMIT 1;

SELECT T3.model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.make = T2.maker INNER JOIN cars_data AS T3 ON T1.id = T3.id GROUP BY T3.model ORDER BY COUNT(T3.model) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM car_makers WHERE fullname = 'American Motor Company';

SELECT COUNT(*) FROM car_makers WHERE fullname = 'American Motor Company';

SELECT T2.fullname, T2.id FROM car_makers AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid GROUP BY T2.id HAVING COUNT(T2.model) > 3;

SELECT T2.fullname FROM car_makers AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid GROUP BY T1.maker HAVING COUNT(T2.model) > 3;

SELECT DISTINCT T2.model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.make = T2.maker WHERE T1.fullname LIKE '%General Motors%' OR T2.weight > 3500;

SELECT DISTINCT T2.model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.fullname LIKE '%General Motors%' OR T2.weight > 3500;

SELECT DISTINCT T2.year FROM cars_data AS T1 INNER JOIN cars_data AS T2 ON T1.id = T2.id WHERE T1.weight BETWEEN 3000 AND 4000;

SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.weight < 4000 INTERSECT SELECT DISTINCT T1.year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.weight > 3000;

SELECT T3.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.maker ORDER BY T1.accelerate DESC LIMIT 1;

SELECT T3.horsepower FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.maker ORDER BY T1.accelerate DESC LIMIT 1;

SELECT MIN(cylinders) FROM cars_data WHERE model = 'volvo';

SELECT MIN(cylinders) FROM cars_data WHERE model LIKE 'volvo%' AND accelerate = (SELECT MAX(accelerate) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(*) FROM cars_data WHERE accelerate > ( SELECT MAX(horsepower) FROM cars_data );

SELECT COUNT(DISTINCT T.countryid) FROM countries AS T WHERE T.continent IN ( SELECT c.continent FROM continents AS c GROUP BY c.continent HAVING COUNT(c.contid) > 2 );

SELECT COUNT(DISTINCT T.countryid) FROM countries AS T WHERE T.continent IN ( SELECT c.continent FROM continents AS c GROUP BY c.continent HAVING COUNT(c.contid) > 2 );

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;

SELECT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.make = T3.maker WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;

SELECT DISTINCT T2.makeid, T2.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid WHERE T1.horsepower > ( SELECT MIN(horsepower) FROM cars_data ) AND T2.cylinders <= 3;

SELECT DISTINCT T3.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.maker WHERE T1.horsepower < 80 GROUP BY T3.make HAVING COUNT(T3.maker) > 1;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.weight < 3500 AND T2.fullname != 'Ford Motor Company';

SELECT DISTINCT T2.model FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE T1.weight < 3500 AND T2.fullname != 'Ford Motor Co.';

SELECT DISTINCT T3.country FROM car_makers AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid LEFT OUTER JOIN countries AS T3 ON T2.country = T3.countryid WHERE T1.fullname IS NULL;

SELECT DISTINCT T2.countryname FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T2.id IS NULL;

SELECT DISTINCT T2.id, T2.maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T2.maker HAVING COUNT(T2.model) >= 2 AND COUNT(DISTINCT T1.maker) > 3;

SELECT DISTINCT T2.id, T2.maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker GROUP BY T2.maker HAVING COUNT(T2.model) >= 2 AND COUNT(DISTINCT T1.id) > 3;

SELECT DISTINCT T1.id, T1.name FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T1.continent IN ('Europe', 'Asia') AND T2.fullname LIKE '%car%';

SELECT DISTINCT T1.countryid, T1.countryname FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T2.maker IS NULL OR T2.fullname LIKE '%Fiat%';

SELECT T3.country FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.uid INNER JOIN airports AS T3 ON T1.sourceairport = T3.airportcode WHERE T2.abbreviation = 'JET';

SELECT T3.country FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode INNER JOIN airlines AS T3 ON T3.abbreviation = T2.countryabbrev WHERE T1.airline = 'JetBlue';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';

SELECT T3.abbreviation FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport = T2.airportcode JOIN airlines AS T3 ON T1.airline = T3.uid WHERE T1.airline = 'JetBlue';

SELECT DISTINCT T1.airline, T1.abbreviation FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T2.city LIKE '%USA%';

SELECT DISTINCT T1.airline, T1.abbreviation FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T2.country = 'USA';

SELECT DISTINCT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(DISTINCT sourceairport) FROM flights;

SELECT COUNT(DISTINCT sourceairport) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(DISTINCT T1.airline) FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T2.country = 'USA';

SELECT COUNT(DISTINCT airline) FROM airlines WHERE country = 'USA';

SELECT city FROM airports WHERE airportcode = 'ALTON';

SELECT city FROM airports WHERE airportcode = 'ALTON';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';

SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE countryabbrev = 'APG');

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE country = 'APG');

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname LIKE '%ATO%');

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE country = 'ATO');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABERDEEN';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABD';

SELECT COUNT(*) FROM flights WHERE destairport = 'ABD' AND city LIKE '%Aberdeen%';

SELECT COUNT(*) FROM flights WHERE destairport = 'ABD';

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE destinationairport = 'ASY' AND airline = 'United Airlines';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'AHD' AND airline LIKE '%United%';

SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT COUNT(*) FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen' AND f.airline = 'United Airlines';

SELECT T3.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode INNER JOIN airports AS T3 ON T1.sourceairport = T3.airportcode GROUP BY T3.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode INNER JOIN airports AS T3 ON T1.sourceairport = T3.airportcode GROUP BY T1.flightno ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode INNER JOIN airports AS T3 ON T1.destairport = T3.airportcode GROUP BY T3.city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.city FROM flights AS T1 JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T1.sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.airportcode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T1.airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) LIMIT 1 ) INTERSECT SELECT airportcode FROM airports WHERE airportcode IN ( SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) LIMIT 1 );

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline ORDER BY COUNT(*) ASC LIMIT 1;

SELECT T3.abbreviation, T4.country FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode INNER JOIN airlines AS T3 ON T1.airline = T3.uid GROUP BY T3.abbreviation ORDER BY COUNT(*) ASC LIMIT 1;

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport INNER JOIN airlines AS T3 ON T3.abbreviation = T2.airline WHERE T1.airportcode = 'AHD';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport INNER JOIN airlines AS T3 ON T3.abbreviation = T2.airline WHERE T1.city LIKE 'AHD%';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport INNER JOIN airlines AS T3 ON T3.abbreviation = T2.airline WHERE T1.airportcode = 'AHD';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.destairport INNER JOIN airlines AS T3 ON T2.airline = T3.abbreviation WHERE T1.airportcode = 'AHD';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country AND T1.city <> T2.city WHERE T1.airportcode = 'APG' AND T2.airportcode = 'CVO';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country AND T1.city = 'APG' AND T2.city = 'CVO' INNER JOIN flights AS T3 ON T3.sourceairport = T1.airportcode OR T3.destairport = T1.airportcode;

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T1.airportcode = 'CVO' AND T2.airportcode = 'APG';

SELECT DISTINCT T3.airline FROM airports AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T1.airportcode = 'CVO' AND T2.airportcode != 'APG';

SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT DISTINCT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT f.flightno FROM flights f WHERE f.airline = 'United Airlines';

SELECT DISTINCT T3.flightno FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode INNER JOIN airlines AS T3 ON T1.airline = T3.uid WHERE T3.abbreviation = 'UA';

SELECT f.flightno FROM flights f WHERE f.sourceairport = 'APG';

SELECT f.flightno FROM flights f JOIN airports a ON f.sourceairport = a.airportcode WHERE a.countryabbrev = 'APG';

SELECT f.flightno FROM flights f WHERE f.destairport = 'APG';

SELECT f.flightno FROM flights f WHERE f.destairport = 'APG';

SELECT f.flightno FROM flights f JOIN airports a ON f.sourceairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT DISTINCT T3.flightno FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport INNER JOIN airports AS T3 ON T3.airportcode = T2.destairport WHERE T1.city = 'Aberdeen';

SELECT f.flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT f.flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene');

SELECT COUNT(*) FROM flights WHERE destairport IN ('ABE', 'ABN');

SELECT DISTINCT T2.airportname FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport OR T1.airportcode = T2.destairport WHERE T1.airportname IS NULL;

SELECT DISTINCT T3.airportname FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport OR T1.airportcode = T2.destairport INNER JOIN airports AS T3 ON T1.airportcode = T3.airportcode WHERE T2.flightno IS NULL;

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age ASC;

SELECT name FROM employee ORDER BY age ASC;

SELECT city, COUNT(*) FROM employee GROUP BY city;

SELECT city, COUNT(*) FROM employee GROUP BY city;

SELECT DISTINCT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(DISTINCT e.employee_id) > 1;

SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT DISTINCT T2.location FROM shop AS T1 INNER JOIN shop_location AS T2 ON T1.shop_id = T2.shop_id;

SELECT DISTINCT T2.location FROM shop AS T1 INNER JOIN shop_location AS T2 ON T1.shop_id = T2.shop_id;

SELECT m.name, s.district FROM shop s JOIN employee e ON s.shop_id = e.employee_id JOIN hiring h ON e.employee_id = h.employee_id JOIN shop_manager sm ON s.shop_id = sm.shop_id WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT m.name, s.district FROM shop s JOIN employee e ON s.shop_id = e.employee_id JOIN hiring h ON e.employee_id = h.employee_id JOIN shop_manager sm ON s.shop_id = sm.shop_id WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;

SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM employee WHERE employee_id IN ( SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT e.name FROM employee e INNER JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee e INNER JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT e.name FROM employee e INNER JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);

SELECT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.employee_id IS NULL;

SELECT T3.name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.employee_id = T2.employee_id INNER JOIN shop AS T3 ON T2.shop_id = T3.shop_id GROUP BY T3.name ORDER BY COUNT(T1.employee_id) DESC LIMIT 1;

SELECT name FROM shop WHERE shop_id = ( SELECT shop_id FROM employee GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT DISTINCT T3.name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.shop_id = T2.shop_id LEFT JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.employee_id IS NULL;

SELECT DISTINCT T3.name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.shop_id = T2.shop_id LEFT JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.employee_id IS NULL;

SELECT s.name AS shop_name, COUNT(h.employee_id) AS num_hired FROM hire h JOIN shop s ON h.shop_id = s.shop_id GROUP BY s.name;

SELECT s.name AS shop_name, COUNT(e.employee_id) AS num_employees FROM employee e JOIN hiring h ON e.employee_id = h.employee_id JOIN shop s ON h.shop_id = s.shop_id GROUP BY s.name;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) FROM evaluation;

SELECT * FROM hiring;

SELECT * FROM hiring;

SELECT DISTINCT T2.district FROM shop AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.number_products < 3000 AND T2.number_products > 10000;

SELECT DISTINCT T1.district FROM shop AS T1 INNER JOIN ( SELECT * FROM shop WHERE number_products < 3000 INTERSECT SELECT * FROM shop WHERE number_products > 10000 ) AS T2 ON TRUE;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(*) FROM documents;

SELECT COUNT(*) FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT T1.document_id, T1.document_name, T1.document_description FROM documents AS T1;

SELECT T1.document_name, T1.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%';

SELECT T1.document_name, T1.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%';

SELECT T3.document_id, T3.template_id, T3.document_name FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code WHERE T1.document_name = 'Robbin CV';

SELECT T3.document_id, T2.template_id, T3.document_description FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code WHERE T1.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT t.template_id) FROM templates AS t;

SELECT COUNT(DISTINCT t.template_id) FROM templates AS t;

SELECT COUNT(*) FROM documents WHERE template_id = ( SELECT template_id FROM templates WHERE template_type_code = 'PPT' );

SELECT COUNT(T2.template_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'PPT';

SELECT t.template_id, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;

SELECT DISTINCT T1.template_id, COUNT(T1.template_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id;

SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT t.template_id, t.template_type_code FROM templates AS t GROUP BY t.template_type_code ORDER BY COUNT(t.template_id) DESC LIMIT 1;

SELECT DISTINCT t.template_id FROM templates AS t INNER JOIN documents AS d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;

SELECT DISTINCT t.template_id FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;

SELECT DISTINCT t.template_id FROM templates AS t WHERE t.template_id NOT IN ( SELECT d.template_id FROM documents AS d );

SELECT t.template_id FROM templates AS t WHERE NOT EXISTS ( SELECT 1 FROM documents AS d WHERE t.template_id = d.template_id );

SELECT COUNT(*) FROM templates;

SELECT COUNT(*) FROM templates;

SELECT t.template_id, t.version_number, t.template_type_code FROM templates t;

SELECT t.template_id, t.version_number, t.template_type_code FROM templates t;

SELECT DISTINCT template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM ref_template_types;

SELECT DISTINCT t.template_id FROM templates t WHERE t.template_type_code IN ('PP', 'PPT');

SELECT DISTINCT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT T1.version_number, T1.template_type_code FROM templates AS T1 WHERE T1.version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT t.template_type_code, COUNT(t.template_id) FROM templates t GROUP BY t.template_type_code;

SELECT t.template_type_code, COUNT(t.template_id) FROM templates t GROUP BY t.template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT template_type_code FROM ref_template_types WHERE COUNT(*) < 3;

SELECT DISTINCT template_type_code FROM ref_template_types WHERE template_type_code IN ( SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3 );

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT t.template_type_code FROM templates AS t JOIN documents AS d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';

SELECT t.template_type_code FROM templates AS t JOIN documents AS d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';

SELECT T3.document_name FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id INNER JOIN paragraphs AS T3 ON T2.document_id = T3.document_id WHERE T1.template_type_code = 'BK';

SELECT d.document_name FROM documents d JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK';

SELECT t.template_type_code, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_type_code;

SELECT t.template_type_code, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT template_type_code FROM ref_template_types WHERE template_type_code NOT IN ( SELECT template_type_code FROM documents );

SELECT DISTINCT t.template_type_code FROM templates AS t WHERE t.template_type_code NOT IN ( SELECT d.template_id FROM documents AS d );

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT t.template_type_code, r.template_type_description FROM templates AS t JOIN ref_template_types AS r ON t.template_type_code = r.template_type_code;

SELECT DISTINCT t.template_type_code, r.template_type_description FROM templates AS t INNER JOIN ref_template_types AS r ON t.template_type_code = r.template_type_code;

SELECT DISTINCT t.template_id FROM templates AS t INNER JOIN ref_template_types AS r ON t.template_type_code = r.template_type_code WHERE r.template_type_description = 'Presentation';

SELECT DISTINCT template_id FROM templates WHERE template_type_code = ( SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation' );

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Summer Show' );

SELECT COUNT(*) FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Summer Show' );

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text LIKE '%Korea %';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text LIKE '%Korea %';

SELECT T1.paragraph_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T1.paragraph_id, T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Welcome to NY';

SELECT T3.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id INNER JOIN templates AS T3 ON T1.template_id = T3.template_id WHERE T1.document_name = 'Customer reviews';

SELECT T3.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id INNER JOIN templates AS T3 ON T1.template_id = T3.template_id WHERE T1.document_name = 'Customer reviews';

SELECT T1.document_id, COUNT(T3.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY T1.document_id;

SELECT DISTINCT T1.document_id, COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY T1.document_id;

SELECT T1.document_id, T1.document_name, COUNT(T3.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;

SELECT T1.document_id, T1.document_name, COUNT(T3.paragraph_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN paragraphs AS T3 ON T1.document_id = T3.document_id GROUP BY T1.document_id;

SELECT DISTINCT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) >= 2;

SELECT DISTINCT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) >= 2;

SELECT document_id, document_name FROM documents ORDER BY COUNT(paragraph_id) DESC LIMIT 1;

SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) DESC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2;

SELECT DISTINCT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) BETWEEN 1 AND 2;

SELECT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text LIKE '%Brazil%' AND T2.paragraph_text LIKE '%Ireland%';

SELECT DISTINCT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT name FROM teacher ORDER BY age ASC;

SELECT name FROM teacher ORDER BY age ASC;

SELECT T2.name, T2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id;

SELECT T2.name, T2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id;

SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown != 'Little Lever Urban District';

SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown != 'Little Lever Urban District';

SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.age IN (32, 33);

SELECT DISTINCT T.name FROM teacher AS T INNER JOIN course_arrange AS CA ON T.teacher_id = CA.teacher_id WHERE T.age IN (32, 33);

SELECT T2.hometown FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = (SELECT MIN(age) FROM teacher);

SELECT T2.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = (SELECT MIN(age) FROM teacher);

SELECT T2.hometown, COUNT(T1.teacher_id) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown;

SELECT T2.hometown, COUNT(T1.teacher_id) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T2.hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown HAVING COUNT(*) >= 2;

SELECT DISTINCT T2.hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown HAVING COUNT(T2.teacher_id) >= 2;

SELECT T2.name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id;

SELECT T2.name AS teacher_name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id;

SELECT T2.name AS teacher_name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id ORDER BY T2.name ASC;

SELECT T2.name AS teacher_name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id ORDER BY T2.name;

SELECT T2.name FROM course AS T1 INNER JOIN course_arrange AS T2 ON T1.course_id = T2.course_id WHERE T1.course LIKE '%math%';

SELECT DISTINCT T2.name FROM course AS T1 JOIN course_arrange AS T2 ON T1.course_id = T2.course_id WHERE T1.course LIKE '%math%';

SELECT t.name, COUNT(ca.course_id) FROM course_arrange ca JOIN teacher t ON ca.teacher_id = t.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.course_id) FROM course_arrange ca JOIN teacher t ON ca.teacher_id = t.teacher_id GROUP BY t.name;

SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(*) >= 2;

SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(*) >= 2;

SELECT DISTINCT T2.name FROM course AS T1 LEFT JOIN course_arrange AS T2 ON T1.course_id = T2.course_id WHERE T2.teacher_id IS NULL;

SELECT DISTINCT T2.name FROM course AS T1 LEFT JOIN course_arrange AS T2 ON T1.course_id = T2.course_id WHERE T2.teacher_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT name FROM visitor WHERE level_of_membership > '4' ORDER BY level_of_membership DESC;

SELECT AVG(age) FROM visitor WHERE level_of_membership < '5';

SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > '4' ORDER BY v.age DESC;

SELECT m.name FROM museum m WHERE m.num_of_staff = (SELECT MAX(num_of_staff) FROM museum);

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT m.open_year, m.num_of_staff FROM museum AS m WHERE m.name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010 );

SELECT v.id, v.name, v.age FROM visitor v INNER JOIN visit t ON v.id = t.visitor_id GROUP BY v.id HAVING COUNT(DISTINCT t.museum_id) > 1;

SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit t ON v.id = t.visitor_id ORDER BY t.total_spent DESC LIMIT 1;

SELECT v.name, m.museum_id FROM visit AS v JOIN museum AS m ON v.museum_id = m.museum_id GROUP BY v.museum_id ORDER BY COUNT(v.id) DESC LIMIT 1;

SELECT m.name FROM museum m LEFT JOIN visit v ON m.museum_id = v.museum_id WHERE v.id IS NULL;

SELECT v.name, v.age FROM visitor v INNER JOIN visit t ON v.id = t.visitor_id GROUP BY v.id ORDER BY COUNT(t.museum_id) DESC LIMIT 1;

SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;

SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = '1';

SELECT v.name FROM visitor v JOIN visit t ON v.id = t.visitor_id WHERE m.open_year < 2009 AND m.open_year > 2011;

SELECT COUNT(*) FROM visitor WHERE NOT EXISTS ( SELECT * FROM visit WHERE visitor.id = v.id AND museum.open_year > 2010 );

SELECT COUNT(*) FROM museum WHERE open_year < 2009 OR open_year > 2013;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(match_num) FROM matches;

SELECT COUNT(match_num) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(T2.winner_rank) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id;

SELECT AVG(T2.winner_rank) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id;

SELECT MAX(ranking) FROM rankings WHERE player_id IN ( SELECT loser_id FROM matches );

SELECT T2.ranking FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.loser_id = T2.player_id ORDER BY T2.ranking ASC LIMIT 1;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT players.country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;

SELECT DISTINCT T2.tourney_name FROM matches AS T1 INNER JOIN tourneys AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T2.tourney_name HAVING COUNT(T1.match_num) > 10;

SELECT DISTINCT T1.winner_name FROM matches AS T1 INNER JOIN matches AS T2 ON T1.match_num = T2.match_num WHERE T1.year = 2013 AND T2.year = 2016;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.country_code, T1.first_name HAVING COUNT(DISTINCT T2.tourney_name) = 2;

SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.first_name, T1.country_code HAVING COUNT(DISTINCT T2.tourney_name) = 2;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' ORDER BY T1.birth_date;

SELECT first_name, country_code FROM players WHERE player_id IN ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(ranking_date) DESC LIMIT 1 );

SELECT first_name, country_code FROM players WHERE player_id IN ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(ranking_date) DESC LIMIT 1 );

SELECT MAX(year) FROM matches;

SELECT MAX(year) FROM matches;

SELECT T1.first_name, T1.winner_rank_points FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.best_of DESC LIMIT 1;

SELECT T1.winner_name, SUM(T2.ranking_points) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id GROUP BY T1.winner_name ORDER BY SUM(T2.ranking_points) DESC LIMIT 1;

SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.minutes = ( SELECT MAX(minutes) FROM matches );

SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN matches AS T2 ON T1.match_num = T2.match_num WHERE T1.minutes > T2.minutes;

SELECT AVG(ranking), T1.first_name FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT COUNT(DISTINCT T1.country_code), T2.first_name, T2.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code;

SELECT COUNT(DISTINCT T1.country_code), T2.player_id FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code;

SELECT T1.country_code FROM players AS T1 INNER JOIN ( SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1 ) AS T2 ON T1.country_code = T2.country_code;

SELECT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code ORDER BY COUNT(T1.player_id) DESC LIMIT 1;

SELECT DISTINCT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code HAVING COUNT(T2.player_id) > 50;

SELECT DISTINCT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code HAVING COUNT(T2.player_id) > 50;

SELECT COUNT(DISTINCT ranking_date), SUM(tours) FROM rankings;

SELECT ranking_date, COUNT(ranking) FROM rankings GROUP BY ranking_date;

SELECT COUNT(year), year FROM matches GROUP BY year;

SELECT T2.year FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T2.year;

SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking IS NOT NULL ORDER BY T2.ranking ASC LIMIT 3;

SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.winner_age < 30 ORDER BY T1.winner_age LIMIT 3;

SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND winner_ioc IN ('WTA', 'ATP') GROUP BY winner_ioc HAVING COUNT(winner_ioc) > 1;

SELECT COUNT(winner_id) FROM matches WHERE winner_hand = 'L' AND winner_tourney = 'WTA';

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.best_of = 5 AND T1.hand = 'R' ORDER BY T1.ranking_points DESC LIMIT 1;

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1;

SELECT COUNT(*), T2.hand FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.hand;

SELECT COUNT(*), T2.hand FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.hand;

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name ASC;

SELECT b.name, b.date, b.result FROM battle b;

SELECT MIN(killed), MAX(killed) FROM death;

SELECT AVG(injured) FROM death;

SELECT T3.note FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id INNER JOIN battle AS T3 ON T2.caused_by_ship_id = T3.id WHERE T1.tonnage = 't';

SELECT b.name, b.result FROM battle AS b WHERE b.bulgarian_commander != 'Boril';

SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type LIKE '%Brig%';

SELECT b.id, b.name FROM battle b INNER JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id HAVING SUM(d.killed) > 10;

SELECT s.id, s.name FROM ship s INNER JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id ORDER BY SUM(d.injured + d.killed) DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE NOT EXISTS ( SELECT 1 FROM ship WHERE ship.id = battle.id AND ship.tonnage = 225 );

SELECT b.name, b.date FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');

SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (SELECT 1 FROM ship s WHERE s.location = 'English Channel' AND s.id IN (b.lost_in_battle));

SELECT t3.note FROM death AS t1 INNER JOIN ship AS t2 ON t1.caused_by_ship_id = t2.id INNER JOIN battle AS t3 ON t2.id = t3.bulgarian_commander WHERE t1.note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(*) FROM courses;

SELECT COUNT(*) FROM courses;

SELECT T1.course_name, T1.course_description FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id WHERE T2.student_enrolment_id = 4;

SELECT T2.course_description FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id WHERE T1.department_id = 4;

SELECT DISTINCT T1.zip_postcode FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.first_name = 'John' AND T2.middle_name = 'David' AND T2.last_name = 'Smith' AND T1.city = 'Port Chelsea';

SELECT DISTINCT zip_postcode FROM addresses WHERE line_1 = 'Port Chelsea';

SELECT department_name FROM departments ORDER BY COUNT(degree_program_id) DESC LIMIT 1;

SELECT department_id FROM degree_programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(DISTINCT T1.department_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id;

SELECT COUNT(DISTINCT T1.department_id) FROM degree_programs AS T1;

SELECT COUNT(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1;

SELECT COUNT(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1;

SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'Engineering' );

SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'Engineering' );

SELECT T1.section_name, T1.section_description FROM sections AS T1;

SELECT T1.section_name, T1.section_description FROM sections AS T1;

SELECT T1.course_id, T1.course_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) <= 2;

SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2;

SELECT DISTINCT section_name FROM sections ORDER BY section_name DESC;

SELECT DISTINCT T1.section_name FROM sections AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.section_id = T2.student_course_id ORDER BY T1.section_name DESC;

SELECT T.semester_id, T.semester_name FROM semesters AS T GROUP BY T.semester_id ORDER BY COUNT(T.student_id) DESC LIMIT 1;

SELECT T2.semester_id, T2.section_name FROM student_enrolment AS T1 INNER JOIN sections AS T2 ON T1.section_id = T2.section_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT department_name FROM departments WHERE department_name LIKE '%computer%';

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id IN ( SELECT * FROM degree_programs GROUP BY degree_program_id HAVING COUNT(*) = 2 ) AND T2.semester_id IN ( SELECT DISTINCT semester_id FROM semesters );

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment_courses AS TC ON T1.student_id = TC.student_id INNER JOIN student_enrolment AS TE ON TC.student_enrolment_id = TE.student_enrolment_id INNER JOIN degree_programs AS DP ON TE.degree_program_id = DP.degree_program_id WHERE COUNT(DISTINCT DP.degree_program_id) = 2 AND TE.semester_id IN ( SELECT DISTINCT semester_id FROM semesters GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2 );

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment_courses AS TC ON T1.student_id = TC.student_id INNER JOIN degree_programs AS D ON TC.degree_program_id = D.degree_program_id WHERE D.degree_summary_name LIKE 'Bachelor%';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE 'Bachelors%';

SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT T4.degree_program_id, T4.degree_summary_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN degree_programs AS T3 ON T2.course_id = T3.degree_program_id INNER JOIN degree_programs AS T4 ON T3.degree_program_id = T4.degree_program_id GROUP BY T4.degree_program_id ORDER BY COUNT(T4.degree_program_id) DESC LIMIT 1;

SELECT T2.degree_program_id, T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T1.student_id) AS num_enrollments FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.degree_program_id) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1;

SELECT T2.semester_name FROM semesters AS T1 LEFT JOIN student_enrolment ON T1.semester_id = T1.semester_id WHERE T1.semester_name IS NULL;

SELECT T2.semester_name FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.student_enrolment_id IS NULL;

SELECT DISTINCT T2.course_name FROM student_enrolment AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id;

SELECT DISTINCT T2.course_name FROM student_enrolment AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T1.student_enrolment_id IS NOT NULL;

SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1;

SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT T2.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.date_left IS NULL AND T1.student_id IN ( SELECT DISTINCT student_id FROM student_enrolment_courses AS T4 INNER JOIN student_enrolment AS T3 ON T4.student_enrolment_id = T3.student_enrolment_id INNER JOIN degree_programs AS T5 ON T3.degree_program_id = T5.degree_program_id GROUP BY student_id HAVING COUNT(*) = 0 ) AND T2.state_province_county = 'North Carolina';

SELECT T2.last_name FROM semesters AS T1 INNER JOIN students AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name LIKE 'Fall%' AND T2.current_address_id IS NULL AND T2.permanent_address_id IS NULL AND T2.first_name IS NULL GROUP BY T2.last_name;

SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) >= 2 );

SELECT transcript_id FROM transcripts WHERE transcript_date = '2019-04-01' GROUP BY transcript_id HAVING COUNT(*) >= 2;

SELECT T2.cell_mobile_number FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward';

SELECT T2.cell_mobile_number FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.date_first_registered = ( SELECT MIN(date_first_registered) FROM students );

SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM students );

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Graduate' ORDER BY T1.date_first_registered ASC LIMIT 1;

SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN transcripts AS T3 ON T2.student_enrolment_id = T3.transcript_id WHERE T3.transcript_date IS NOT NULL ORDER BY T3.transcript_date ASC LIMIT 1;

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id <> T2.address_id;

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id <> T2.address_id;

SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T1.address_id) DESC LIMIT 1;

SELECT T1.address_id, T1.line_1, T1.line_2 FROM addresses AS T1 INNER JOIN student_enrolment AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT AVG(T2.transcript_date) FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id;

SELECT AVG(T2.transcript_date) FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id;

SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1;

SELECT transcript_date FROM transcripts ORDER BY transcript_date LIMIT 1;

SELECT COUNT(*) FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT MAX(T.transcript_date) FROM transcripts AS T;

SELECT MAX(T.transcript_date) FROM transcripts AS T;

SELECT COUNT(T1.student_enrolment_id), T1.course_id FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id ORDER BY COUNT(T1.student_enrolment_id) DESC LIMIT 1;

SELECT T1.course_id FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_id ORDER BY COUNT(T1.course_id) DESC LIMIT 1;

SELECT transcript_id FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT T1.semester_name FROM semesters AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id IN ( SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Master', 'Bachelor') ) GROUP BY T1.semester_name HAVING COUNT(DISTINCT T2.student_id) > 1;

SELECT T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_program_id IN ( SELECT * FROM degree_programs WHERE degree_summary_name LIKE 'Master%' ) INTERSECT SELECT T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_program_id IN ( SELECT * FROM degree_programs WHERE degree_summary_name LIKE 'Bachelors%' );

SELECT COUNT(DISTINCT T1.current_address_id) FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id;

SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3 FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id;

SELECT * FROM students ORDER BY last_name DESC;

SELECT * FROM students ORDER BY last_name DESC;

SELECT T1.section_name FROM sections AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.section_id = T2.student_course_id WHERE T2.course_id = 4;

SELECT T2.section_description FROM sections AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.section_id = T2.student_course_id WHERE T1.section_name = 'H';

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title;

SELECT DISTINCT title FROM cartoon ORDER BY title;

SELECT T.title FROM cartoon AS T JOIN tv_channel AS C ON T.channel = C.id WHERE T.directed_by = 'Ben Jones';

SELECT DISTINCT T2.title FROM tv_cartoon AS T1 INNER JOIN tv_cartoon_director AS T2 ON T1.id = T2.cartoon_id WHERE T2.director = 'Ben Jones';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT T.title, T.directed_by FROM cartoon AS T ORDER BY T.original_air_date;

SELECT t.title, c.directed_by FROM tv_cartoons AS t JOIN tv_series AS s ON t.channel = s.channel ORDER BY t.original_air_date;

SELECT DISTINCT T2.title FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT DISTINCT T2.title FROM tv_cartoon AS T1 INNER JOIN tv_cartoon_director AS T2 ON T1.id = T2.cartoon_id WHERE T2.director IN ('Ben Jones', 'Brandon Vietti');

SELECT t.country, COUNT(t.id) FROM tv_channel t GROUP BY t.country ORDER BY COUNT(t.id) DESC LIMIT 1;

SELECT t.country, COUNT(t.id) FROM tv_channel t GROUP BY t.country ORDER BY COUNT(t.id) DESC LIMIT 1;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT t.package_option FROM tv_channel t WHERE t.series_name = 'Sky Radio';

SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT COUNT(DISTINCT tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'English';

SELECT COUNT(DISTINCT tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'English';

SELECT language, COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1;

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language ORDER BY COUNT(t.id) ASC LIMIT 1;

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language;

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language;

SELECT t.channel, t.series_name FROM tv_channel t INNER JOIN cartoon c ON t.id = c.channel WHERE c.title = 'The Rise of the Blue Beetle!';

SELECT t.series_name FROM tv_series s JOIN tv_channel c ON s.channel = c.id WHERE c.package_option = 'Cartoon' AND s.title = 'The Rise of the Blue Beetle';

SELECT T.title FROM cartoon AS T JOIN tv_channel AS C ON T.channel = C.id WHERE C.series_name = 'Sky Radio';

SELECT T.title FROM cartoon AS T JOIN tv_channel AS C ON T.channel = C.id WHERE C.series_name = 'Sky Radio';

SELECT T2.episode FROM tv_series AS T1 INNER JOIN tv_episode ON T1.id = T2.series_id ORDER BY T1.rating DESC;

SELECT T2.episode FROM tv_series AS T1 INNER JOIN tv_episode ON T1.channel = T1.id ORDER BY T1.rating DESC;

SELECT T2.episode, T2.rating FROM tv_series AS T1 INNER JOIN tv_episode ON T1.id = T1.channel WHERE T1.rating IN (SELECT MAX(rating) FROM tv_series LIMIT 3);

SELECT t.title, t.episode, t.rating FROM tv_series AS t ORDER BY t.rating DESC LIMIT 3;

SELECT MIN(t1.share), MAX(t1.share) FROM tv_series t1;

SELECT MAX(t1.share), MIN(t1.share) FROM tv_series t1 INNER JOIN tv_channel t2 ON t1.channel = t2.id;

SELECT T2.air_date FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime';

SELECT T2.air_date FROM tv_episode AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.episode WHERE T1.title = 'A Love of a Lifetime';

SELECT T2.weekly_rank FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime';

SELECT T2.weekly_rank FROM tv_episode AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.episode WHERE T1.title = 'A Love of a Lifetime';

SELECT t.channel, t.series_name FROM tv_series t WHERE t.episode = 'A Love of a Lifetime';

SELECT t.series_name FROM tv_series AS t WHERE t.episode = 'A Love of a Lifetime';

SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio';

SELECT T2.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.series_name = 'Sky Radio';

SELECT director FROM cartoon GROUP BY director;

SELECT T2.directed_by, COUNT(T1.id) FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id GROUP BY T2.directed_by;

SELECT T2.production_code, T2.channel FROM tv_series AS T1 INNER JOIN cartoon AS T2 ON T1.channel = T2.channel ORDER BY T1.air_date DESC LIMIT 1;

SELECT t.title, c.channel FROM cartoon AS t JOIN tv_channel AS c ON t.channel = c.id ORDER BY t.original_air_date DESC LIMIT 1;

SELECT t.package_option, c.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel WHERE t.hight_definition_tv = TRUE;

SELECT t.package_option, c.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel WHERE t.hight_definition_tv = TRUE;

SELECT DISTINCT t.country FROM tv_channel t JOIN cartoon c ON t.id = c.channel WHERE c.written_by LIKE '%Todd Casey%';

SELECT DISTINCT T2.country FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.channel IN (SELECT id FROM cartoon WHERE written_by = 'Todd Casey');

SELECT DISTINCT t.country FROM tv_channel t LEFT JOIN cartoon c ON t.id = c.channel WHERE c.directed_by IS NULL OR c.directed_by != 'Todd Casey';

SELECT DISTINCT t.country FROM tv_channel t WHERE NOT t.id IN (SELECT c.channel FROM cartoon c WHERE c.directed_by = 'Todd Casey');

SELECT t.tv_series.series_name, t.tv_channel.country FROM tv_series AS t JOIN tv_channel ON t.channel = t.tv_channel.id WHERE t.directed_by LIKE '%Ben Jones%' AND t.written_by LIKE '%Michael Chang%';

SELECT t.tv_series.series_name, t.tv_series.country FROM tv_series AS t JOIN tv_channel AS c ON t.channel = c.id WHERE t.cartoon_directed_by IN ('Ben Jones', 'Michael Chang');

SELECT t.country, t.pixel_aspect_ratio_par FROM tv_channel t WHERE t.language != 'English';

SELECT t.country, t.pixel_aspect_ratio_par FROM tv_channel t WHERE t.language != 'English';

SELECT DISTINCT t.channel FROM tv_channel t GROUP BY t.channel HAVING COUNT(t.channel) > 2;

SELECT DISTINCT t.channel FROM tv_channel t GROUP BY t.channel HAVING COUNT(DISTINCT t.channel) > 2;

SELECT DISTINCT t.id FROM tv_channel AS t LEFT JOIN cartoon AS c ON t.id = c.channel WHERE c.directed_by IS NULL;

SELECT DISTINCT t.id FROM tv_channel t LEFT JOIN cartoon c ON t.id = c.channel WHERE c.directed_by IS NULL;

SELECT t.package_option FROM tv_channel t LEFT JOIN cartoon c ON t.id = c.channel WHERE c.directed_by IS NULL GROUP BY t.package_option HAVING COUNT(c.channel) = 0;

SELECT DISTINCT package_option FROM tv_channel WHERE NOT EXISTS (SELECT 1 FROM cartoon WHERE channel = tv_channel.id AND directed_by = 'Ben Jones');

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT p.poker_player_id, p.earnings FROM poker_player p ORDER BY p.earnings DESC;

SELECT p.poker_player_id, p.final_table_made, p.best_finish FROM poker_player p;

SELECT p.poker_player_id, p.final_table_made, p.best_finish FROM poker_player p;

SELECT AVG(poker_player.earnings) FROM poker_player;

SELECT AVG(poker_player.earnings) FROM poker_player;

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id;

SELECT DISTINCT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id;

SELECT p.name FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE p.earnings > 300000;

SELECT p.name FROM poker_player p WHERE p.earnings > 300000;

SELECT p.name FROM poker_player AS p JOIN people AS pe ON p.people_id = pe.people_id ORDER BY p.final_table_made ASC;

SELECT p.name FROM poker_player AS p JOIN people AS pe ON p.people_id = pe.people_id ORDER BY p.final_table_made ASC;

SELECT T3.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id INNER JOIN poker_player AS T3 ON T1.poker_player_id = T3.poker_player_id WHERE T1.earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT birth_date FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT T3.money_rank FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T1.height DESC LIMIT 1;

SELECT T3.money_rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id INNER JOIN poker_player AS T3 ON T1.people_id = T3.people_id WHERE T1.height = (SELECT MAX(height) FROM people);

SELECT AVG(poker_player.earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;

SELECT AVG(poker_player.earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;

SELECT p.name FROM poker_player p ORDER BY p.earnings DESC;

SELECT p.name FROM poker_player AS p JOIN people AS pe ON p.people_id = pe.people_id ORDER BY p.earnings DESC;

SELECT DISTINCT nationality, COUNT(*) FROM people GROUP BY nationality;

SELECT nationality, COUNT(*) FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name FROM people WHERE nationality <> 'Russia';

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM votes;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT v.vote_id, v.phone_number, s.state FROM votes v JOIN area_code_state s ON v.state = s.state;

SELECT MAX(area_code), MIN(area_code) FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT T3.state, T4.created FROM votes AS T1 INNER JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number INNER JOIN area_code_state AS T3 ON T3.area_code = T1.phone_number INNER JOIN contests AS T4 ON T4.id = T1.vote_id;

SELECT T.contestant_number, T.contestant_name FROM contestants AS T JOIN votes AS V ON T.contestant_number = V.contestant_number GROUP BY T.contestant_number HAVING COUNT(V.vote_id) >= 2;

SELECT contestant_number, contestant_name FROM (SELECT contestant_number, contestant_name, ROW_NUMBER() OVER (ORDER BY COUNT(vote_id) ASC) AS rank FROM votes GROUP BY contestant_number, contestant_name) t WHERE rank = 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);

SELECT DISTINCT T3.area_code FROM votes AS T1 INNER JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number INNER JOIN area_code_state AS T3 ON T3.state = T1.state GROUP BY T3.area_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.created, T3.state, T3.phone_number FROM contestants AS T1 INNER JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number INNER JOIN area_code_state AS T3 ON T3.state = T2.state WHERE T1.contestant_name = 'Tabatha Gehling';

SELECT DISTINCT T1.area_code FROM votes AS T1 INNER JOIN contestants AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss');

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT DISTINCT name FROM country WHERE indepyear > 1950;

SELECT DISTINCT name FROM country WHERE indepyear > 1950;

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';

SELECT continent FROM country WHERE localname = 'Anguilla';

SELECT continent FROM country WHERE localname = 'Anguilla';

SELECT DISTINCT T1.region FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul';

SELECT T1.region FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.name = 'Kabul';

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Brazil';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT T1.region, T1.population FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Angola';

SELECT T1.region, T1.population FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.localname = 'Angola';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = ( SELECT MIN(lifeexpectancy) FROM country );

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;

SELECT SUM(population), MAX(gnp) FROM country WHERE continent = 'Asia';

SELECT COUNT(population), MAX(gnp) FROM country WHERE continent = 'Asia';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.governmentform = 'Republic';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T2.isofficial = TRUE;

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US';

SELECT AVG(gnp), SUM(population) FROM country WHERE region = 'US';

SELECT COUNT(DISTINCT T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent IS NOT NULL AND T1.region IS NOT NULL;

SELECT COUNT(DISTINCT T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT SUM(T1.percentage) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';

SELECT COUNT(T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Afghanistan' AND T2.isofficial = TRUE;

SELECT COUNT(T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Afghanistan' AND T2.isofficial = TRUE;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT T.continent FROM country AS T JOIN countrylanguage AS L ON T.code = L.countrycode GROUP BY T.continent ORDER BY SUM(L.percentage) DESC LIMIT 1;

SELECT T.continent FROM country AS T JOIN countrylanguage AS L ON T.code = L.countrycode GROUP BY T.continent ORDER BY SUM(L.percentage) DESC LIMIT 1;

SELECT COUNT(*) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch') GROUP BY T2.countrycode HAVING COUNT(DISTINCT T2.language) = 2;

SELECT COUNT(*) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T2.language = 'French';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T2.percentage > 0.5;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T2.language = 'French';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'French');

SELECT COUNT(DISTINCT T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese';

SELECT COUNT(*) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese';

SELECT DISTINCT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT DISTINCT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('Dutch', 'English');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' ORDER BY T2.percentage DESC LIMIT 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.language ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.isofficial = TRUE GROUP BY T2.language HAVING COUNT(T1.name) = 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.isofficial = TRUE GROUP BY T2.language HAVING COUNT(T1.name) = 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'English' ORDER BY T1.population DESC LIMIT 1;

SELECT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'English' ORDER BY T1.population DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN countryregion ON T1.region = T2.region WHERE T1.continent = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT SUM(population) FROM city WHERE countrycode IN ( SELECT countrycode FROM country WHERE code2 = 'GBR' AND language != 'English');

SELECT COUNT(*) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix';

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix';

SELECT COUNT(DISTINCT T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930;

SELECT COUNT(DISTINCT T1.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930;

SELECT name FROM country WHERE surfacearea > ALL ( SELECT surfacearea FROM country WHERE continent = 'Europe' );

SELECT * FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' );

SELECT c.name FROM country AS c WHERE c.continent = 'Africa' AND c.population < ( SELECT MIN(population) FROM country AS t1 WHERE t1.continent != 'Africa' );

SELECT c.name FROM country AS c WHERE c.population < ( SELECT MAX(population) FROM country AS t1 WHERE t1.continent = 'Asia' );

SELECT name FROM country WHERE region = 'Asia' AND population > ( SELECT MAX(population) FROM country WHERE region = 'Africa' );

SELECT * FROM country WHERE region = 'Asia' AND population > ( SELECT MAX(population) FROM country WHERE region = 'Africa' );

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English' AND T1.governmentform != 'Republic';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language != 'English' AND T1.governmentform != 'Republic';

SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Europe' AND T2.governmentform <> 'Republic' AND T2.language <> 'English';

SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Europe' AND T2.governmentform <> 'Republic' AND T2.language <> 'English';

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T2.isofficial = TRUE;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T1.continent = 'Asia';

SELECT name, indepyear, surfacearea FROM country ORDER BY population LIMIT 1;

SELECT name, indepyear, surfacearea FROM country ORDER BY population LIMIT 1;

SELECT T1.population, T1.name, T1.headofstate FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.headofstate FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.code HAVING COUNT(T2.language) >= 3;

SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) > 2;

SELECT COUNT(*) FROM city WHERE population > ( SELECT AVG(population) FROM city );

SELECT COUNT(name), district FROM city WHERE population > ( SELECT AVG(population) FROM city ) GROUP BY district;

SELECT T1.governmentform, SUM(T2.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72 GROUP BY T1.governmentform;

SELECT DISTINCT T1.governmentform, SUM(T2.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72 GROUP BY T1.governmentform;

SELECT c.continent, AVG(c.lifeexpectancy), SUM(p.population) FROM country AS c INNER JOIN city AS t ON c.code = t.countrycode GROUP BY c.continent HAVING AVG(c.lifeexpectancy) < 72;

SELECT c.continent, SUM(t.population), AVG(t.lifeexpectancy) FROM country AS t JOIN countrylanguage AS l ON t.code = l.countrycode WHERE l.language IS NULL GROUP BY c.continent HAVING AVG(t.lifeexpectancy) < 72;

SELECT T1.name, T1.surfacearea FROM country AS T1 INNER JOIN ( SELECT code, SUM(surfacearea) as total_area FROM country GROUP BY code ORDER BY total_area DESC LIMIT 5 ) AS T2 ON T1.code = T2.code;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 3;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 3;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code ORDER BY T1.population LIMIT 3;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Europe' AND T2.population >= 80000;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Europe' AND T2.population = 80000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.population BETWEEN 160000 AND 900000;

SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T2.population BETWEEN 160000 AND 900000;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.language ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.language ORDER BY COUNT(T1.language) DESC LIMIT 1;

SELECT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1;

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY SUM(T2.percentage) DESC LIMIT 5;

SELECT COUNT(*) FROM countrylanguage WHERE percentage > 50 AND language = 'Spanish';

SELECT COUNT(*) FROM countrylanguage WHERE percentage > 50 AND language = 'Spanish';

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' ORDER BY T2.percentage DESC LIMIT 1;

SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.percentage > 90;

SELECT COUNT(DISTINCT conductor_id) FROM conductor;

SELECT COUNT(DISTINCT conductor_id) FROM conductor;

SELECT name FROM conductor ORDER BY age ASC;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT DISTINCT T3.record_company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN performance AS T3 ON T1.orchestra_id = T3.orchestra_id ORDER BY T1.year_of_founded DESC;

SELECT DISTINCT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(T2.attendance) FROM performance AS T1 INNER JOIN show AS T2 ON T1.performance_id = T2.performance_id;

SELECT AVG(T2.attendance) FROM show AS T1 INNER JOIN performance AS T2 ON T1.performance_id = T2.performance_id;

SELECT MAX(t3.share), MIN(t3.share) FROM performance AS t1 INNER JOIN orchestra AS t2 ON t1.orchestra_id = t2.orchestra_id INNER JOIN show AS t3 ON t1.performance_id = t3.performance_id WHERE t1.type != 'Live final';

SELECT MAX(t.share), MIN(t.share) FROM performance AS t WHERE t.type != 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT conductor.name AS ConductorName, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT DISTINCT T3.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id GROUP BY T1.conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1;

SELECT DISTINCT T3.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id GROUP BY T1.conductor_id HAVING COUNT(DISTINCT T1.orchestra_id) > 1;

SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T3.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN orchestra_conductors AS T3 ON T1.orchestra_id = T3.orchestra_id WHERE T1.year_of_founded > 2008;

SELECT DISTINCT T3.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id WHERE T1.year_of_founded > 2008;

SELECT DISTINCT record_company FROM orchestra GROUP BY record_company;

SELECT DISTINCT T2.record_company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.record_company;

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;

SELECT major_record_format, COUNT(major_record_format) AS freq FROM orchestra GROUP BY major_record_format ORDER BY freq DESC;

SELECT DISTINCT T3.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id INNER JOIN show AS T3 ON T2.performance_id = T3.performance_id GROUP BY T3.record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT DISTINCT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT DISTINCT orchestra_id FROM performance);

SELECT DISTINCT T2.record_company FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded < 2003 GROUP BY T2.record_company HAVING COUNT(DISTINCT T1.orchestra_id) > 1;

SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';

SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';

SELECT DISTINCT T3.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id GROUP BY T3.year_of_founded HAVING COUNT(T2.performance_id) > 1;

SELECT DISTINCT T3.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id WHERE COUNT(T2.performance_id) > 1;

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT h.name, h.grade FROM highschooler AS h;

SELECT h.name, h.grade FROM highschooler AS h;

SELECT DISTINCT grade FROM highschooler;

SELECT h.name, h.grade FROM highschooler h;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T.grade FROM highschooler AS T GROUP BY T.grade HAVING COUNT(T.id) >= 4;

SELECT DISTINCT T3.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN highschooler AS T3 ON T3.id = T2.friend_id GROUP BY T3.grade HAVING COUNT(T1.name) >= 4;

SELECT T3.student_id, COUNT(T4.friend_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id GROUP BY T3.student_id;

SELECT COUNT(DISTINCT f.friend_id) FROM friend AS f;

SELECT h.name, COUNT(f.student_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id;

SELECT h.name, COUNT(f.student_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(f.friend_id) DESC LIMIT 1;

SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(student_id) DESC LIMIT 1 );

SELECT DISTINCT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 3;

SELECT DISTINCT T.name FROM highschooler AS T INNER JOIN friend AS F ON T.id = F.student_id GROUP BY T.id HAVING COUNT(F.friend_id) >= 3;

SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id = 4;

SELECT T2.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle';

SELECT COUNT(DISTINCT f.student_id) FROM friend AS f INNER JOIN highschooler AS h ON f.friend_id = h.id WHERE h.name = 'Kyle';

SELECT COUNT(DISTINCT f.student_id) FROM friend AS f INNER JOIN highschooler AS h ON f.friend_id = h.id WHERE h.name = 'Kyle';

SELECT id FROM highschooler WHERE id NOT IN ( SELECT DISTINCT student_id FROM friend );

SELECT DISTINCT T3.student_id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id LEFT JOIN highschooler AS T3 ON T3.id = T2.friend_id WHERE T3.student_id IS NULL;

SELECT DISTINCT T3.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id LEFT JOIN highschooler AS T3 ON T3.id = T2.friend_id WHERE T3.id IS NULL;

SELECT DISTINCT T1.name FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NULL;

SELECT DISTINCT T3.student_id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.liked_id WHERE T1.grade BETWEEN 9 AND 12;

SELECT DISTINCT T3.student_id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id;

SELECT DISTINCT T3.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.liked_id WHERE T1.grade BETWEEN 9 AND 12;

SELECT DISTINCT T3.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.liked_id WHERE T1.grade BETWEEN 9 AND 12;

SELECT T3.student_id, COUNT(*) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T2.friend_id = T3.liked_id GROUP BY T3.student_id;

SELECT T3.student_id, COUNT(T3.liked_id) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN friend AS T3 ON T2.id = T3.friend_id GROUP BY T3.student_id;

SELECT T3.name AS "highschooler", COUNT(T4.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id INNER JOIN friend AS T4 ON T3.liked_id = T4.friend_id GROUP BY T3.name;

SELECT T3.name AS "highschooler", COUNT(T4.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id INNER JOIN friend AS T4 ON T3.liked_id = T4.friend_id GROUP BY T3.name;

SELECT T3.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN friend AS T3 ON T2.id = T3.friend_id GROUP BY T2.id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT T3.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN friend AS T3 ON T2.id = T3.friend_id GROUP BY T1.student_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT DISTINCT T3.name FROM friends AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN likes AS T3 ON T1.friend_id = T3.liked_id WHERE T1.student_id = T3.student_id GROUP BY T3.name HAVING COUNT(T3.liked_id) >= 2;

SELECT DISTINCT T3.name FROM friends AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id INNER JOIN likes AS T3 ON T1.friend_id = T3.liked_id WHERE T1.student_id IN ( SELECT T4.student_id FROM friends AS T4 GROUP BY T4.student_id HAVING COUNT(T4.student_id) >= 2 );

SELECT DISTINCT T3.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN highschooler AS T3 ON T3.id = T2.friend_id WHERE T1.grade > 5 GROUP BY T3.name HAVING COUNT(T2.student_id) >= 2;

SELECT DISTINCT T3.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN highschooler AS T3 ON T3.id = T2.friend_id WHERE T1.grade > 5 GROUP BY T3.name HAVING COUNT(T2.student_id) >= 2;

SELECT COUNT(*) FROM likes WHERE student_id = ( SELECT id FROM highschooler WHERE name = 'Kyle' );

SELECT COUNT(likes.student_id) FROM highschooler AS h INNER JOIN likes AS l ON h.id = l.student_id WHERE h.name = 'Kyle';

SELECT AVG(hs.grade) FROM highschooler hs INNER JOIN friend f ON hs.id = f.student_id WHERE hs.id IN (SELECT student_id FROM friend);

SELECT AVG(h.grade) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id;

SELECT MIN(hs.grade) FROM highschooler hs WHERE hs.id NOT IN ( SELECT f.student_id FROM friend f );

SELECT MIN(grade) FROM highschooler WHERE id NOT IN ( SELECT DISTINCT student_id FROM friend );

SELECT DISTINCT T3.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state;

SELECT DISTINCT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state;

SELECT AVG(DATEDIFF(CURDATE(), T.date_of_treatment)) FROM treatments AS T INNER JOIN dogs AS D ON T.dog_id = D.dog_id WHERE D.abandoned_yn = 'N';

SELECT AVG(DATEDIFF(CURDATE(), T.date_of_treatment)) FROM treatments AS T INNER JOIN dogs AS D ON T.dog_id = D.dog_id WHERE D.abandoned_yn = 'N';

SELECT T3.professional_id, T3.last_name, T3.cell_number FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN professionals AS T3 ON T3.professional_id = T2.professional_id WHERE T3.state LIKE 'IN' GROUP BY T3.professional_id HAVING COUNT(T2.treatment_id) > 2;

SELECT T3.professional_id, T3.last_name, T3.cell_number FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN professionals AS T3 ON T1.dog_id = T3.professional_id WHERE T2.state = 'Indiana' OR COUNT(T4.treatment_id) > 2;

SELECT T3.name FROM treatments AS T1 INNER JOIN dogs AS T2 ON T1.dog_id = T2.dog_id INNER JOIN owners AS T3 ON T2.owner_id = T3.owner_id WHERE T1.cost_of_treatment > 1000;

SELECT T3.name FROM treatments AS T1 INNER JOIN dogs AS T2 ON T1.dog_id = T2.dog_id INNER JOIN owners AS T3 ON T2.owner_id = T3.owner_id WHERE T1.cost_of_treatment < 1000;

SELECT DISTINCT T1.first_name FROM owners AS T1 LEFT JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name IS NULL;

SELECT DISTINCT T3.first_name FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.owner_id LEFT JOIN dogs AS T3 ON T3.owner_id = T1.owner_id WHERE T3.dog_id IS NULL;

SELECT T3.professional_id, T3.role_code, T3.email_address FROM treatments AS T1 LEFT JOIN professionals AS T2 ON T1.professional_id = T2.professional_id LEFT JOIN owners AS T3 ON T1.dog_id = T3.owner_id WHERE T1.treatment_type_code IS NULL;

SELECT T3.professional_id, T3.role_code, T3.email_address FROM professionals AS T1 LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id LEFT JOIN dogs AS T3 ON T2.dog_id = T3.dog_id WHERE T2.treatment_id IS NULL;

SELECT owner_id, first_name, last_name FROM owners WHERE owner_id = ( SELECT MAX(owner_id) FROM owners );

SELECT owner_id, first_name, last_name FROM owners ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T3.professional_id, T3.role_code, T3.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id GROUP BY T3.professional_id HAVING COUNT(*) >= 2;

SELECT T3.professional_id, T3.role_code, T3.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2;

SELECT b.breed_name FROM breeds b JOIN dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T.owner_id, T.last_name FROM ( SELECT o.owner_id, COUNT(t.treatment_id) AS num_treatments FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ) T WHERE T.num_treatments = ( SELECT MAX(num_treatments) FROM ( SELECT o.owner_id, COUNT(t.treatment_id) AS num_treatments FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ) T );

SELECT T.owner_id, T.last_name FROM ( SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY total_cost DESC LIMIT 1 ) T;

SELECT t.treatment_type_description FROM treatments AS t JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY t.cost_of_treatment ASC LIMIT 1;

SELECT t.treatment_type_description FROM treatments AS t JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY SUM(charges.charge_amount) DESC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1;

SELECT T3.professional_id, T3.cell_number FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T3.professional_id HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2;

SELECT T3.professional_id, T3.cell_number FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING COUNT(DISTINCT t1.treatment_type_code) >= 2;

SELECT T3.first_name, T3.last_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id WHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT T3.first_name, T3.last_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id WHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT T3.date_of_treatment, T2.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id;

SELECT T3.date_of_treatment, T2.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments AS t JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments AS t JOIN treatment_types AS tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code;

SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id;

SELECT o.first_name, d.name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id;

SELECT T3.name, T4.date_of_treatment FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code INNER JOIN treatments AS T3 ON T3.dog_id = T2.dog_id INNER JOIN treatment_types AS T4 ON T4.treatment_type_code = T3.treatment_type_code WHERE T1.breed_name IS NOT NULL AND T1.breed_code IN ( SELECT DISTINCT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 );

SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN ( SELECT b.breed_code FROM breeds b GROUP BY b.breed_code ORDER BY COUNT(*) ASC LIMIT 1 );

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'VA';

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'VA';

SELECT T3.date_arrived, T4.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN owners AS T3 ON T1.owner_id = T3.owner_id INNER JOIN professionals AS T4 ON T2.professional_id = T4.professional_id WHERE T2.treatment_type_code LIKE 'T%';

SELECT T3.date_arrived, T4.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN owners AS T3 ON T1.owner_id = T3.owner_id INNER JOIN dogs AS T4 ON T4.dog_id = T2.dog_id WHERE T2.treatment_type_code IS NOT NULL;

SELECT T.owner_id FROM dogs AS T ORDER BY T.age ASC LIMIT 1;

SELECT T3.last_name FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN owners AS T3 ON T2.owner_id = T3.owner_id ORDER BY T1.age ASC LIMIT 1;

SELECT DISTINCT T3.email_address FROM professionals AS T1 INNER JOIN states AS T2 ON T1.state = T2.state INNER JOIN owners AS T3 ON T1.owner_id = T3.owner_id WHERE T2.state IN ('HI', 'WI');

SELECT DISTINCT T3.email_address FROM professionals AS T1 INNER JOIN states AS T2 ON T1.state = T2.state WHERE T2.state IN ('Hawaii', 'Wisconsin');

SELECT d.date_arrived, d.date_departed FROM dogs d;

SELECT T3.date_arrived, T4.date_departed FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id INNER JOIN dogs AS T4 ON T1.dog_id = T4.dog_id;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT T3.role_code, T3.street, T3.city, T3.state FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN owners AS T3 ON T1.dog_id = T3.owner_id WHERE T3.city LIKE '%West%';

SELECT T3.role_code, T3.street, T3.city, T3.state FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN owners AS T3 ON T2.owner_id = T3.owner_id WHERE T3.city LIKE '%West%';

SELECT o.first_name, o.last_name, o.email_address FROM owners o WHERE o.state LIKE '%North%';

SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < ( SELECT AVG(age) FROM dogs );

SELECT COUNT(*) FROM dogs WHERE age < ( SELECT AVG(age) FROM dogs );

SELECT MAX(cost_of_treatment) FROM treatments;

SELECT T3.cost_of_treatment FROM treatments AS T1 INNER JOIN dogs AS T2 ON T1.dog_id = T2.dog_id INNER JOIN professionals AS T3 ON T1.professional_id = T3.professional_id ORDER BY T1.date_of_treatment DESC LIMIT 1;

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments );

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments );

SELECT COUNT(DISTINCT o.owner_id) FROM owners o WHERE o.owner_id NOT IN ( SELECT d.owner_id FROM dogs d );

SELECT COUNT(DISTINCT o.owner_id) FROM owners o WHERE o.owner_id NOT IN ( SELECT d.owner_id FROM dogs d );

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM treatments );

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM treatments );

SELECT T3.name, T3.age, T3.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id WHERE T1.abandoned_yn = 'Y';

SELECT T3.name, T3.age, T3.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN dogs AS T3 ON T1.dog_id = T3.dog_id WHERE T1.abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(DATEDIFF(CURDATE(), date_of_birth)) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT t.charge_type, t.charge_amount FROM charges t;

SELECT charge_type, charge_amount FROM charges;

SELECT MAX(charge_amount) FROM charges;

SELECT MAX(charge_amount) FROM charges;

SELECT T3.email_address, T3.cell_number, T3.home_phone FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN owners AS T3 ON T1.owner_id = T3.owner_id;

SELECT T3.email_address, T3.cell_number, T3.home_phone FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN dogs AS T3 ON T2.owner_id = T3.owner_id WHERE T1.role_code = 'P';

SELECT DISTINCT b.breed_name, s.size_description FROM breeds AS b JOIN sizes AS s ON 1=1;

SELECT DISTINCT T3.breed_name, T4.size_description FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code INNER JOIN sizes AS T3 ON T1.size_code = T3.size_code;

SELECT T3.first_name, T4.treatment_type_description FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN treatment_types AS T3 ON T1.treatment_type_code = T3.treatment_type_code;

SELECT T3.first_name, T4.treatment_type_description FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN treatment_types AS T3 ON T1.treatment_type_code = T3.treatment_type_code;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'French';

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT DISTINCT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer);

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT s.citizenship, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.citizenship;

SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;

SELECT T1.title, T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id;

SELECT s.title, s.name FROM song AS s;

SELECT DISTINCT T.name FROM singer AS T INNER JOIN song AS S ON T.singer_id = S.singer_id WHERE S.sales > 300000;

SELECT DISTINCT T.name FROM singer AS T JOIN song AS S ON T.singer_id = S.singer_id WHERE S.sales > 300000;

SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT DISTINCT s.name FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name HAVING COUNT(t.song_id) > 1;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT DISTINCT T2.name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.song_id IS NULL;

SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;

SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT ft.feature_type_name FROM other_available_features OF AF WHERE AF.feature_name = 'AirCon';

SELECT T2.property_type_description FROM properties AS T1 INNER JOIN ref_property_types AS T2 ON T1.property_type_code = T2.property_type_code;

SELECT DISTINCT property_name FROM properties WHERE (room_count > 1 AND (property_type_code = 'H' OR property_type_code = 'A')) UNION SELECT DISTINCT property_name FROM properties WHERE (room_count > 1 AND (property_type_code = 'H' OR property_type_code = 'A'));

