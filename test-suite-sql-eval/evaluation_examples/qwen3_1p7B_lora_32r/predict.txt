SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT COUNT(DISTINCT singer_id) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT s.name, c.song_release_year FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id INNER JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT s.name, c.song_release_year FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id INNER JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20;

SELECT DISTINCT country FROM singer;

SELECT s.country, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.country;

SELECT DISTINCT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT DISTINCT T1.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer);

SELECT s.location, s.name FROM stadium s WHERE s.capacity BETWEEN 5000 AND 10000;

SELECT s.location, s.name FROM stadium s WHERE s.capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT AVG(capacity), MAX(capacity) FROM stadium;

SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(s2.average) FROM stadium s2);

SELECT s.name, s.capacity FROM stadium s WHERE s.average = (SELECT MAX(s2.average) FROM stadium s2);

SELECT COUNT(*) FROM concert WHERE YEAR(year) IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE YEAR(year) BETWEEN 2014 AND 2015;

SELECT s.name, COUNT(c.concert_id) FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id;

SELECT s.name, COUNT(c.concert_id) FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id;

SELECT s.name, s.capacity FROM stadium s INNER JOIN singer_in_concert sic ON s.stadium_id = sic.stadium_id WHERE YEAR(sic.year) >= 2014 GROUP BY s.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name, s.capacity FROM stadium s INNER JOIN singer_in_concert sic ON s.stadium_id = sic.stadium_id WHERE sic.year > 2013 GROUP BY s.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;

SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id );

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT 1 FROM concert c WHERE c.stadium_id = s.stadium_id );

SELECT DISTINCT s.country FROM singer s WHERE s.age > 40 INTERSECT SELECT DISTINCT s.country FROM singer s WHERE s.age < 30;

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT c.year FROM concert c WHERE c.stadium_id = s.stadium_id AND c.year = 2014 );

SELECT s.name FROM stadium s WHERE NOT EXISTS ( SELECT c.concert_id FROM concert c WHERE c.year = 2014 AND c.stadium_id = s.stadium_id );

SELECT c.concert_name, c.theme, COUNT(sc.singer_id) as num_singers FROM concert c JOIN singer_in_concert sc ON c.concert_id = sc.concert_id GROUP BY c.concert_name;

SELECT c.concert_name, s.name, COUNT(*) FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id JOIN singer s ON sic.singer_id = s.singer_id GROUP BY c.concert_name;

SELECT s.name, COUNT(c.concert_id) FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name, COUNT(c.concert_id) FROM singer_in_concert c JOIN singer s ON c.singer_id = s.singer_id GROUP BY s.name;

SELECT DISTINCT T2.name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T2.year = 2014;

SELECT DISTINCT T2.name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T2.year = 2014;

SELECT s.name, s.country FROM singer s WHERE s.song_name LIKE '%hey%';

SELECT s.name, s.country FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id WHERE s.is_male = TRUE AND song_name LIKE '%hey%';

SELECT s.name, s.location FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE YEAR(c.year) IN (2014, 2015);

SELECT s.name, s.location FROM stadium s INNER JOIN concert c ON s.stadium_id = c.stadium_id WHERE YEAR(c.year) IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);

SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT MIN(weight) FROM pets;

SELECT MIN(weight) FROM pets INNER JOIN has_pet ON pets.petid = has_pet.petid WHERE pettype = 'dog';

SELECT p.pettype, MAX(p.weight) FROM pets p GROUP BY p.pettype;

SELECT p.pettype, MAX(p.weight) FROM pets p GROUP BY p.pettype;

SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid WHERE student.age > 20;

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F' AND student.major = 'Animal Science';

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE sex = 'F' AND pettype = 'Dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid WHERE hp.pettype IN ('cat', 'dog');

SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid WHERE hp.pettype IN ('cat', 'dog');

SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid WHERE hp.pettype = 'cat' AND hp.pettype = 'dog';

SELECT DISTINCT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid INNER JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND s.fname IS NOT NULL GROUP BY s.fname HAVING COUNT(DISTINCT p.petid) > 1;

SELECT s.lname, s.fname, s.age FROM student AS s WHERE NOT EXISTS (SELECT * FROM has_pet AS hp INNER JOIN pets AS p ON hp.petid = p.petid WHERE p.pettype = 'Cat');

SELECT s.major, s.age FROM student AS s LEFT JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.petid IS NULL;

SELECT stuid FROM student WHERE NOT EXISTS(SELECT * FROM has_pet WHERE stuid = student.stuid AND pettype = 'Cat');

SELECT DISTINCT stuid FROM student WHERE NOT EXISTS ( SELECT * FROM has_pet WHERE stuid = student.stuid AND pettype = 'Cat' );

SELECT s.fname, s.age FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.pettype = 'dog' AND NOT EXISTS(SELECT * FROM has_pet AS h WHERE h.stuid = s.stuid AND h.pettype = 'cat');

SELECT s.fname FROM student s INNER JOIN has_pet hp ON s.stuid = hp.stuid WHERE hp.pettype = 'dog' AND NOT EXISTS(SELECT * FROM has_pet hps WHERE hps.pettype = 'cat');

SELECT p.pettype, p.weight FROM pets AS p INNER JOIN has_pet AS hp ON p.petid = hp.petid WHERE hp.stuid = (SELECT MAX(age) FROM student);

SELECT p.pettype, p.weight FROM pets AS p INNER JOIN has_pet AS h ON p.petid = h.petid WHERE h.stuid = (SELECT MIN(stuid) FROM student);

SELECT p.petid, p.weight FROM pets p WHERE p.pet_age > 1;

SELECT p.petid, p.weight FROM pets p WHERE p.pet_age > 1;

SELECT p.pettype, AVG(p.pet_age), MAX(p.pet_age) FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.pet_age), MAX(p.pet_age) FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.weight) FROM pets p GROUP BY p.pettype;

SELECT p.pettype, AVG(p.weight) FROM pets p GROUP BY p.pettype;

SELECT s.fname, s.age FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid WHERE hp.petid IS NOT NULL;

SELECT DISTINCT s.fname, p.pet_age FROM student s INNER JOIN has_pet h ON s.stuid = h.stuid INNER JOIN pets p ON h.petid = p.petid;

SELECT p.petid FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.lname = 'Smith';

SELECT sp.petid FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE s.lname = 'Smith';

SELECT s.stuid, COUNT(*) FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid;

SELECT stuid, COUNT(*) FROM has_pet GROUP BY stuid;

SELECT s.fname, s.sex FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1;

SELECT s.fname, s.sex FROM student AS s INNER JOIN has_pet AS hp ON s.stuid = hp.stuid GROUP BY s.stuid HAVING COUNT(hp.petid) > 1;

SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3;

SELECT s.lname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3;

SELECT AVG(age) FROM student WHERE NOT EXISTS ( SELECT * FROM has_pet WHERE stuid = student.stuid );

SELECT AVG(age) FROM student WHERE NOT EXISTS ( SELECT * FROM has_pet WHERE stuid = student.stuid );

SELECT COUNT(DISTINCT c.continent) FROM countries c;

SELECT COUNT(DISTINCT continent) FROM continents;

SELECT c.continent, COUNT(c.countryid) FROM countries c GROUP BY c.continent;

SELECT c.contid, c.continent, COUNT(c.countryid) FROM countries c GROUP BY c.continents;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT COUNT(DISTINCT countryid) FROM countries;

SELECT c.fullname, m.id, COUNT(*) FROM car_makers c INNER JOIN model_list ml ON c.id = ml.maker GROUP BY c.fullname, m.id;

SELECT c.fullname, m.id, COUNT(m.model) FROM car_makers c INNER JOIN model_list m ON c.id = m.maker GROUP BY c.fullname;

SELECT MIN(horsepower) FROM cars_data;

SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);

SELECT DISTINCT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.model = T3.model WHERE T1.weight < (SELECT AVG(T1.weight) FROM cars_data AS T1);

SELECT DISTINCT T3.model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN model_list AS T3 ON T2.model = T3.model WHERE T1.weight < (SELECT AVG(weight) FROM cars_data);

SELECT DISTINCT maker FROM car_makers WHERE YEAR = 1970;

SELECT DISTINCT T2.fullname FROM car_makers AS T1 INNER JOIN cars_data AS T2 ON T1.id = T2.makeid WHERE YEAR(T2.year) = 1970;

SELECT DISTINCT T3.fullname FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.make = T3.maker ORDER BY T1.year ASC LIMIT 1;

SELECT DISTINCT T3.fullname FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.id = T2.id INNER JOIN car_makers AS T3 ON T1.make = T3.maker ORDER BY T2.year ASC LIMIT 1;

SELECT DISTINCT model FROM cars_data WHERE YEAR(year) > 1980;

SELECT DISTINCT model FROM cars_data WHERE YEAR(year) > 1980;

SELECT c.continent, COUNT(c.countryid) FROM countries c GROUP BY c.continent;

SELECT c.continent, COUNT(c.maker) FROM car_makers c GROUP BY c.continent;

SELECT DISTINCT T2.country FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.country = T2.country GROUP BY T1.country ORDER BY COUNT(T2.id) DESC LIMIT 1;

SELECT DISTINCT T2.country FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country = T2.country GROUP BY T1.country ORDER BY COUNT(T1.id) DESC LIMIT 1;

SELECT DISTINCT maker.fullname, COUNT(*) FROM car_makers INNER JOIN car_names ON car_makers.id = car_names.makeid GROUP BY maker.fullname;

SELECT c.fullname, COUNT(*) FROM car_makers AS c GROUP BY c.maker;

SELECT c.accelerate FROM cars_data c WHERE c.make = 'amc' AND c.model LIKE '%hornet%';

SELECT c.accelerate FROM cars_data c WHERE c.model = 'amc hornet sportabout (sw)';

SELECT COUNT(*) FROM car_makers WHERE country = 3;

SELECT COUNT(DISTINCT c.fullname) FROM car_makers c WHERE c.country = 3;

SELECT COUNT(*) FROM car_names WHERE country = 3;

SELECT COUNT(*) FROM cars_data WHERE country = 'United States';

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT DISTINCT maker, model FROM car_makers;

SELECT DISTINCT maker, model FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker;

SELECT DISTINCT T2.country FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.country = T2.country;

SELECT DISTINCT c.countryid, c.countryname FROM countries c INNER JOIN car_makers m ON c.continent = m.country;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT AVG(weight), year FROM cars_data GROUP BY year;

SELECT AVG(weight), AVG(year) FROM cars_data GROUP BY year;

SELECT DISTINCT c.country FROM countries c INNER JOIN car_makers m ON c.country = m.country WHERE c.continent = 'Europe' GROUP BY c.country HAVING COUNT(DISTINCT m.id) >= 3;

SELECT DISTINCT T2.countryname FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.countryid = T2.country WHERE T1.continent = 'Europe' GROUP BY T1.countryid HAVING COUNT(DISTINCT T2.id) >= 3;

SELECT MAX(horsepower), maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT MAKER FROM cars_data WHERE cylinders = 3 ORDER BY horsepower DESC LIMIT 1;

SELECT model FROM cars_data WHERE mpg = (SELECT MAX(mpg) FROM cars_data);

SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(cdispl) FROM cars_data WHERE model = 'Volvo';

SELECT AVG(cdispl) FROM cars_data WHERE make = 'volvo';

SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders;

SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;

SELECT DISTINCT T3.model FROM car_names AS T1 INNER JOIN car_makers AS T2 ON T1.make = T2.fullname INNER JOIN model_list AS T3 ON T2.id = T3.maker WHERE T1.model LIKE '%-%';

SELECT DISTINCT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT model) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE YEAR = 1980;

SELECT COUNT(*) FROM cars_data WHERE YEAR = 1980;

SELECT COUNT(*) FROM car_makers WHERE fullname = 'American Motor Company';

SELECT COUNT(*) FROM car_makers WHERE maker = 'American Motor Company';

SELECT DISTINCT T2.fullname, T1.id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.id = T2.maker WHERE COUNT(T2.model) > 3;

SELECT DISTINCT maker FROM car_makers WHERE COUNT(maker) > 3;

SELECT DISTINCT model FROM car_names WHERE maker IN (SELECT id FROM car_makers WHERE fullname LIKE '%General Motors%') AND weight > 3500;

SELECT DISTINCT m.model FROM car_names c JOIN model_list ml ON c.make = ml.maker JOIN car_makers cm ON c.id = cm.id WHERE cm.fullname LIKE '%General Motors%' OR c.weight > 3500;

SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;

SELECT DISTINCT year FROM cars_data WHERE weight < 4000 INTERSECT SELECT DISTINCT year FROM cars_data WHERE weight > 3000;

SELECT MAX(cars_data.accelerate) FROM cars_data;

SELECT MAX(horsepower) FROM cars_data;

SELECT MIN(cylinders) FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data);

SELECT MIN(cylinders) FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(DISTINCT c.countryid) FROM countries c INNER JOIN car_makers m ON c.continent = m.continent WHERE c.continent IN (SELECT t.continent FROM car_makers t GROUP BY t.continent HAVING COUNT(t.id) > 2);

SELECT COUNT(DISTINCT c.countryid) FROM countries c INNER JOIN car_makers m ON c.continent = m.continent WHERE c.continent IN (SELECT DISTINCT t.continent FROM car_makers t GROUP BY t.continent HAVING COUNT(t.id) > 2);

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT model FROM cars_data WHERE cylinders = 4 GROUP BY model ORDER BY MAX(horsepower) DESC LIMIT 1;

SELECT DISTINCT c.id, c.make FROM cars_data c INNER JOIN car_names d ON c.id = d.id WHERE c.horsepower > (SELECT MIN(horsepower) FROM cars_data);

SELECT DISTINCT T3.make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.id = T2.makeid INNER JOIN car_makers AS T3 ON T2.fullname = T3.fullname WHERE T1.horsepower < ALL(SELECT T1.horsepower FROM cars_data AS T1 GROUP BY T1.horsepower HAVING COUNT(*) > 1) AND T1.cylinders < 4;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT DISTINCT model FROM cars_data WHERE weight < 3500 AND maker != ( SELECT maker FROM car_makers WHERE fullname = 'Ford Motor Co.' );

SELECT DISTINCT model FROM cars_data WHERE weight < 3500 AND maker != 'Ford';

SELECT DISTINCT c.country FROM countries AS c LEFT JOIN car_makers AS m ON c.country = m.country WHERE m.id IS NULL;

SELECT DISTINCT c.countryname FROM countries AS c WHERE c.continent = ( SELECT t.continentscontid FROM continents AS t WHERE t.continent = 'North America' ) AND c.countryid NOT IN ( SELECT m.id FROM car_makers AS m );

SELECT DISTINCT m.id, m.maker FROM car_makers m INNER JOIN model_list ml ON m.id = ml.maker GROUP BY m.id HAVING COUNT(ml.model) >= 2 AND COUNT(DISTINCT m.maker) > 3;

SELECT DISTINCT m.id, m.maker FROM car_makers m INNER JOIN model_list ml ON m.id = ml.maker GROUP BY m.id HAVING COUNT(ml.model) >= 2 AND COUNT(DISTINCT c.id) > 3;

SELECT DISTINCT c.countryid, c.countryname FROM countries AS c INNER JOIN car_makers AS m ON c.countryid = m.country WHERE m.maker IN ('car', 'carmakers') OR c.model LIKE '%fiat%';

SELECT DISTINCT c.countryid, c.countryname FROM countries AS c INNER JOIN car_makers AS m ON c.countryid = m.country WHERE COUNT(m.id) > 3 OR EXISTS(SELECT * FROM model_list AS ml WHERE ml.model = 'Fiat');

SELECT DISTINCT T3.country FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid JOIN airports AS T3 ON T1.sourceairport = T3.airportcode WHERE T2.airline = 'JetBlue Airways';

SELECT DISTINCT T3.country FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid JOIN airports AS T3 ON T1.sourceairport = T3.airportcode WHERE T2.abbreviation = 'JET';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue';

SELECT DISTINCT T1.airline, T1.abbreviation FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.country = 'USA' AND T2.country = 'USA';

SELECT DISTINCT T1.airline, T1.abbreviation FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.country = T2.country WHERE T2.country = 'USA';

SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.city = 'Anthony';

SELECT DISTINCT airports.airportcode, airports.airportname FROM airports WHERE airports.city = 'Anthony';

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(DISTINCT airline) FROM airlines;

SELECT COUNT(DISTINCT airports.airportcode) FROM airports;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT airports.city, airports.country FROM airports WHERE airports.airportcode = 'ALTON';

SELECT DISTINCT T1.city, T1.country FROM airports AS T1 INNER JOIN flights AS T2 ON T1.airportcode = T2.sourceairport WHERE T1.airportcode = 'ALTON';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';

SELECT DISTINCT airportname FROM airports WHERE city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE country = 'ATO');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABD';

SELECT COUNT(*) FROM flights WHERE destairport = 'Aberdeen' AND country = 'UK';

SELECT COUNT(*) FROM flights WHERE destairport = 'AB349';

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ASY' AND airline = 'United Airlines';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'ABD' AND destinationairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1);

SELECT T3.city FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode INNER JOIN airports AS T3 ON T2.country = T3.country WHERE T1.flightno IN (SELECT MAX(flightno) FROM flights GROUP BY T1.flightno ORDER BY COUNT(*) DESC LIMIT 1);

SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1);

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports GROUP BY airportcode ORDER BY COUNT(*) ASC LIMIT 1;

SELECT MIN(flightno) FROM flights;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.airline = f.airline GROUP BY a.airline ORDER BY COUNT(f.flightno) ASC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN (SELECT airline, COUNT(*) as num_flights FROM flights GROUP BY airline ORDER BY num_flights ASC LIMIT 1) b ON a.uid = b.airline;

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE 'AHD%';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE 'AHD%';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.city LIKE 'AHD%';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.destairport = T2.airportcode WHERE T2.countryabbrev = 'AHD';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE '%APG%' AND T1.flightno IN (SELECT T3.flightno FROM flights AS T3 INNER JOIN airports AS T4 ON T3.destairport = T4.airportcode WHERE T4.city LIKE '%CVO%') GROUP BY T1.airline HAVING COUNT(DISTINCT T1.flightno) > 1;

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE 'APG%' GROUP BY T1.airline HAVING COUNT(DISTINCT T2.airportcode) > 1;

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE 'CVO%' AND T1.airline NOT IN (SELECT T3.airline FROM flights AS T3 INNER JOIN airports AS T4 ON T3.destairport = T4.airportcode WHERE T4.city LIKE 'APG%');

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode WHERE T2.city LIKE 'CVO' AND T1.airline NOT IN (SELECT DISTINCT T3.airline FROM flights AS T3 INNER JOIN airports AS T4 ON T3.destairport = T4.airportcode WHERE T4.city LIKE 'APG');

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.uid GROUP BY T1.airline HAVING COUNT(*) >= 10;

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.uid GROUP BY T1.airline HAVING COUNT(*) >= 10;

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.uid WHERE COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT DISTINCT f.flightno FROM flights f WHERE f.airline = 'United Airlines';

SELECT DISTINCT f.flightno FROM flights AS f JOIN airlines AS a ON f.airline = a.uid WHERE a.abbreviation = 'UA';

SELECT f.flightno FROM flights f WHERE f.sourceairport = 'APG';

SELECT DISTINCT f.flightno FROM flights f WHERE f.sourceairport = 'APG';

SELECT f.flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'APG';

SELECT DISTINCT f.flightno FROM flights f WHERE f.destairport = 'APG';

SELECT f.flightno FROM flights f JOIN airports a ON f.sourceairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT DISTINCT f.flightno FROM flights f WHERE f.sourceairport = 'ABD';

SELECT f.flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT f.flightno FROM flights f JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE (sourceairport = 'AB' OR destairport = 'AB') AND city IN ('Aberdeen', 'Abilene');

SELECT COUNT(*) FROM flights WHERE sourceairport IN ('AB34', 'AB36') OR destairport IN ('AB34', 'AB36');

SELECT DISTINCT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);

SELECT DISTINCT sourceairport FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports) UNION ALL SELECT destairport FROM flights WHERE destairport IN (SELECT airportcode FROM airports);

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age ASC;

SELECT e.name FROM employee e ORDER BY e.age ASC;

SELECT e.city, COUNT(e.employee_id) FROM employee e GROUP BY e.city;

SELECT e.city, COUNT(e.employee_id) FROM employee e GROUP BY e.city;

SELECT DISTINCT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(DISTINCT e.employee_id) > 1;

SELECT DISTINCT e.city FROM employee e WHERE e.age < 30 GROUP BY e.city HAVING COUNT(e.employee_id) > 1;

SELECT s.location, COUNT(*) FROM shop s GROUP BY s.location;

SELECT s.location, COUNT(*) FROM shop s GROUP BY s.location;

SELECT s.name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT s.name, s.district FROM shop s WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;

SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;

SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);

SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);

SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id GROUP BY e.name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;

SELECT DISTINCT e.name FROM employee e LEFT JOIN evaluation ev ON e.employee_id = ev.employee_id WHERE ev.year_awarded IS NULL;

SELECT DISTINCT e.name FROM employee AS e LEFT JOIN evaluation AS ev ON e.employee_id = ev.employee_id WHERE ev.year_awarded IS NULL;

SELECT s.name FROM shop s INNER JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.name ORDER BY COUNT(h.employee_id) DESC LIMIT 1;

SELECT s.name FROM shop s INNER JOIN ( SELECT shop_id, COUNT(*) as num_employees FROM employee e GROUP BY shop_id ORDER BY num_employees DESC LIMIT 1 ) t ON s.shop_id = t.shop_id;

SELECT s.name FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id WHERE h.employee_id IS NULL;

SELECT s.name FROM shop s WHERE NOT EXISTS ( SELECT e.employee_id FROM employee e WHERE e.shop_id = s.shop_id );

SELECT s.name AS shop_name, COUNT(e.employee_id) FROM hire e JOIN shop s ON e.shop_id = s.shop_id GROUP BY s.name;

SELECT s.name AS shop_name, COUNT(e.employee_id) AS num_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.shop_id;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) FROM evaluation;

SELECT * FROM hiring;

SELECT * FROM hiring;

SELECT DISTINCT s.district FROM shop s WHERE s.number_products < 3000 AND s.shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000);

SELECT DISTINCT s.district FROM shop s WHERE s.number_products < 3000 INTERSECT SELECT DISTINCT s.district FROM shop s WHERE s.number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(*) FROM documents;

SELECT COUNT(*) FROM documents;

SELECT d.document_id, d.document_name, d.document_description FROM documents d;

SELECT d.document_id, d.document_name, d.document_description FROM documents d;

SELECT d.document_id, d.document_name FROM documents d WHERE d.other_details LIKE '%w%';

SELECT d.document_id, d.document_name FROM documents d WHERE d.other_details LIKE '%w%';

SELECT d.document_id, t.template_id, d.document_description FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Robbin CV';

SELECT d.document_id, t.template_id, d.document_description FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE d.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT t.template_id) FROM documents d JOIN templates t ON d.template_id = t.template_id;

SELECT COUNT(DISTINCT t.template_id) FROM templates t;

SELECT COUNT(*) FROM documents WHERE template_id = ( SELECT template_id FROM templates WHERE template_type_code = 'PPT' );

SELECT COUNT(*) FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'PPT';

SELECT t.template_id, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;

SELECT DISTINCT t.template_id, COUNT(t.template_id) FROM templates t GROUP BY t.template_id;

SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT DISTINCT t.template_id FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;

SELECT DISTINCT t.template_id FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;

SELECT DISTINCT t.template_id FROM templates t WHERE NOT EXISTS(SELECT * FROM documents d WHERE d.template_id = t.template_id);

SELECT DISTINCT t.template_id FROM templates t WHERE NOT EXISTS ( SELECT d.document_id FROM documents d WHERE d.template_id = t.template_id );

SELECT COUNT(*) FROM templates;

SELECT COUNT(*) FROM templates;

SELECT t.template_id, t.version_number, t.template_type_code FROM templates t;

SELECT t.template_id, t.version_number, t.template_type_code FROM templates t;

SELECT DISTINCT template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM ref_template_types;

SELECT DISTINCT t.template_id FROM templates t WHERE t.template_type_code IN ('PP', 'PPT');

SELECT DISTINCT t.template_id FROM templates t WHERE t.template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT t.version_number, t.template_type_code FROM templates t WHERE t.version_number > 5;

SELECT DISTINCT t.version_number, t.template_type_code FROM templates t WHERE t.version_number > 5;

SELECT t.template_type_code, COUNT(t.template_id) FROM templates t GROUP BY t.template_type_code;

SELECT DISTINCT t.template_type_code, COUNT(t.template_id) FROM templates t GROUP BY t.template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT t.template_type_code FROM templates t GROUP BY t.template_type_code ORDER BY COUNT(t.template_id) DESC LIMIT 1;

SELECT DISTINCT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;

SELECT DISTINCT t.template_type_code FROM templates t WHERE t.version_number = 1 AND t.template_type_code IN (SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING COUNT(*) < 3);

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';

SELECT t.template_type_code FROM templates AS t JOIN documents AS d ON t.template_id = d.template_id WHERE d.document_name = 'Data base';

SELECT d.document_name FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK';

SELECT d.document_name FROM documents d INNER JOIN templates t ON d.template_id = t.template_id WHERE t.template_type_code = 'BK';

SELECT t.template_type_code, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_type_code;

SELECT t.template_type_code, COUNT(d.document_id) FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_type_code ORDER BY COUNT(d.template_id) DESC LIMIT 1;

SELECT DISTINCT t.template_type_code FROM templates t WHERE NOT EXISTS ( SELECT d.document_id FROM documents d WHERE d.template_id = t.template_id );

SELECT DISTINCT t.template_type_code FROM templates t WHERE t.template_type_code NOT IN ( SELECT d.template_type_code FROM documents d );

SELECT DISTINCT t.template_type_code, r.template_type_description FROM templates t INNER JOIN ref_template_types r ON t.template_type_code = r.template_type_code;

SELECT DISTINCT t.template_type_code, r.template_type_description FROM ref_template_types r INNER JOIN templates t ON r.template_type_code = t.template_type_code;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT t.template_type_code, rt.template_type_description FROM templates t JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code;

SELECT DISTINCT t.template_type_code, r.template_type_description FROM templates t JOIN ref_template_types r ON t.template_type_code = r.template_type_code;

SELECT DISTINCT t.template_id FROM templates t INNER JOIN ref_template_types r ON t.template_type_code = r.template_type_code WHERE r.template_type_description = 'Presentation';

SELECT DISTINCT t.template_id FROM templates t WHERE t.template_type_code = ( SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation' );

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT COUNT(*) FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Summer Show' );

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text LIKE '%Korea %';

SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';

SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p INNER JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';

SELECT T1.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews';

SELECT T1.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews';

SELECT d.document_id, COUNT(p.paragraph_id) FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY d.document_id;

SELECT DISTINCT T1.document_id, COUNT(T2.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY T1.document_id;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id;

SELECT DISTINCT d.document_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) >= 2;

SELECT DISTINCT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) >= 2;

SELECT d.document_id, d.document_name FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;

SELECT d.document_id, d.document_name FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;

SELECT MIN(paragraph_id) FROM paragraphs;

SELECT MIN(paragraph_id) FROM paragraphs;

SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2;

SELECT DISTINCT d.document_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id WHERE d.document_id IN (SELECT t.template_id FROM templates t WHERE t.version_number BETWEEN 1 AND 2);

SELECT d.document_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text IN ('Brazil', 'Ireland');

SELECT DISTINCT d.document_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT COUNT(DISTINCT teacher_id) FROM teacher;

SELECT name FROM teacher ORDER BY age ASC;

SELECT name FROM teacher ORDER BY age ASC;

SELECT t.name, t.hometown, t.age FROM teacher t;

SELECT t.name, t.hometown, t.age FROM teacher t;

SELECT DISTINCT T.name FROM teacher AS T WHERE T.hometown != 'Little Lever Urban District';

SELECT DISTINCT T.name FROM teacher AS T WHERE T.hometown != 'Little Lever Urban District';

SELECT DISTINCT T.name FROM teacher AS T WHERE T.age IN (32, 33);

SELECT DISTINCT T.name FROM teacher AS T WHERE T.age IN (32, 33);

SELECT t.hometown FROM teacher t WHERE t.age = (SELECT MIN(age) FROM teacher);

SELECT t.hometown FROM teacher AS t WHERE t.age = (SELECT MIN(age) FROM teacher);

SELECT t.hometown, COUNT(t.teacher_id) FROM teacher t GROUP BY t.hometown;

SELECT t.hometown, COUNT(t.teacher_id) FROM teacher t GROUP BY t.hometown;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT t.hometown FROM teacher t GROUP BY t.hometown ORDER BY COUNT(t.teacher_id) DESC LIMIT 1;

SELECT DISTINCT t.hometown FROM teacher t GROUP BY t.hometown HAVING COUNT(DISTINCT t.teacher_id) >= 2;

SELECT DISTINCT t.hometown FROM teacher t GROUP BY t.hometown HAVING COUNT(DISTINCT t.teacher_id) >= 2;

SELECT t.name, c.course FROM course c INNER JOIN course_arrange ca ON c.course_id = ca.course_id INNER JOIN teacher t ON ca.teacher_id = t.teacher_id;

SELECT t.name, c.course FROM teacher t INNER JOIN course_arrange ca ON t.teacher_id = ca.teacher_id INNER JOIN course c ON ca.course_id = c.course_id;

SELECT t.name, c.course FROM course c INNER JOIN course_arrange ca ON c.course_id = ca.course_id INNER JOIN teacher t ON ca.teacher_id = t.teacher_id ORDER BY t.name ASC;

SELECT t.name, c.course FROM course c INNER JOIN course_arrange ca ON c.course_id = ca.course_id INNER JOIN teacher t ON ca.teacher_id = t.teacher_id ORDER BY t.name ASC;

SELECT t.name FROM teacher t INNER JOIN course c ON t.teacher_id = c.course_id WHERE c.course = 'Math';

SELECT DISTINCT t.name FROM course c JOIN course_arrange ca ON c.course_id = ca.course_id JOIN teacher t ON ca.teacher_id = t.teacher_id WHERE c.course LIKE '%math%';

SELECT t.name, COUNT(ca.course_id) FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.course_id) FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT DISTINCT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2;

SELECT DISTINCT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2;

SELECT DISTINCT t.name FROM teacher t WHERE NOT EXISTS ( SELECT * FROM course_arrange ca WHERE ca.teacher_id = t.teacher_id );

SELECT DISTINCT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.course_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT v.name FROM visitor v WHERE v.level_of_membership > '4' ORDER BY v.level_of_membership DESC;

SELECT AVG(age) FROM visitor WHERE level_of_membership < '5';

SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > '4' ORDER BY v.age DESC;

SELECT m.name FROM museum m WHERE m.num_of_staff = (SELECT MAX(num_of_staff) FROM museum);

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT m.open_year, m.num_of_staff FROM museum m WHERE m.name = 'Plaza Museum';

SELECT m.name FROM museum m WHERE m.num_of_staff > ALL(SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010);

SELECT v.id, v.name, v.age FROM visitor v INNER JOIN visit t ON v.id = t.visitor_id GROUP BY v.id HAVING COUNT(DISTINCT t.museum_id) > 1;

SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit t ON v.id = t.visitor_id ORDER BY t.total_spent DESC LIMIT 1;

SELECT v.name FROM visit v JOIN museum m ON v.museum_id = m.museum_id GROUP BY v.museum_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT m.name FROM museum m WHERE m.museum_id NOT IN (SELECT v.visitor_id FROM visit v);

SELECT v.name, v.age FROM visitor v JOIN visit t ON v.id = t.visitor_id WHERE t.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit);

SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;

SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = '1';

SELECT v.name FROM visitor v JOIN visit t ON v.id = t.visitor_id WHERE v.level_of_membership IN ('VIP', 'Gold') AND t.museum_id IN (SELECT m.museum_id FROM museum m WHERE m.open_year < 2009 INTERSECT SELECT m.museum_id FROM museum m WHERE m.open_year > 2011);

SELECT COUNT(*) FROM visitor WHERE NOT EXISTS(SELECT * FROM museum WHERE museum.open_year > 2010);

SELECT COUNT(*) FROM museum WHERE open_year < 2009 OR open_year > 2013;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(DISTINCT player_id) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(winner_age), AVG(loser_age) FROM matches;

SELECT AVG(ranking) FROM rankings WHERE player_id = ( SELECT winner_id FROM matches GROUP BY winner_id HAVING COUNT(DISTINCT winner_id) > 1 );

SELECT AVG(ranking) FROM rankings WHERE player_id = ( SELECT winner_id FROM matches WHERE winner_id IS NOT NULL );

SELECT MAX(ranking) FROM rankings WHERE player_id = ( SELECT loser_id FROM matches WHERE winner_id = ( SELECT player_id FROM players WHERE first_name = 'Ludvig' AND last_name = 'Toljan') );

SELECT MIN(ranking) FROM rankings WHERE player_id NOT IN (SELECT winner_id FROM matches);

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT DISTINCT T2.tourney_name FROM matches AS T1 INNER JOIN tourneys AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T2.tourney_name HAVING COUNT(*) > 10;

SELECT DISTINCT t.tourney_name FROM matches m INNER JOIN tourneys t ON m.tourney_id = t.tourney_id GROUP BY t.tourney_name HAVING COUNT(m.match_num) > 10;

SELECT DISTINCT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE YEAR(T1.tourney_date) IN (2013, 2016);

SELECT DISTINCT T1.player_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE YEAR(tourney_date) IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE YEAR(tourney_date) IN (2013, 2016);

SELECT T1.country_code, T1.first_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.country_code, T1.first_name HAVING COUNT(DISTINCT T1.tourney_name) >= 2;

SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name LIKE 'WTA% Championship' AND T2.tourney_name LIKE '%Australian Open%' GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.tourney_name) >= 2;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 ORDER BY T1.birth_date;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 ORDER BY T1.birth_date;

SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.hand = 'L' ORDER BY T1.birth_date;

SELECT DISTINCT T1.first_name || ' ' || T1.last_name FROM players AS T1 WHERE T1.hand = 'L' ORDER BY T1.birth_date ASC;

SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(ranking_date) DESC LIMIT 1 );

SELECT first_name, country_code FROM players WHERE player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(ranking_date) DESC LIMIT 1 );

SELECT MIN(year) FROM matches;

SELECT MIN(year) FROM matches;

SELECT w.winner_name, r.rankings_points FROM matches m INNER JOIN winners w ON m.winner_id = w.player_id INNER JOIN rankings r ON w.player_id = r.player_id ORDER BY COUNT(w.winner_id) DESC LIMIT 1;

SELECT T1.winner_name, SUM(T2.rankings.points) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id GROUP BY T1.winner_name ORDER BY SUM(T2.rankings.points) DESC LIMIT 1;

SELECT winner_name FROM matches WHERE winner_ioc = 'AUS' AND winner_rank_points = (SELECT MAX(ranking_points) FROM rankings WHERE tournament_name LIKE '%Australian%');

SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN matches AS T2 ON T1.match_num = T2.match_num WHERE T1.minutes > T2.minutes ORDER BY T1.minutes DESC LIMIT 1;

SELECT T1.winner_name, T2.loser_name FROM matches AS T1 INNER JOIN matches AS T2 ON T1.match_num = T2.match_num WHERE T1.minutes > T2.minutes;

SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT T1.player_id, T2.first_name, SUM(T3.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN rankings AS T4 ON T1.player_id = T4.player_id GROUP BY T1.player_id, T2.first_name;

SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;

SELECT COUNT(DISTINCT country_code), country FROM players GROUP BY country;

SELECT COUNT(DISTINCT country_code), country FROM players GROUP BY country;

SELECT T2.country_code FROM players AS T1 INNER JOIN countries AS T2 ON T1.country_code = T2.code GROUP BY T1.country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.country_code FROM countries AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.hand = 'right' AND T2.ranking_points > 50;

SELECT DISTINCT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.hand = 'right' AND T2.ranking_points > 50;

SELECT T1.ranking_date, COUNT(DISTINCT T1.player_id) FROM rankings AS T1 GROUP BY T1.ranking_date;

SELECT T1.ranking_date, COUNT(DISTINCT T1.tour_id) FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.ranking_date;

SELECT EXTRACT(YEAR FROM matches.tourney_date) AS year, COUNT(*) FROM matches GROUP BY year;

SELECT EXTRACT(YEAR FROM matches.tourney_date) AS year, COUNT(*) FROM matches GROUP BY year;

SELECT T1.player_name, T2.rank FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.age < ALL(SELECT T1.age FROM players AS T1 GROUP BY T1.player_id ORDER BY T1.age LIMIT 3);

SELECT T1.player_name, T2.rank FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.age < ALL(SELECT T3.age FROM players AS T3);

SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND winner_ioc = 'WTA';

SELECT COUNT(DISTINCT w.player_id) FROM players p INNER JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name LIKE 'WTA%';

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN ( SELECT winner_id, SUM(winner_rank_points) as total_rank_points FROM matches GROUP BY winner_id ORDER BY total_rank_points DESC LIMIT 1 ) AS T2 ON T1.player_id = T2.winner_id;

SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN ( SELECT player_id, SUM(ranking_points) as total_ranking_points FROM rankings GROUP BY player_id ORDER BY total_ranking_points DESC LIMIT 1 ) AS T2 ON T1.player_id = T2.player_id;

SELECT COUNT(*) FROM players WHERE hand = 'Left' UNION ALL SELECT COUNT(*) FROM players WHERE hand = 'Right';

SELECT COUNT(*) FROM players WHERE hand = 'Left' UNION ALL SELECT COUNT(*) FROM players WHERE hand = 'Right';

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name ASC;

SELECT b.name, b.date, b.result FROM battle b;

SELECT MIN(killed + injured), MAX(killed + injured) FROM death;

SELECT AVG(killed + injured) FROM death;

SELECT SUM(killed + injured) FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't');

SELECT b.name, b.result FROM battle AS b WHERE b.bulgarian_commander != 'Boril';

SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type LIKE '%Brig%';

SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id HAVING SUM(d.killed) > 10;

SELECT s.name, s.id FROM ship s INNER JOIN death d ON s.id = d.caused_by_ship_id ORDER BY SUM(d.injured) DESC LIMIT 1;

SELECT DISTINCT b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE NOT EXISTS ( SELECT 1 FROM ship WHERE ship.id = battle.id AND ship.tonnage = 225 );

SELECT b.name, b.date FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' AND b.latin_commander = 'HMS Atalanta';

SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b INNER JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.location LIKE '%English Channel%' GROUP BY b.id HAVING SUM(s.lost_in_battle) = 0;

SELECT d.note FROM death d WHERE d.caused_by_ship_id IN (SELECT s.id FROM ship s WHERE s.location LIKE '%East%');

SELECT DISTINCT line_1, line_2 FROM addresses;

SELECT DISTINCT T1.line_1, T1.line_2 FROM addresses AS T1;

SELECT COUNT(*) FROM courses;

SELECT COUNT(*) FROM courses;

SELECT T2.course_name FROM courses AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T1.degree_program_id = 4;

SELECT DISTINCT T2.degree_summary_description FROM degree_programs AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.department_id = 4;

SELECT DISTINCT T2.zip_postcode FROM addresses AS T1 INNER JOIN student_enrolment AS T2 ON T1.address_id = T2.current_address_id WHERE T1.city = 'Port Chelsea';

SELECT DISTINCT T2.zip_postcode FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.line_1 LIKE '%Port Chelsea%';

SELECT d.department_name, COUNT(dp.degree_program_id) FROM departments d INNER JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;

SELECT d.department_name, d.department_id FROM departments d INNER JOIN degree_programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;

SELECT COUNT(DISTINCT T1.department_id) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id;

SELECT COUNT(DISTINCT T1.department_id) FROM degree_programs AS T1;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'Engineering' );

SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'Engineering' );

SELECT DISTINCT T2.section_name, T2.section_description FROM sections AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id;

SELECT DISTINCT T2.section_name, T2.section_description FROM sections AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id;

SELECT DISTINCT T2.course_id FROM sections AS T1 INNER JOIN courses AS T2 ON T1.section_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(T1.section_id) <= 2;

SELECT DISTINCT T1.course_id, T1.course_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id WHERE T2.section_id < 2;

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT DISTINCT section_name FROM sections ORDER BY section_name DESC;

SELECT T2.semester_id, T2.semester_name FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T2.semester_id, T2.section_name FROM student_enrolment AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.section_id GROUP BY T1.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';

SELECT T2.department_description FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE '%computer%';

SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_program_id IN (SELECT T4.degree_program_id FROM degree_programs AS T4 GROUP BY T4.degree_program_id HAVING COUNT(*) > 1);

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN degree_programs AS T3 ON T1.degree_program_id = T3.degree_program_id WHERE T3.degree_program_id IN (SELECT DISTINCT T4.degree_program_id FROM degree_programs AS T4 GROUP BY T4.degree_program_id HAVING COUNT(*) > 1) AND T1.semester_id = SELECT MIN(T5.semester_id) FROM semesters AS T5;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment_courses AS TC ON T1.student_id = TC.student_id INNER JOIN degree_programs AS DP ON TC.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor';

SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM degree_programs AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name = 'Bachelors';

SELECT T2.degree_summary_name FROM degree_programs AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;

SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT d.degree_program_id, dp.degree_summary_name FROM degree_programs dp INNER JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) DESC LIMIT 1;

SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp INNER JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) DESC LIMIT 1;

SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T1.student_enrolment_id) FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.degree_program_id) FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1;

SELECT DISTINCT T2.semester_name FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IS NULL;

SELECT T2.semester_name FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL;

SELECT DISTINCT T2.course_name FROM student_enrolment AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id;

SELECT DISTINCT T2.course_name FROM student_enrolment AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id;

SELECT T1.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1;

SELECT T1.course_name FROM student_enrolment AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.course_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1;

SELECT DISTINCT T.last_name FROM students AS T INNER JOIN addresses AS A ON T.current_address_id = A.address_id WHERE T.state_province_county = 'North Carolina' AND T.degree_program_id IS NULL;

SELECT DISTINCT T.last_name FROM students AS T INNER JOIN student_enrolment AS S ON T.student_id = S.student_id WHERE T.state_province_county = 'North Carolina' AND T.current_address_id IS NOT NULL AND T.date_left IS NULL;

SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN ( SELECT DISTINCT transcript_id FROM transcript_contents GROUP BY transcript_id HAVING COUNT(*) >= 2 );

SELECT transcript_id FROM transcripts WHERE transcript_date = ( SELECT MAX(date) FROM transcripts GROUP BY transcript_id HAVING COUNT(*) >= 2 );

SELECT T2.cell_mobile_number FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward';

SELECT T2.cell_mobile_number FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 WHERE T1.date_first_registered = ( SELECT MIN(date_first_registered) FROM students );

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 WHERE T1.date_first_registered = ( SELECT MIN(date_first_registered) FROM students );

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.date_graduation IS NOT NULL ORDER BY T3.date_graduation ASC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.date_left IS NOT NULL ORDER BY T2.date_left LIMIT 1;

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.permanent_address_id <> T1.current_address_id;

SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T1.current_address_id <> T2.address_id;

SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.address_id, T1.line_1, T1.line_2 FROM ( SELECT T1.address_id, T1.line_1, T1.line_2, COUNT(T2.student_id) AS num_students FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY num_students DESC LIMIT 1 ) AS T1;

SELECT AVG(CASE WHEN TRANSCRIPT_DATE IS NOT NULL THEN TRANSCRIPT_DATE ELSE NULL END) FROM transcripts;

SELECT AVG(CAST(EXTRACT(YEAR FROM transcript_date) AS REAL)) FROM transcripts;

SELECT t.transcript_date FROM transcripts t WHERE t.transcript_date = (SELECT MIN(t.transcript_date) FROM transcripts t);

SELECT MIN(t.transcript_date), t.other_details FROM transcripts t WHERE t.transcript_date = (SELECT MAX(t2.transcript_date) FROM transcripts t2);

SELECT COUNT(*) FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT DISTINCT T2.student_enrolment_id FROM student_enrolments AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id INNER JOIN transcripts AS T3 ON T2.student_course_id = T3.transcript_id GROUP BY T2.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT MAX(COUNT(*)) FROM transcript_contents WHERE transcript_id = (SELECT MIN(transcript_id) FROM transcripts);

SELECT t.transcript_id FROM transcripts t GROUP BY t.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT T1.semester_id FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master') INTERSECT SELECT T1.semester_id FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor');

SELECT T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_program_id IN ( SELECT dp.degree_program_id FROM degree_programs AS dp WHERE dp.degree_summary_name LIKE '%Master%' UNION ALL SELECT dp.degree_program_id FROM degree_programs AS dp WHERE dp.degree_summary_name LIKE '%Bachelor%' );

SELECT COUNT(DISTINCT current_address_id) FROM students;

SELECT DISTINCT T1.line_1 FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id;

SELECT * FROM students ORDER BY last_name DESC;

SELECT * FROM students ORDER BY last_name DESC;

SELECT * FROM sections WHERE section_name = 'H';

SELECT T2.section_name FROM sections AS T1 INNER JOIN sections AS T2 ON T1.section_id = T2.section_id WHERE T1.section_name = 'H';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country IN ('Haiti') OR T1.cell_mobile_number = '09700166582';

SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN ( SELECT * FROM students WHERE (country = 'Haiti' AND permanent_address_id IS NOT NULL) UNION ALL SELECT * FROM students WHERE cell_mobile_number = '09700166582') AS T2 ON T1.student_id = T2.student_id;

SELECT DISTINCT title FROM cartoon ORDER BY title;

SELECT DISTINCT title FROM cartoon ORDER BY title;

SELECT DISTINCT T2.title FROM tv_series AS T1 INNER JOIN cartoon AS T2 ON T1.channel = T2.channel WHERE T2.directed_by = 'Ben Jones';

SELECT DISTINCT t.title FROM tv_series s JOIN cartoon c ON s.channel = c.channel WHERE c.directed_by = 'Ben Jones';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE directed_by = 'Joseph Kuhr';

SELECT t.title, d.director FROM cartoon c JOIN tv_series s ON c.channel = s.channel ORDER BY c.original_air_date;

SELECT c.title, d.director FROM cartoon c JOIN tv_series s ON c.channel = s.channel ORDER BY c.original_air_date;

SELECT DISTINCT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT DISTINCT t.title FROM tv_series s JOIN cartoon c ON s.channel = c.channel WHERE c.directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT t.country, COUNT(t.id) FROM tv_channel t GROUP BY t.country ORDER BY COUNT(t.id) DESC LIMIT 1;

SELECT t.country, COUNT(t.id) FROM tv_channel t GROUP BY t.country ORDER BY COUNT(t.id) DESC LIMIT 1;

SELECT COUNT(DISTINCT content), COUNT(DISTINCT series_name) FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT content FROM tv_series WHERE series_name = 'Sky Radio';

SELECT t.package_option FROM tv_channel t WHERE t.series_name = 'Sky Radio';

SELECT DISTINCT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT COUNT(DISTINCT tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'English';

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language ORDER BY COUNT(t.id) ASC LIMIT 1;

SELECT t.country, COUNT(t.id) FROM tv_channel t GROUP BY t.language ORDER BY COUNT(t.id) ASC LIMIT 1;

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language;

SELECT t.language, COUNT(t.id) FROM tv_channel t GROUP BY t.language;

SELECT t.channel, s.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel WHERE s.title = 'The Rise of the Blue Beetle!';

SELECT t.series_name FROM tv_series t JOIN cartoon c ON t.channel = c.channel WHERE c.title = 'The Rise of the Blue Beetle';

SELECT t.title FROM tv_series ts JOIN tv_channel tc ON ts.channel = tc.id WHERE ts.series_name = 'Sky Radio';

SELECT t.title FROM tv_series ts JOIN cartoon tc ON ts.channel = tc.channel WHERE ts.series_name = 'Sky Radio';

SELECT t.series_name, t.episode FROM tv_series AS t ORDER BY t.rating DESC;

SELECT t.episode FROM tv_series t ORDER BY t.rating DESC;

SELECT t.series_name, t.episode, t.rating FROM tv_series t ORDER BY t.rating DESC LIMIT 3;

SELECT t.title, s.rating FROM tv_series s JOIN tv_episode e ON s.id = e.series_id ORDER BY s.rating DESC LIMIT 3;

SELECT MIN(t1.share), MAX(t1.share) FROM tv_series t1;

SELECT MAX(share), MIN(share) FROM tv_series;

SELECT t.air_date FROM tv_series t WHERE t.episode = 'A Love of a Lifetime';

SELECT T2.air_date FROM tv_episode AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.episode WHERE T1.title = 'A Love of a Lifetime';

SELECT t.weekly_rank FROM tv_series t WHERE t.episode = 'A Love of a Lifetime';

SELECT w.weekly_rank FROM tv_episode e JOIN tv_series s ON e.id = s.episode JOIN tv_channel c ON s.channel = c.id WHERE e.title = 'A Love of a Lifetime';

SELECT t.channel, s.series_name FROM tv_series s INNER JOIN tv_channel t ON s.channel = t.id WHERE s.episode = 'A Love of a Lifetime';

SELECT t.series_name FROM tv_episode e JOIN tv_series t ON e.episode = t.episode WHERE e.episode = 'A Love of a Lifetime';

SELECT DISTINCT T2.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.series_name = 'Sky Radio';

SELECT t.episode FROM tv_series AS t WHERE t.series_name = 'Sky Radio';

SELECT director FROM cartoon GROUP BY director;

SELECT t.director, COUNT(c.id) FROM tv_cartoon c JOIN tv_director d ON c.director = d.name GROUP BY t.director;

SELECT c.title, c.channel FROM cartoon AS c JOIN tv_channel AS t ON c.channel = t.id ORDER BY c.original_air_date DESC LIMIT 1;

SELECT c.title, c.channel FROM cartoon AS c JOIN tv_channel AS t ON c.channel = t.id ORDER BY c.original_air_date DESC LIMIT 1;

SELECT t.channel, c.series_name FROM tv_channel t INNER JOIN tv_series s ON t.id = s.channel WHERE t.hight_definition_tv = TRUE;

SELECT DISTINCT t.package_option, c.series_name FROM tv_channel c INNER JOIN tv_series s ON c.id = s.channel WHERE c.hight_definition_tv = TRUE;

SELECT DISTINCT t.country FROM tv_channel t JOIN cartoon c ON t.id = c.channel WHERE c.written_by LIKE '%Todd Casey%';

SELECT DISTINCT t.country FROM tv_series ts JOIN cartoon c ON ts.channel = c.channel WHERE c.directed_by LIKE '%Todd Casey%';

SELECT DISTINCT t.country FROM tv_channel t WHERE NOT EXISTS ( SELECT 1 FROM cartoon c WHERE c.channel = t.id AND c.written_by = 'Todd Casey');

SELECT DISTINCT t.country FROM tv_channel t WHERE NOT EXISTS ( SELECT 1 FROM cartoon c WHERE c.directed_by = 'Todd Casey' AND c.title LIKE '%Cartoon%' );

SELECT t.tv_series.series_name, t.tv_channel.country FROM tv_series INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.directed_by LIKE '%Ben Jones%' AND tv_series.directed_by LIKE '%Michael Chang%';

SELECT t1.series_name, t1.country FROM tv_series t1 INNER JOIN cartoon t2 ON t1.channel = t2.channel WHERE t2.directed_by IN ('Ben Jones', 'Michael Chang');

SELECT t2.country, t2.pixel_aspect_ratio_par FROM tv_channel AS t1 INNER JOIN tv_series AS t2 ON t1.id = t2.channel WHERE t1.language != 'English';

SELECT t2.country, t2.pixel_aspect_ratio_par FROM tv_channel AS t1 LEFT JOIN tv_series AS t2 ON t1.id = t2.channel WHERE t1.language != 'English';

SELECT DISTINCT t.channel FROM tv_channel t GROUP BY t.country HAVING COUNT(t.id) > 2;

SELECT DISTINCT t.channel FROM tv_channel t GROUP BY t.channel HAVING COUNT(t.channel) > 2;

SELECT DISTINCT t.channel FROM tv_channel t LEFT JOIN cartoon c ON t.id = c.channel WHERE c.directed_by IS NULL;

SELECT DISTINCT t.channel FROM tv_channel t LEFT JOIN cartoon c ON t.id = c.channel WHERE c.directed_by IS NULL;

SELECT DISTINCT package_option FROM tv_channel WHERE NOT EXISTS ( SELECT 1 FROM cartoon WHERE channel = tv_channel.id AND directed_by = 'Ben Jones' );

SELECT DISTINCT package_option FROM tv_channel WHERE NOT EXISTS ( SELECT * FROM cartoon WHERE channel = tv_channel.id AND directed_by = 'Ben Jones' );

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT p.poker_player_id, p.final_table_made, p.best_finish FROM poker_player p;

SELECT p.poker_player_id, p.final_table_made, p.best_finish FROM poker_player p;

SELECT AVG(e.earnings) FROM poker_player e;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT DISTINCT p.name FROM poker_player p;

SELECT DISTINCT name FROM poker_player;

SELECT p.name FROM poker_player p WHERE p.earnings > 300000;

SELECT p.name FROM poker_player p WHERE p.earnings > 300000;

SELECT p.name FROM poker_player p ORDER BY p.final_table_made ASC;

SELECT p.name FROM poker_player p ORDER BY p.final_table_made ASC;

SELECT p.birth_date FROM poker_player p WHERE p.earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT birth_date FROM poker_player WHERE money_rank = (SELECT MIN(money_rank) FROM poker_player);

SELECT p.money_rank FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height = (SELECT MAX(height) FROM people);

SELECT poker_player.money_rank FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height = (SELECT MAX(height) FROM people);

SELECT AVG(poker_player.earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;

SELECT AVG(poker_player.earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;

SELECT p.name FROM poker_player p ORDER BY p.earnings DESC;

SELECT p.name FROM poker_player p ORDER BY p.earnings DESC;

SELECT DISTINCT nationality, COUNT(*) FROM people GROUP BY nationality;

SELECT nationality, COUNT(*) FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT DISTINCT name FROM people WHERE nationality != 'Russia';

SELECT DISTINCT name FROM people WHERE nationality != 'Russia';

SELECT DISTINCT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT DISTINCT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM area_code_state;

SELECT c.contestant_number, c.contestant_name FROM contestants c ORDER BY c.contestant_name DESC;

SELECT v.vote_id, v.phone_number, v.state FROM votes v;

SELECT MAX(area_code), MIN(area_code) FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT DISTINCT T.contestant_name FROM contestants AS T WHERE T.contestant_name != 'Jessie Alloway';

SELECT DISTINCT state, created FROM votes;

SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number HAVING COUNT(v.vote_id) >= 2;

SELECT c.contestant_number, c.contestant_name FROM contests c JOIN votes v ON c.contestant_number = v.contestant_number ORDER BY COUNT(v.vote_id) ASC LIMIT 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contests WHERE contest_number NOT IN (SELECT contestant_number FROM votes);

SELECT DISTINCT T3.area_code FROM votes AS T1 INNER JOIN area_code_state AS T2 ON T1.state = T2.state INNER JOIN contestants AS T3 ON T1.contestant_number = T3.contestant_number GROUP BY T3.area_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT v.created, s.state, v.phone_number FROM votes v INNER JOIN contestants c ON v.contestant_number = c.contestant_number INNER JOIN area_code_state s ON v.state = s.area_code WHERE c.contestant_name = 'Tabatha Gehling';

SELECT DISTINCT ac.area_code FROM votes v JOIN contestants c ON v.contestant_number = c.contestant_number WHERE v.state IN ('CA', 'NY') AND v.created BETWEEN '2019-01-01 00:00:00' AND '2020-12-31 23:59:59' AND (v.vote_type = 'yes' OR v.vote_type = 'no') GROUP BY ac.area_code HAVING COUNT(DISTINCT c.contestant_number) > 1;

SELECT DISTINCT T.contestant_name FROM contests AS T WHERE T.contestant_name LIKE '%Al%';

SELECT DISTINCT name FROM country WHERE indepyear > 1950;

SELECT DISTINCT name FROM country WHERE indepyear > 1950;

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT continent FROM country WHERE localname = 'Anguilla';

SELECT DISTINCT c.continent FROM country AS c WHERE c.name = 'Anguilla';

SELECT DISTINCT region FROM city WHERE name = 'Kabul';

SELECT DISTINCT region FROM city WHERE name = 'Kabul';

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.name = 'Aruba' ORDER BY T1.percentage DESC LIMIT 1;

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.name = 'Aruba';

SELECT c.population, c.lifeexpectancy FROM country AS c WHERE c.name = 'Brazil';

SELECT c.population, c.lifeexpectancy FROM country AS c WHERE c.name = 'Brazil';

SELECT c.region, c.population FROM country AS c WHERE c.name = 'Angola';

SELECT c.region, SUM(c.population) FROM country AS c WHERE c.name = 'Angola' GROUP BY c.region;

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.region = 'Asia' AND T1.lifeexpectancy = (SELECT MIN(T12.lifeexpectancy) FROM country AS T12 WHERE T12.region = 'Asia');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T2.language = 'English';

SELECT SUM(population), MAX(gnp) FROM country WHERE region = 'Asia';

SELECT COUNT(population), MAX(gnp) FROM country WHERE continent = 'Asia';

SELECT AVG(countrylifeexpectancy) FROM country WHERE countryregion = 'Africa' AND countrygovernmentform = 'Republic';

SELECT AVG(countrylifeexpectancy) FROM country WHERE countryregion = 'Africa' AND countrygovernmentform = 'Republic';

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT SUM(population) FROM city WHERE district = 'Gelderland';

SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US';

SELECT AVG(gnp), SUM(population) FROM country WHERE countrycode IN (SELECT DISTINCT code FROM country WHERE countrycode LIKE 'US%' AND countrycode LIKE 'US%');

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT SUM(COUNT(*)) FROM countrylanguage WHERE countrycode = 'ABW';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY SUM(T2.percentage) DESC LIMIT 1;

SELECT c.continent FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY COUNT(cl.language) DESC LIMIT 1;

SELECT c.continent, COUNT(DISTINCT cl.countrycode) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY COUNT(DISTINCT cl.countrycode) DESC LIMIT 1;

SELECT COUNT(DISTINCT c1.countrycode) FROM country AS c1 INNER JOIN countrylanguage AS cl ON c1.code = cl.countrycode WHERE cl.language = 'English' AND cl.isofficial = TRUE INTERSECT SELECT COUNT(DISTINCT c1.countrycode) FROM country AS c1 INNER JOIN countrylanguage AS cl ON c1.code = cl.countrycode WHERE cl.language = 'Dutch' AND cl.isofficial = TRUE;

SELECT COUNT(*) FROM countrylanguage WHERE language IN ('English', 'Dutch');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'French');

SELECT DISTINCT c.name FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'English' AND cl.isofficial = TRUE AND cl.language = 'French';

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'French');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'French');

SELECT COUNT(DISTINCT c.continent) FROM countrylanguage cl INNER JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'Chinese';

SELECT COUNT(*) FROM countrylanguage WHERE language = 'Chinese';

SELECT DISTINCT region FROM country WHERE language IN ('English', 'Dutch');

SELECT DISTINCT c.region FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language IN ('Dutch', 'English');

SELECT DISTINCT c.name FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch');

SELECT DISTINCT c.name FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch');

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.continent = 'Asia' ORDER BY T1.percentage DESC LIMIT 1;

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.continent = 'Asia' GROUP BY T1.language ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(DISTINCT T0.code) = 1;

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(DISTINCT T0.code) = 1;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'English' ORDER BY T1.population DESC LIMIT 1;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'English' ORDER BY T1.population DESC LIMIT 1;

SELECT c.name, c.population, c.lifeexpectancy FROM country c WHERE c.continent = 'Asia' ORDER BY c.surfacearea DESC LIMIT 1;

SELECT c.name, c.population, c.lifeexpectancy FROM country c WHERE c.continent = 'Asia' ORDER BY c.surfacearea DESC LIMIT 1;

SELECT AVG(countrylifeexpectancy) FROM country WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE isofficial = FALSE);

SELECT AVG(countrylifeexpectancy) FROM country WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE isofficial = FALSE);

SELECT SUM(population) FROM country WHERE countrycode IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English');

SELECT SUM(population) FROM country WHERE countrycode IN (SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English');

SELECT DISTINCT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix';

SELECT DISTINCT T1.language FROM country AS T1 INNER JOIN countryhead AS T2 ON T1.code = T2.country WHERE T2.headofstate = 'Beatrix';

SELECT COUNT(DISTINCT c.countrycode) FROM country c WHERE c.indepyear < 1930 AND c.language IN (SELECT l.language FROM countrylanguage l);

SELECT COUNT(DISTINCT c.countrycode) FROM country c WHERE c.indepyear < 1930;

SELECT DISTINCT c.name FROM country AS c WHERE c.continent != 'Europe' AND c.surfacearea > ALL(SELECT c2.surfacearea FROM country AS c2 WHERE c2.continent = 'Europe');

SELECT DISTINCT c.name FROM country AS c WHERE c.continent != 'Europe' AND c.surfacearea > ALL(SELECT c.surfacearea FROM country AS c WHERE c.continent = 'Europe');

SELECT DISTINCT c.name FROM country AS c WHERE c.continent = 'Africa' AND c.population < ALL(SELECT c1.population FROM country AS c1 WHERE c1.continent = 'Asia');

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T2.continent = 'Asia' AND T1.population < ALL(SELECT T2.population FROM country AS T2);

SELECT DISTINCT c.name FROM country AS c WHERE c.continent = 'Asia' AND c.population > ALL(SELECT c1.population FROM country AS c1 WHERE c1.continent = 'Africa');

SELECT DISTINCT c.name FROM country AS c WHERE c.continent = 'Asia' AND c.population > ALL(SELECT c1.population FROM country AS c1 WHERE c1.continent = 'Africa');

SELECT DISTINCT c.code FROM country AS c INNER JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT DISTINCT c.code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language IS NULL;

SELECT DISTINCT c.code FROM country AS c INNER JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT DISTINCT c.code FROM country AS c INNER JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT DISTINCT c.code FROM country AS c WHERE c.governmentform != 'Republic' AND c.language IS NULL;

SELECT DISTINCT c.code FROM country AS c WHERE c.governmentform != 'Republic' AND c.language = 'English';

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Europe' AND T2.governmentform = 'Constitutional Monarchy' AND T2.isofficial = FALSE;

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Europe' AND T2.governmentform = 'Democracy' AND T2.isofficial = FALSE;

SELECT DISTINCT T1.name FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode WHERE T0.continent = 'Asia' AND T1.language = 'Chinese';

SELECT DISTINCT T1.name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T2.language = 'Chinese' AND T1.continent = 'Asia';

SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM country);

SELECT c.name, c.indepyear, c.surfacearea FROM country c WHERE c.population = (SELECT MIN(population) FROM country);

SELECT c.name, c.population, c.headofstate FROM country AS c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country);

SELECT c.name, c.population, c.headofstate FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country);

SELECT DISTINCT T1.name, COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(DISTINCT T2.language) >= 3;

SELECT DISTINCT c.name, COUNT(DISTINCT cl.language) FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode GROUP BY c.name HAVING COUNT(cl.language) > 2;

SELECT c.name, COUNT(*) FROM city c WHERE c.population > (SELECT AVG(population) FROM city) GROUP BY c.district;

SELECT c.name AS district_name, AVG(c.population) OVER () AS avg_pop FROM city c WHERE c.population > (SELECT AVG(population) FROM city);

SELECT DISTINCT g.form AS gov_form, SUM(c.population) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.lifeexpectancy > 72 GROUP BY g.form;

SELECT DISTINCT g.form FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE AVG(cl.percentage) > 72 GROUP BY g.form;

SELECT c.continent, AVG(c.lifeexpectancy), SUM(c.population) FROM country AS c WHERE c.lifeexpectancy < 72 GROUP BY c.continent;

SELECT DISTINCT c.continent FROM country c WHERE AVG(c.lifeexpectancy) < 72 GROUP BY c.continent;

SELECT DISTINCT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT DISTINCT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN ( SELECT countrycode, SUM(population) as total_pop FROM country GROUP BY countrycode ORDER BY total_pop DESC LIMIT 3 ) AS T2 ON T1.code = T2.countrycode;

SELECT DISTINCT name FROM country ORDER BY population DESC LIMIT 3;

SELECT DISTINCT name FROM country WHERE population <= (SELECT AVG(population) FROM country LIMIT 3);

SELECT DISTINCT T1.name FROM country AS T1 INNER JOIN ( SELECT countrycode, MIN(population) as min_pop FROM country GROUP BY countrycode LIMIT 3 ) AS T2 ON T1.code = T2.countrycode;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT DISTINCT name FROM country WHERE continent = 'Europe' AND population > 80000;

SELECT DISTINCT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT DISTINCT T2.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.population BETWEEN 160000 AND 900000;

SELECT DISTINCT T2.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.population BETWEEN 160000 AND 900000;

SELECT DISTINCT T1.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1;

SELECT DISTINCT T1.language FROM country AS T0 INNER JOIN countrylanguage AS T1 ON T0.code = T1.countrycode GROUP BY T1.language ORDER BY COUNT(*) DESC LIMIT 1;

SELECT c.name, MAX(cl.percentage) FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode GROUP BY c.name;

SELECT DISTINCT c.code FROM countrylanguage cl INNER JOIN country c ON cl.countrycode = c.code ORDER BY SUM(cl.percentage) DESC LIMIT 1;

SELECT SUM(COUNT(*)) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 0.5;

SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = TRUE;

SELECT DISTINCT c.code FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'Spanish' ORDER BY cl.percentage DESC LIMIT 1;

SELECT DISTINCT c.code FROM country AS c JOIN countrylanguage AS cl ON c.code = cl.countrycode WHERE cl.language = 'Spanish' AND cl.isofficial = TRUE;

SELECT COUNT(*) FROM conductor;

SELECT COUNT(*) FROM conductor;

SELECT name FROM conductor ORDER BY age ASC;

SELECT name FROM conductor ORDER BY age;

SELECT DISTINCT name FROM conductor WHERE nationality != 'USA';

SELECT DISTINCT name FROM conductor WHERE nationality != 'USA';

SELECT DISTINCT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT DISTINCT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT MAX(share), MIN(share) FROM performance WHERE NOT type = 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT name FROM conductor WHERE year_of_work = (SELECT MAX(year_of_work) FROM conductor);

SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT conductor.name, orchestra.orchestra FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT DISTINCT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name HAVING COUNT(DISTINCT orchestra_id) > 1;

SELECT DISTINCT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name HAVING COUNT(DISTINCT orchestra_id) > 1;

SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT T3.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id INNER JOIN orchestra AS T3 ON T2.orchestra_id = T3.orchestra_id WHERE T2.year_of_founded > 2008;

SELECT DISTINCT T2.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008;

SELECT DISTINCT record_company FROM orchestra;

SELECT DISTINCT record_company FROM orchestra;

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;

SELECT major_record_format, COUNT(*) as freq FROM orchestra GROUP BY major_record_format ORDER BY freq DESC;

SELECT DISTINCT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 UNION SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 UNION SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';

SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD';

SELECT DISTINCT T3.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id INNER JOIN conductor AS T3 ON T1.conductor_id = T3.conductor_id GROUP BY T1.year_of_founded HAVING COUNT(T2.performance_id) > 1;

SELECT DISTINCT orchestra.year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT performance_id FROM performance GROUP BY performance_id HAVING COUNT(*) > 1);

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT h.name, h.grade FROM highschooler h;

SELECT h.name, h.grade FROM highschooler h;

SELECT DISTINCT grade FROM highschooler;

SELECT h.name, h.grade FROM highschooler h;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT h.name FROM highschooler h WHERE h.grade = 10;

SELECT DISTINCT h.name FROM highschooler h WHERE h.grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT h.grade, COUNT(h.id) FROM highschooler h GROUP BY h.grade;

SELECT h.grade, COUNT(h.id) FROM highschooler h GROUP BY h.grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT h.id, COUNT(f.friend_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id;

SELECT COUNT(DISTINCT f.friend_id) FROM friend f;

SELECT h.name, COUNT(f.friend_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name, COUNT(f.student_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(f.friend_id) DESC LIMIT 1;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(f.friend_id) DESC LIMIT 1;

SELECT DISTINCT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3;

SELECT DISTINCT f.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id WHERE h.name = 'Kyle';

SELECT DISTINCT f.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id WHERE h.name = 'Kyle';

SELECT COUNT(DISTINCT f.student_id) FROM highschooler h INNER JOIN friend f ON h.id = f.student_id WHERE h.name = 'Kyle';

SELECT COUNT(DISTINCT f.student_id) FROM friend f INNER JOIN highschooler h ON f.friend_id = h.id WHERE h.name = 'Kyle';

SELECT DISTINCT h.id FROM highschooler h WHERE NOT EXISTS ( SELECT f.student_id FROM friend f WHERE f.student_id = h.id );

SELECT DISTINCT h.id FROM highschooler h WHERE NOT EXISTS ( SELECT f.student_id FROM friend f WHERE f.student_id = h.id );

SELECT h.name FROM highschooler h WHERE NOT EXISTS ( SELECT * FROM friend f WHERE f.student_id = h.id );

SELECT DISTINCT h.name FROM highschooler h WHERE NOT EXISTS ( SELECT f.student_id FROM friend f WHERE f.student_id = h.id );

SELECT DISTINCT h.id FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.liked_id;

SELECT DISTINCT student_id FROM friend WHERE student_id IN (SELECT student_id FROM likes)

SELECT DISTINCT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.liked_id;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.liked_id WHERE h.grade BETWEEN 9 AND 12;

SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;

SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;

SELECT h.name, COUNT(l.liked_id) FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.name;

SELECT h.name, COUNT(l.liked_id) FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.name;

SELECT h.name FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT h.name FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT h.name FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;

SELECT DISTINCT h.name FROM highschooler h INNER JOIN likes l ON h.id = l.student_id GROUP BY h.id HAVING COUNT(l.liked_id) >= 2;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id WHERE h.grade > 5 GROUP BY h.id HAVING COUNT(f.friend_id) >= 2;

SELECT h.name FROM highschooler h INNER JOIN friend f ON h.id = f.student_id WHERE h.grade > 5 GROUP BY h.id HAVING COUNT(f.friend_id) >= 2;

SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM highschooler h INNER JOIN likes l ON h.id = l.student_id WHERE h.name = 'Kyle';

SELECT AVG(hs.grade) FROM highschooler hs INNER JOIN friend f ON hs.id = f.student_id WHERE hs.id IN (SELECT DISTINCT student_id FROM friend);

SELECT AVG(hs.grade) FROM highschooler hs INNER JOIN friend f ON hs.id = f.student_id;

SELECT MIN(hs.grade) FROM highschooler hs WHERE hs.id NOT IN (SELECT f.student_id FROM friend f);

SELECT MIN(hs.grade) FROM highschooler hs WHERE hs.id NOT IN (SELECT f.student_id FROM friend f);

SELECT DISTINCT T.state FROM owners O INNER JOIN professionals P ON O.state = P.state;

SELECT DISTINCT o.state FROM owners o UNION SELECT DISTINCT p.state FROM professionals p;

SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);

SELECT AVG(age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT p.professional_id, p.last_name, p.cell_number FROM professionals AS p INNER JOIN treatments AS t ON p.professional_id = t.professional_id WHERE p.state LIKE 'IN' OR COUNT(*) > 2;

SELECT p.professional_id, p.last_name, p.cell_number FROM professionals AS p WHERE p.state = 'Indiana' OR p.professional_id IN (SELECT t.professional_id FROM treatments AS t GROUP BY t.professional_id HAVING COUNT(*) > 2);

SELECT DISTINCT T.name FROM dogs D INNER JOIN treatments T ON D.dog_id = T.dog_id WHERE D.owner_id = (SELECT o.owner_id FROM owners o WHERE o.email_address = 'email@example.com') AND T.cost_of_treatment < 1000;

SELECT DISTINCT T.name FROM dogs D INNER JOIN treatments T ON D.dog_id = T.dog_id WHERE D.owner_id NOT IN ( SELECT o.owner_id FROM owners o WHERE SUM(T.cost_of_treatment) > 1000 );

SELECT DISTINCT first_name FROM owners UNION SELECT DISTINCT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT DISTINCT T.owner_first_name FROM owners AS O LEFT JOIN dogs AS D ON O.owner_id = D.owner_id WHERE D.name IS NULL;

SELECT p.professional_id, p.role_code, p.email_address FROM professionals AS p LEFT JOIN treatments AS t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT p.professional_id, p.role_code, p.email_address FROM professionals AS p LEFT JOIN treatments AS t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT o.owner_id, o.first_name, o.last_name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT owner_id, first_name, last_name FROM owners WHERE COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) cnt FROM owners GROUP BY owner_id) t);

SELECT p.professional_id, p.role_code, p.first_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(*) >= 2;

SELECT p.professional_id, p.role_code, p.first_name FROM professionals AS p INNER JOIN treatments AS t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(*) >= 2;

SELECT b.breed_name FROM breeds AS b JOIN dogs AS d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT b.breed_name FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code GROUP BY d.breed_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT o.owner_id, o.last_name FROM owners o INNER JOIN treatments t ON o.owner_id = t.dog_id GROUP BY o.owner_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT o.owner_id, o.last_name FROM owners o INNER JOIN treatments t ON o.owner_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1;

SELECT t.treatment_type_description FROM treatments t WHERE t.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM treatments);

SELECT t.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o INNER JOIN charges c ON o.owner_id = c.owner_id GROUP BY o.owner_id ORDER BY SUM(c.charge_amount) DESC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY SUM(d.charge_amount) DESC LIMIT 1;

SELECT p.professional_id, p.cell_number FROM professionals AS p INNER JOIN treatments AS t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;

SELECT p.professional_id, p.cell_number FROM professionals AS p INNER JOIN treatments AS t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;

SELECT DISTINCT T.first_name, T.last_name FROM treatments AS T JOIN charges AS C ON T.treatment_type_code = C.charge_type WHERE C.charge_amount < ALL(SELECT AVG(C.charge_amount) FROM charges);

SELECT p.first_name, p.last_name FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id INNER JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, d.name FROM owners AS o INNER JOIN dogs AS d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name FROM owners AS o INNER JOIN dogs AS d ON o.owner_id = d.owner_id;

SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (SELECT b.breed_code FROM breeds b WHERE b.breed_name = 'RAREST');

SELECT d.name, t.date_of_treatment FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = 'RAREST_BREED_CODE';

SELECT o.first_name, d.name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'VA';

SELECT o.first_name, d.name FROM owners AS o INNER JOIN dogs AS d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';

SELECT d.date_arrived, d.date_departed FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.abandoned_yn = 'N';

SELECT d.date_arrived, d.date_departed FROM dogs d INNER JOIN treatments t ON d.dog_id = t.dog_id WHERE d.abandoned_yn = 'N';

SELECT o.last_name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);

SELECT o.last_name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);

SELECT DISTINCT p.email_address FROM professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');

SELECT DISTINCT T2.email_address FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state IN ('Hawaii', 'Wisconsin');

SELECT d.date_arrived, d.date_departed FROM dogs d;

SELECT d.date_arrived, d.date_departed FROM dogs d;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT p.role_code, p.street, p.city, p.state FROM professionals AS p WHERE p.city LIKE '%West%';

SELECT p.role_code, p.street, p.city, p.state FROM professionals AS p WHERE p.city LIKE '%West%';

SELECT o.first_name, o.last_name, o.email_address FROM owners o WHERE o.state LIKE '%North%';

SELECT o.first_name, o.last_name, o.email_address FROM owners o WHERE o.state LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT MAX(cost_of_treatment) FROM treatments;

SELECT MAX(cost_of_treatment) FROM treatments;

SELECT COUNT(*) FROM dogs WHERE NOT EXISTS(SELECT * FROM treatments WHERE treatments.dog_id = dogs.dog_id);

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments );

SELECT COUNT(DISTINCT o.owner_id) FROM owners o WHERE o.abandoned_yn = 'N' AND o.dog_id IS NULL;

SELECT COUNT(DISTINCT o.owner_id) FROM owners o WHERE NOT EXISTS ( SELECT 1 FROM dogs d WHERE o.owner_id = d.owner_id );

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments);

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments);

SELECT T3.name, T3.age, T3.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatment_types AS T4 ON T1.dog_id = T4.dog_id WHERE T1.abandoned_yn = 'Y';

SELECT T3.name, T3.age, T3.weight FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatment_types AS T4 ON T1.dog_id = T4.dog_id WHERE T1.abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT t.charge_type, t.charge_amount FROM charges t;

SELECT charge_type, charge_amount FROM charges;

SELECT MAX(charges.charge_amount) FROM charges;

SELECT MAX(charge_amount) FROM charges;

SELECT o.email_address, p.cell_number, p.home_phone FROM owners AS o INNER JOIN professionals AS p ON o.owner_id = p.owner_id;

SELECT o.first_name, o.last_name, o.street, o.cell_number, o.home_phone FROM owners AS o INNER JOIN professionals AS p ON o.owner_id = p.owner_id;

SELECT DISTINCT b.breed_name, s.size_description FROM breeds AS b JOIN sizes AS s ON 1=1;

SELECT DISTINCT b.breed_name, s.size_description FROM dogs d JOIN breeds b ON d.breed_code = b.breed_code JOIN sizes s ON d.size_code = s.size_code;

SELECT p.first_name, t.description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id;

SELECT p.first_name, t.description FROM professionals p INNER JOIN treatments t ON p.professional_id = t.professional_id;

SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT s.birth_year, s.citizenship FROM singer s;

SELECT DISTINCT name FROM singer WHERE citizenship != 'France';

SELECT DISTINCT name FROM singer WHERE citizenship != 'French';

SELECT DISTINCT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT DISTINCT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT s.name FROM singer s WHERE s.net_worth_millions = (SELECT MAX(net_worth_millions) FROM singer);

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT s.citizenship, COUNT(DISTINCT s.singer_id) FROM singer s GROUP BY s.citizenship;

SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT s.citizenship, MAX(s.net_worth_millions) FROM singer s GROUP BY s.citizenship;

SELECT s.name AS singer_name, t.title FROM singer s JOIN song t ON s.singer_id = t.singer_id;

SELECT s.name AS singer_name, t.title FROM singer s JOIN song t ON s.singer_id = t.singer_id;

SELECT DISTINCT T.name FROM singer AS T INNER JOIN song AS S ON T.singer_id = S.singer_id WHERE S.sales > 300000;

SELECT DISTINCT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING SUM(sales) > 300000);

SELECT DISTINCT s.name FROM singer s JOIN song sj ON s.singer_id = sj.singer_id GROUP BY s.name HAVING COUNT(*) > 1;

SELECT DISTINCT s.name FROM singer s JOIN song sj ON s.singer_id = sj.singer_id GROUP BY s.name HAVING COUNT(*) > 1;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT s.name, SUM(t.sales) FROM singer s JOIN song t ON s.singer_id = t.singer_id GROUP BY s.name;

SELECT DISTINCT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT DISTINCT T2.name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.song_id IS NULL;

SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;

SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = 'AirCon';

SELECT DISTINCT T2.property_type_description FROM properties AS T1 INNER JOIN ref_property_types AS T2 ON T1.property_type_code = T2.property_type_code;

SELECT DISTINCT p.property_name FROM properties AS p WHERE p.room_count > 1 AND (p.property_type_code = 'H' OR p.property_type_code = 'A');

