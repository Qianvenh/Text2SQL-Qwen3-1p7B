SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT AVG(age) AS avg_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'France';

SELECT AVG(age) AS average_age, MIN(age) AS min_age, MAX(age) AS max_age FROM singer WHERE country = 'French';

SELECT s.name, s.song_release_year FROM singer s ORDER BY s.age DESC LIMIT 1;

SELECT s.name, sc.song_release_year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT country, COUNT(*) AS count FROM singer GROUP BY country;

SELECT country, COUNT(*) AS count FROM singer GROUP BY country;

SELECT s.song_name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id JOIN stadium st ON c.stadium_id = st.stadium_id WHERE s.age > (AVG(s.age) OVER ()) AND st.average > s.age;

SELECT song_name FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE age > (SELECT AVG(age) FROM singer);

SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(average) FROM stadium;

SELECT average, MAX(capacity) FROM stadium;

SELECT name, capacity FROM stadium WHERE average = (SELECT AVG(average) FROM stadium);

SELECT name, capacity FROM stadium WHERE average = (SELECT AVG(average) FROM stadium);

SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT s.name, COUNT(*) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.name;

SELECT stadium.location, COUNT(*) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.location;

SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.stadium_id, s.name, s.capacity ORDER BY COUNT(*) DESC;

SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT concert_id FROM concert WHERE year > 2013 GROUP BY concert_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert_id IS NULL;

SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL;

SELECT DISTINCT s.country FROM singer s WHERE s.age > 40 UNION SELECT DISTINCT s.country FROM singer s WHERE s.age < 30;

SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE concert.year = 2014 AND concert.stadium_id = stadium.stadium_id);

SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);

SELECT concert.concert_name, COUNT(DISTINCT singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name;

SELECT c.concert_name, c.theme, COUNT(DISTINCT s.singer_id) as num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id JOIN singer s ON sic.singer_id = s.singer_id GROUP BY c.concert_name, c.theme;

SELECT s.name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name, COUNT(DISTINCT sc.concert_id) AS num_concerts FROM singer s JOIN singer_in_concert sc ON s.singer_id = sc.singer_id GROUP BY s.name;

SELECT name FROM singer WHERE EXISTS (SELECT 1 FROM singer_in_concert WHERE singer_in_concert.concert_id IN (SELECT concert_id FROM concert WHERE year = 2014));

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE year = 2014));

SELECT s.name, c.country FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.song_name LIKE '%Hey%';

SELECT s.name, s.country FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id WHERE s.song_name LIKE '%Hey%';

SELECT name, location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014 UNION ALL SELECT stadium_id FROM concert WHERE year = 2015);

SELECT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year = 2014 AND c.year = 2015;

SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);

SELECT COUNT(*) FROM concert WHERE stadium_id IN (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT p.weight FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE s.age = (SELECT MIN(age) FROM student);

SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY age DESC LIMIT 1;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT COUNT(*) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(*) FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(DISTINCT sp.petid) FROM student s INNER JOIN has_pet sp ON s.stuid = sp.stuid WHERE s.sex = 'F' AND sp.pettype = 'dog';

SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid WHERE student.sex = 'F' AND pettype = 'dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype IN ('cat', 'dog'));

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype IN ('cat', 'dog'));

SELECT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = 'cat' AND T2.pettype = 'dog';

SELECT T1.fname FROM student T1 JOIN has_pet T2 ON T1.stuid = T2.stuid JOIN pets T3 ON T2.petid = T3.petid WHERE T3.pets = 'cat' AND T3.pets = 'dog';

SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE pettype != 'cat';

SELECT s.major, s.age FROM student s WHERE s.stuid NOT IN (SELECT hp.stuid FROM has_pet hp WHERE hp.petid = (SELECT p.petid FROM pets p WHERE p.pettype = 'cat'));

SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'Cat');

SELECT stuid FROM has_pet WHERE pettype = 'cat';

SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype = 'dog') AND stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat');

SELECT DISTINCT fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.pettype = 'dog' AND T2.pettype != 'cat';

SELECT pettype, weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid WHERE age = (SELECT MIN(age) FROM pets);

SELECT pettype, weight FROM pets JOIN has_pet ON student.stuid = has_pet.stuid WHERE age = (SELECT MIN(age) FROM students);

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;

SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);

SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid);

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT stuid, COUNT(*) AS num_pets FROM has_pet GROUP BY stuid HAVING COUNT(*) > 0;

SELECT stuid, COUNT(*) as num_pets FROM has_pet GROUP BY stuid;

SELECT T2.fname, T2.sex FROM Student AS T2 JOIN Has_pet AS T3 ON T2.stuid = T3.stuid WHERE T3.petid IN (SELECT petid FROM Pets GROUP BY petid HAVING COUNT(*) > 1);

SELECT T2.fname, T2.sex FROM student AS T2 JOIN has_pet AS T3 ON T2.stuid = T3.stuid GROUP BY T2.stuid HAVING COUNT(T3.petid) > 1;

SELECT T2.lname FROM student AS T2 JOIN has_pet AS T1 ON T2.stuid = T1.stuid WHERE T1.petid IN (SELECT petid FROM pets WHERE pettype = 'Cat' AND pet_age = 3);

SELECT T1.lname FROM student T1 JOIN has_pet T2 ON T1.stuid = T2.stuid WHERE T2.petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3);

SELECT AVG(student.age) FROM student WHERE student.stuid NOT IN (SELECT stuid FROM has_pet);

SELECT AVG(student.age) FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid WHERE has_pet.petid IS NULL;

SELECT COUNT(*) FROM continents;

SELECT COUNT(*) FROM continents;

SELECT continents.contid, continents.continent, COUNT(*) AS num_countries FROM countries INNER JOIN continents ON countries.continent = continents.contid GROUP BY continents.contid, continents.continent;

SELECT c.contid, c.continent, COUNT(c.countryid) AS num_countries FROM continents c GROUP BY c.contid, c.continent;

SELECT COUNT(*) FROM countries;

SELECT COUNT(*) FROM countries;

SELECT car_makers.fullname, car_makers.id, COUNT(*) AS count  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.fullname, car_makers.id;

SELECT car_makers.id, car_makers.fullname, COUNT(*) as num_models FROM car_makers GROUP BY car_makers.id, car_makers.fullname;

SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1;

SELECT model FROM cars_data WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);

SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT DISTINCT car_makers.fullname FROM car_makers INNER JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970;

SELECT DISTINCT maker FROM cars_data WHERE year = 1970;

SELECT c.maker, MIN(c.year) AS production_time FROM cars_data c GROUP BY c.maker;

SELECT c.fullname AS maker, c.year FROM cars_data c JOIN car_makers km ON c.id = km.id WHERE c.year = (SELECT MIN(year) FROM cars_data);

SELECT DISTINCT model FROM cars_data WHERE year > 1980;

SELECT model FROM cars_data WHERE year > 1980;

SELECT c.continent, COUNT(*) AS count FROM continents c JOIN countries co ON c.contid = co.continent GROUP BY c.continent;

SELECT c.continent, COUNT(*)  FROM continents c INNER JOIN countries co ON c.contid = co.continent INNER JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent;

SELECT countryname FROM countries WHERE countryid IN (SELECT maker FROM car_makers);

SELECT countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers);

SELECT T2.fullname, COUNT(*) as count FROM car_makers AS T2 INNER JOIN model_list AS T1 ON T2.id = T1.maker GROUP BY T2.fullname;

SELECT mk.id, mk.fullname, COUNT(ml.model) AS num_models FROM car_makers mk JOIN model_list ml ON mk.id = ml.maker GROUP BY mk.id, mk.fullname;

SELECT accelerate FROM cars_data WHERE maker = 'AMC' AND model = 'Hornet Sportabout (SW)';

SELECT accelerate FROM cars_data WHERE model = "AMC Hornet Sportabout";

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');

SELECT COUNT(*) FROM car_names WHERE country IN (SELECT countryid FROM countries WHERE continent IN (SELECT contid FROM continents));

SELECT COUNT(*) FROM cars_data WHERE country IN (SELECT countryid FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = 'United States'));

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT DISTINCT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;

SELECT DISTINCT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker;

SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NOT NULL;

SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.country IS NOT NULL;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT year, AVG(weight) FROM cars_data GROUP BY year;

SELECT year, AVG(weight) AS avg_weight, AVG(year) AS avg_year FROM cars_data GROUP BY year;

SELECT countries.countryname FROM countries WHERE countries.continent = (SELECT contid FROM continents WHERE continent = 'Europe') AND countries.countryid IN (SELECT countryid FROM car_makers WHERE country IN (SELECT countryid FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = 'Europe')) GROUP BY countryid HAVING COUNT(*) >= 3);

SELECT countryname FROM countries WHERE continent IN (SELECT contid FROM continents WHERE continent = 'EU') AND countryid IN (SELECT countryid FROM car_makers WHERE country IN (SELECT countryid FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = 'EU')) AND COUNT(maker) >= 3);

SELECT MAX(horsepower) AS max_horsepower, maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT MAX(horsepower) AS max_horsepower, maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1;

SELECT model FROM car_names WHERE id = (SELECT MIN(id) FROM car_names ORDER BY mpg DESC LIMIT 1);

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(edispl) FROM cars_data WHERE model = 'Volvo';

SELECT AVG(edispl) FROM cars_data WHERE model LIKE 'Volvo%';

SELECT MAX(accelerate) AS max_accelerate, cylinders FROM cars_data GROUP BY cylinders;

SELECT MAX(accelerate) FROM cars_data;

SELECT model FROM car_names GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM car_makers WHERE fullname = 'American Motor Company';

SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');

SELECT c.fullname, c.id FROM car_makers c JOIN model_list m ON c.id = m.maker WHERE c.id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3);

SELECT id, fullname FROM car_makers WHERE COUNT(modelid) > 3;

SELECT model FROM car_names WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') AND weight > 3500;

SELECT DISTINCT model FROM car_names WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') AND weight > 3500;

SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000;

SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000;

SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);

SELECT horsepower FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model = 'volvo');

SELECT COUNT(*) FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo') AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo'));

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT horsepower FROM cars_data ORDER BY horsepower DESC LIMIT 1);

SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT countryid FROM car_makers GROUP BY countryid HAVING COUNT(maker) > 2);

SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT DISTINCT countryid FROM car_makers GROUP BY countryid HAVING COUNT(maker) > 2);

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT model FROM cars_data WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT cd.makeid, cn.fullname FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid WHERE cd.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cd.cylinders <= 3;

SELECT id, fullname FROM car_makers WHERE NOT EXISTS (SELECT 1 FROM cars_data WHERE cars_data.horsepower <= 4 AND cars_data.id = car_makers.id);

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT model FROM cars_data WHERE weight < 3500 AND maker != (SELECT maker FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'Ford Motor Company'));

SELECT model FROM cars_data WHERE weight < 3500 AND maker != 'Ford';

SELECT countryname FROM countries WHERE countryid NOT IN (SELECT countryid FROM car_makers);

SELECT countries.countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.id IS NULL;

SELECT id, maker FROM car_makers WHERE COUNT(*) >= 2 AND COUNT(maker) > 3;

SELECT T2.id, T2.maker FROM car_makers AS T2 INNER JOIN model_list AS T3 ON T2.id = T3.maker GROUP BY T2.id HAVING COUNT(T3.model) >= 2 AND COUNT(T2.id) > 3;

SELECT c.id, c.countryname FROM countries c INNER JOIN car_makers m ON c.countryid = m.country WHERE m.count > 3 OR m.fullname = 'fiat';

SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON countries.countryid = car_makers.country WHERE car_makers.count > 3 OR cars_data.id = (SELECT id FROM car_names WHERE model = 'fiat');

SELECT country FROM airlines WHERE airline = 'JetBlue Airways';

SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights WHERE airline = 'Jetblue Airways');

SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways";

SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';

SELECT airline, abbreviation FROM airlines WHERE country = 'USA';

SELECT airline, abbreviation FROM airlines WHERE country = "USA";

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = "UAL";

SELECT * FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT airports.city, airports.country FROM airports WHERE airports.airportcode = 'alton';

SELECT airports.city, airports.country FROM airports WHERE airportname = 'Alton';

SELECT airportname FROM airports WHERE airportcode = 'ako';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE city = "Aberdeen";

SELECT airportname FROM airports WHERE city = "Aberdeen";

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE airline = 'ATO';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'aberdeen' AND destairport = 'ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ABD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT cities.city, COUNT(*) AS count FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN cities ON airports.city = cities.city GROUP BY cities.city ORDER BY count DESC LIMIT 1;

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1);

SELECT airportcode FROM airports ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM flights GROUP BY airportcode ORDER BY COUNT(*) ASC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;

SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC;

SELECT a.airline FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.airline ORDER BY COUNT(f.flightno) DESC LIMIT 1;

SELECT abbreviation, country FROM airlines ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.uid = f.airline ORDER BY COUNT(f.flightno) ASC LIMIT 1;

SELECT airline FROM flights WHERE sourceairport = "AHD";

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'AHD';

SELECT airline FROM flights WHERE destairport = "AHD";

SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';

SELECT DISTINCT T1.airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.sourceairport = T2.airportcode INNER JOIN airports AS T3 ON T1.destairport = T3.airportcode WHERE T2.country = 'United States' AND T3.country = 'United States';

SELECT airline FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE airportname LIKE '%APG%' AND country = 'Australia') AND destairport IN (SELECT airportcode FROM airports WHERE airportname LIKE '%CVO%' AND country = 'Australia');

SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO' AND destairport != 'APG';

SELECT airline FROM flights WHERE sourceairport = 'CVO' AND destairport != 'APG';

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10;

SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT flightno FROM flights WHERE airline = "United Airlines";

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE destairport = "APG";

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'Aberdeen ';

SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT flightno FROM flights WHERE destairport = 'aberdeen';

SELECT f.flightno FROM flights f INNER JOIN airports a ON f.destairport = a.airportcode WHERE a.city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene'));

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city IN ('Aberdeen', 'Abilene'));

SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION ALL SELECT destairport FROM flights);

SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age;

SELECT name FROM employee ORDER BY age;

SELECT city, COUNT(*) FROM employee GROUP BY city;

SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city;

SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT city FROM shop GROUP BY city HAVING COUNT(*) > (SELECT COUNT(*) FROM employee WHERE age < 30);

SELECT location, COUNT(*) FROM shop GROUP BY location;

SELECT location, COUNT(*) FROM shop GROUP BY location;

SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);

SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;

SELECT MIN(number_products), MAX(number_products) FROM shop;

SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;

SELECT s.name, s.location, s.district FROM shop s ORDER BY s.number_products DESC;

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop);

SELECT name FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM evaluation INNER JOIN employee ON evaluation.employee_id = employee.employee_id WHERE bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT name FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation);

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation WHERE bonus IS NOT NULL AND year_awarded IS NOT NULL AND bonus > 0);

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);

SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.shop_id ORDER BY COUNT(h.employee_id) DESC LIMIT 1;

SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);

SELECT s.name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE h.shop_id = s.shop_id);

SELECT s.name, COUNT(e.employee_id) AS num_employees FROM shop s JOIN hiring e ON s.shop_id = e.shop_id GROUP BY s.name;

SELECT s.name, COUNT(e.employee_id) AS num_employees FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id LEFT JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.name;

SELECT SUM(bonus) FROM evaluation;

SELECT SUM(bonus) as total_bonus FROM evaluation;

SELECT * FROM hiring;

SELECT s.shop_id, s.name, s.location, s.district, s.number_products, e.employee_id, e.name, e.age, e.city, h.start_from, h.is_full_time FROM shop s INNER JOIN hiring h ON s.shop_id = h.shop_id INNER JOIN employee e ON h.employee_id = e.employee_id;

SELECT district FROM shop GROUP BY district HAVING MIN(number_products) < 3000 AND MAX(number_products) > 10000;

SELECT DISTINCT shop.district FROM shop WHERE shop.number_products < 3000 AND shop.number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT DISTINCT location FROM shop;

SELECT COUNT(*) FROM documents;

SELECT COUNT(*) FROM documents;

SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT documents.document_id, templates.template_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE documents.document_description LIKE '%w%';

SELECT d.document_id, d.template_id FROM documents d INNER JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text LIKE '%w%' OR d.document_description LIKE '%w%';

SELECT documents.document_id, templates.template_id, templates.template_type_description FROM documents INNER JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Robbin CV";

SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT template_id) FROM documents;

SELECT COUNT(DISTINCT template_id) FROM documents;

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT template_id, COUNT(*) as num_documents FROM documents GROUP BY template_id;

SELECT template_id, COUNT(*) AS count FROM documents GROUP BY template_id;

SELECT t.template_id, rt.template_type_code FROM templates t JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code GROUP BY t.template_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id ORDER BY COUNT(documents.document_id) DESC LIMIT 1;

SELECT t.template_id FROM templates t GROUP BY t.template_id HAVING COUNT(DISTINCT t.template_id) > 1;

SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1;

SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);

SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents);

SELECT COUNT(*) FROM templates;

SELECT COUNT(*) FROM templates;

SELECT template_id, version_number, template_type_code FROM templates;

SELECT template_id, version_number, template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM templates;

SELECT template_type_code FROM ref_template_types;

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;

SELECT template_type_code, COUNT(*) AS count FROM templates GROUP BY template_type_code;

SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3;

SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*) < 3);

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT version_number, template_type_code FROM templates ORDER BY version_number ASC LIMIT 1;

SELECT template_type_code FROM templates WHERE document_name = "Data base";

SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'Data base');

SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK');

SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = "BK");

SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;

SELECT rt.template_type_code, COUNT(d.document_id) AS num_documents FROM ref_template_types rt LEFT JOIN documents d ON rt.template_type_code = d.template_id GROUP BY rt.template_type_code;

SELECT template_type_code FROM ref_template_types ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM documents);

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates);

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD";

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT t.template_type_description FROM templates t;

SELECT T2.template_details FROM templates AS T2 JOIN documents AS T1 ON T2.template_id = T1.template_id WHERE T1.document_name IS NOT NULL;

SELECT template_id FROM templates WHERE template_type_description = 'Presentation';

SELECT template_id FROM templates WHERE template_type_description = 'Presentation';

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT p.paragraph_text, d.document_name, d.document_description FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%';

SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');

SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY');

SELECT paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');

SELECT paragraph_text FROM paragraphs WHERE document_name = 'Customer reviews';

SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT document_id, COUNT(*) as num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;

SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;

SELECT document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id HAVING COUNT(paragraph_id) >= 2;

SELECT document_id, document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;

SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;

SELECT document_id FROM documents ORDER BY COUNT(paragraph_id) ASC LIMIT 1;

SELECT document_id FROM documents ORDER BY COUNT(paragraph_id) LIMIT 1;

SELECT document_id FROM paragraphs WHERE document_id IN (SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2);

SELECT document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_id IN (SELECT paragraph_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2);

SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');

SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(*) FROM teacher;

SELECT COUNT(*) AS total_teachers FROM teacher;

SELECT name FROM teacher ORDER BY age ASC;

SELECT name FROM teacher ORDER BY age;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);

SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);

SELECT hometown, COUNT(*) AS numTeachers FROM teacher GROUP BY hometown;

SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id;

SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id;

SELECT teacher.name, course_arrange.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id ORDER BY teacher.name;

SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name;

SELECT T2.name FROM course T1 JOIN course_arrange T2 ON T1.course_id = T2.course_id WHERE T1.course = 'math';

SELECT name FROM teacher WHERE EXISTS (SELECT 1 FROM course_arrange WHERE course_arrange.teacher_id = teacher.teacher_id AND course_arrange.grade = 'Math');

SELECT t.name, COUNT(c.teacher_id) as num_courses FROM teacher t JOIN course_arrange c ON t.teacher_id = c.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(ca.teacher_id) as num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id;

SELECT T.name FROM teacher T INNER JOIN course_arrange CA ON T.teacher_id = CA.teacher_id GROUP BY T.teacher_id HAVING COUNT(CA.course_id) >= 2;

SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id HAVING COUNT(ca.course_id) >= 2;

SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);

SELECT t.name FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id WHERE ca.teacher_id IS NULL;

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT name FROM visitor WHERE level_of_membership > '4' ORDER BY level_of_membership DESC;

SELECT AVG(visitor.age) FROM visitor WHERE level_of_membership <= '4';

SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC;

SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010);

SELECT v.id, v.name, v.age FROM visitor v JOIN visit ON v.id = visit.visitor_id GROUP BY v.id, v.name, v.age HAVING COUNT(DISTINCT museum_id) > 1;

SELECT v.id, v.name, v.level_of_membership  FROM visitor v JOIN visit w ON v.id = w.visitor_id GROUP BY v.id, v.name, v.level_of_membership ORDER BY SUM(w.total_spent) DESC LIMIT 1;

SELECT v.id, m.name FROM visit v JOIN museum m ON v.museum_id = m.museum_id GROUP BY v.museum_id ORDER BY COUNT(v.id) DESC LIMIT 1;

SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);

SELECT v.name, v.age FROM visitor v JOIN visit ON v.id = visit.visitor_id GROUP BY v.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(num_of_ticket) AS avg_tickets, MAX(num_of_ticket) AS max_tickets FROM visit;

SELECT SUM(total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = '1';

SELECT v.name FROM visitor v JOIN visit w ON v.id = w.visitor_id WHERE w.museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009) AND w.museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2011);

SELECT COUNT(*) FROM visitor WHERE visitor_id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010));

SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;

SELECT AVG(winner_age) AS avg_winner_age FROM matches WHERE winner_id IS NOT NULL UNION SELECT AVG(loser_age) AS avg_loser_age FROM matches WHERE loser_id IS NOT NULL;

SELECT AVG(winner_rank) FROM matches;

SELECT AVG(winner_rank) FROM matches;

SELECT MAX(ranking) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches);

SELECT MAX(winner_rank) FROM matches;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;

SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;

SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016;

SELECT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT player_id FROM players WHERE year = 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open';

SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.country_code IN (SELECT country_code FROM countries WHERE country_code = 'AUS') AND matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open';

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT CONCAT(first_name, ' ', last_name) AS full_name, birth_date FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT players.first_name, players.country_code FROM players WHERE player_id IN (     SELECT player_id     FROM rankings     GROUP BY player_id     ORDER BY COUNT(ranking_date) DESC     LIMIT 1 );

SELECT first_name, country_code FROM players ORDER BY COUNT(match_num) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT winner_name, winner_rank_points FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE COUNT(*) ORDER BY COUNT(*) DESC LIMIT 1);

SELECT winner_name, winner_rank_points FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE COUNT(*)=(SELECT COUNT(*) FROM matches WHERE winner_id=players.player_id));

SELECT winner_name FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE tours = 1);

SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT winner_name, loser_name FROM matches JOIN players ON winner_id = players.player_id JOIN players ON loser_id = players.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches);

SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);

SELECT p.first_name, AVG(r.ranking_points) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;

SELECT first_name, winner_rank FROM players JOIN rankings ON players.player_id = rankings.player_id;

SELECT p.first_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY p.first_name;

SELECT first_name, ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id;

SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC;

SELECT country_code, COUNT(*) AS NumPlayers FROM players GROUP BY country_code;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.code FROM country AS T1 INNER JOIN players AS T2 ON T1.code = T2.country_code GROUP BY T1.code HAVING COUNT(T2.player_id) > 50;

SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;

SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;

SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;

SELECT YEAR(tourney_date) AS year, COUNT(*) AS num_matches FROM matches GROUP BY YEAR(tourney_date);

SELECT p.first_name || ' ' || p.last_name AS name, r.winner_rank AS rank FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date <= (SELECT MIN(ranking_date) + INTERVAL '1 YEAR' FROM rankings) ORDER BY r.ranking_date DESC LIMIT 3;

SELECT p.first_name || ' ' || p.last_name AS name, r.winner_rank AS rank FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_date DESC LIMIT 3;

SELECT COUNT(DISTINCT winner_name) FROM matches JOIN players ON winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';

SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';

SELECT first_name, country_code, birth_date  FROM players  WHERE player_id IN (     SELECT winner_id      FROM matches      JOIN rankings ON matches.winner_id = rankings.player_id      ORDER BY rankings.ranking_points DESC      LIMIT 1 );

SELECT first_name, country_code, birth_date  FROM players  WHERE player_id IN (     SELECT winner_id      FROM matches      GROUP BY winner_id      ORDER BY SUM(winner_rank_points) DESC      LIMIT 1 );

SELECT hand, COUNT(*) as NumPlayers FROM players GROUP BY hand

SELECT hand, COUNT(*) as NumPlayers FROM players GROUP BY hand

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name DESC;

SELECT name, date, result FROM battle;

SELECT MAX(killed), MIN(killed) FROM death;

SELECT AVG(injured) AS avg_injuries FROM death;

SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');

SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';

SELECT id, name FROM battle WHERE ship_type = 'Brig';

SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.lost_in_battle WHERE d.killed > 10;

SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225);

SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta';

SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');

SELECT note FROM death WHERE note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(*) FROM courses;

SELECT COUNT(*) FROM courses;

SELECT course_description FROM courses WHERE course_name = 'math';

SELECT course_description FROM courses WHERE course_name LIKE '%math%';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT d.department_id, d.department_name FROM departments d JOIN degree_programs dp ON d.department_id = dp.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;

SELECT department_id, department_name FROM departments ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM departments;

SELECT COUNT(*) FROM departments;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT COUNT(*) FROM degree_programs WHERE department_id IN (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT section_name, section_description FROM sections;

SELECT section_name, section_description FROM sections;

SELECT c.course_name, c.course_id FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(sce.student_course_id) <= 2;

SELECT c.course_name, c.course_id FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id JOIN sections s ON sce.course_id = s.course_id WHERE s.section_id < (SELECT MIN(section_id) FROM sections);

SELECT section_name FROM sections ORDER BY reverse(section_name);

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.semester_id, s.semester_name FROM semesters s JOIN student_enrolment_courses sce ON s.semester_id = sce.student_enrolment_id GROUP BY s.semester_id ORDER BY COUNT(sce.course_id) DESC LIMIT 1;

SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s INNER JOIN student_enrolment_courses sce ON s.student_id = sce.student_enrolment_id INNER JOIN student_enrolment se ON sce.student_enrolment_id = se.student_enrolment_id INNER JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_program_id IN (     SELECT degree_program_id     FROM student_enrolment     GROUP BY degree_program_id     HAVING COUNT(*) = 2 );

SELECT s.first_name, s.middle_name, s.last_name, s.student_id  FROM students s JOIN student_enrolment_courses sec ON s.student_id = sec.student_enrolment_id JOIN student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE se.semester_id = (SELECT semester_id FROM semesters WHERE semester_name = 'Fall') AND COUNT(dp.degree_program_id) = 2;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';

SELECT S.first_name, S.middle_name, S.last_name  FROM students S JOIN student_enrolment_courses SEC ON S.student_id = SEC.student_id JOIN student_enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id JOIN degree_programs D ON SEC.degree_program_id = D.degree_program_id WHERE D.degree_summary_name = 'Bachelors';

SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT degree_program_id, degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.department_id = student_enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT dp.degree_program_id, dp.degree_summary_name  FROM degree_programs dp  JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id  GROUP BY dp.degree_program_id  ORDER BY COUNT(se.student_id) DESC LIMIT 1;

SELECT student_id, first_name, middle_name, last_name, COUNT(*) AS enrollments FROM student_enrolment_courses GROUP BY student_id ORDER BY enrollments DESC;

SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS enrollments FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id ORDER BY enrollments DESC LIMIT 1;

SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);

SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);

SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment WHERE student_id IN (SELECT student_id FROM students)));

SELECT course_name FROM courses WHERE EXISTS (SELECT 1 FROM student_enrolment_courses sc JOIN student_enrolment se ON sc.student_enrolment_id = se.student_enrolment_id WHERE sc.course_id = courses.course_id);

SELECT c.course_name FROM student_enrolment_courses sc JOIN courses c ON sc.course_id = c.course_id GROUP BY c.course_id ORDER BY COUNT(sc.student_enrolment_id) DESC LIMIT 1;

SELECT c.course_name FROM courses c JOIN student_enrolment_courses sce ON c.course_id = sce.course_id GROUP BY c.course_id ORDER BY COUNT(sce.student_enrolment_id) DESC LIMIT 1;

SELECT T2.last_name FROM students AS T2 JOIN addresses AS T1 ON T2.current_address_id = T1.address_id WHERE T1.state_province_county = 'North Carolina' AND T2.student_id IN (SELECT student_id FROM student_enrolment_courses WHERE student_enrolment_id IN (SELECT student_enrolment_id FROM student_enrolment WHERE degree_program_id IS NOT NULL));

SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND date_first_registered IS NULL;

SELECT transcript_id, student_course_id FROM transcript_contents JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id WHERE student_enrolment_courses.course_id IN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) >= 2);

SELECT transcript_id, transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_id HAVING COUNT(*) >= 2;

SELECT student_enrolment.student_enrolment_id, students.cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT cell_mobile_number FROM students WHERE last_name = 'Ward' AND first_name = 'Timmothy';

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 ORDER BY T1.date_first_registered ASC;

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;

SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 JOIN student_enrolment_courses AS T2 ON T1.student_id = T2.student_id JOIN student_enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN semesters AS T4 ON T3.semester_id = T4.semester_id JOIN courses AS T5 ON T2.course_id = T5.course_id JOIN degree_programs AS T6 ON T2.degree_program_id = T6.degree_program_id WHERE T4.semester_name = 'Fall' AND T6.degree_summary_name = 'Graduate';

SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1;

SELECT T2.first_name FROM students T2 JOIN addresses T1 ON T2.current_address_id = T1.address_id WHERE T2.permanent_address_id != T1.address_id;

SELECT students.first_name FROM students WHERE students.current_address_id != students.permanent_address_id;

SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details  FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC;

SELECT address_id, line_1, line_2 FROM addresses WHERE address_id IN (SELECT current_address_id FROM students WHERE COUNT(*) = (SELECT MAX(COUNT(*)) FROM students));

SELECT CAST(AVERAGE(transcript_date) AS DATE) FROM transcripts;

SELECT AVG(transcript_date) FROM transcripts;

SELECT transcript_date, other_details FROM transcripts;

SELECT MIN(transcript_date), other_details FROM transcripts GROUP BY transcript_id;

SELECT COUNT(*) FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT sc.student_enrolment_id, COUNT(*) as max_transcripts FROM student_enrolment_courses sc JOIN transcript_contents tc ON sc.student_course_id = tc.student_course_id GROUP BY sc.student_enrolment_id ORDER BY max_transcripts DESC;

SELECT course_id, COUNT(*) AS count FROM student_enrolment_courses GROUP BY course_id ORDER BY count DESC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT DISTINCT s.semester_name FROM student_enrolment s JOIN student_enrolment_courses sec ON s.student_enrolment_id = sec.student_enrolment_id JOIN courses c ON sec.course_id = c.course_id WHERE s.degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name IN ('Master', 'Bachelor'));

SELECT semester_id FROM semesters WHERE semester_name LIKE '%Masters%' OR semester_name LIKE '%Bachelors%';

SELECT COUNT(DISTINCT current_address_id) FROM students;

SELECT DISTINCT address_id FROM addresses;

SELECT * FROM students ORDER BY last_name DESC, first_name DESC;

SELECT other_student_details FROM students ORDER BY last_name DESC;

SELECT section_name FROM sections WHERE section_id = "h";

SELECT section_description FROM sections WHERE section_name = 'h';

SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';

SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT title FROM cartoon WHERE directed_by = "Ben Jones";

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";

SELECT title FROM cartoon ORDER BY original_air_date;

SELECT t.series_name, c.directed_by FROM tv_series t JOIN cartoon c ON t.channel = c.channel ORDER BY original_air_date;

SELECT title FROM cartoon WHERE directed_by IN ("Ben Jones", "Brandon Vietti");

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC;

SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC;

SELECT COUNT(DISTINCT content) AS distinct_content, COUNT(DISTINCT series_name) AS distinct_series FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = "Sky Radio";

SELECT content FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');

SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";

SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";

SELECT COUNT(*) FROM tv_channel WHERE language = 'english';

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC LIMIT 1;

SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language;

SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!');

SELECT series_name FROM tv_channel WHERE channel IN (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle');

SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");

SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");

SELECT episode FROM tv_series ORDER BY rating DESC;

SELECT episode, rating FROM tv_series ORDER BY rating DESC;

SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;

SELECT T1.episode, T1.rating FROM tv_series AS T1 ORDER BY T1.rating DESC LIMIT 3;

SELECT MIN(share), MAX(share) FROM tv_series;

SELECT MAX(share), MIN(share) FROM tv_series;

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime";

SELECT weekly_rank FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT series_name FROM tv_series WHERE episode = "A Love of a Lifetime" AND channel = (SELECT id FROM tv_channel);

SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = "A Love of a Lifetime");

SELECT episode FROM tv_series WHERE series_name = "Sky Radio" AND channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio");

SELECT episode FROM tv_series WHERE series_name = "Sky Radio";

SELECT T2.directed_by, COUNT(*) as count FROM cartoon AS T2 GROUP BY T2.directed_by;

SELECT directed_by, COUNT(*) FROM cartoon GROUP BY directed_by;

SELECT production_code, channel FROM cartoon ORDER BY air_date DESC LIMIT 1;

SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1;

SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = TRUE;

SELECT package_option, series_name FROM tv_channel INNER JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = TRUE;

SELECT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = "Todd Casey");

SELECT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey');

SELECT series_name, country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by IN ('Ben Jones', 'Michael Chang'));

SELECT series_name, country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by IN ('Ben Jones', 'Michael Chang'));

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';

SELECT id FROM tv_channel WHERE country IN (SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*) > 2);

SELECT id FROM tv_channel WHERE COUNT(*) > 2;

SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT 1 FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT package_option FROM tv_channel WHERE NOT EXISTS (SELECT 1 FROM cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.directed_by = 'Ben Jones');

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT final_table_made, best_finish FROM poker_player;

SELECT final_table_made, best_finish FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player);

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT name FROM poker_player;

SELECT name FROM people WHERE people_id IN (SELECT poker_player.people_id FROM poker_player);

SELECT name FROM poker_player WHERE earnings > 300000;

SELECT name FROM poker_player WHERE earnings > 300000;

SELECT p.name FROM poker_player p ORDER BY p.final_table_made ASC;

SELECT name FROM poker_player ORDER BY final_table_made ASC;

SELECT birth_date FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT p.birth_date FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE p.earnings = (SELECT MIN(earnings) FROM poker_player);

SELECT money_rank FROM poker_player WHERE height = (SELECT MAX(height) FROM people);

SELECT money_rank FROM poker_player WHERE height = (SELECT height FROM people ORDER BY height DESC LIMIT 1);

SELECT AVG(earnings) FROM poker_player WHERE height > "200";

SELECT AVG(earnings) FROM poker_player WHERE height > 200 AND EXISTS (SELECT 1 FROM people WHERE people.people_id = poker_player.people_id);

SELECT name FROM poker_player ORDER BY earnings DESC;

SELECT name FROM poker_player ORDER BY earnings DESC;

SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;

SELECT nationality, COUNT(*) as Count FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM area_code_state;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT vote_id, phone_number, state FROM votes;

SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;

SELECT MAX(created) FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT state, created FROM votes;

SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name HAVING COUNT(vote_id) >= 2;

SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM votes WHERE vote_id IS NULL;

SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1);

SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling');

SELECT DISTINCT vc.area_code FROM votes vc JOIN contestants c ON vc.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling' AND vc.state IN (SELECT area_code FROM area_code_state WHERE state = 'California')  AND c.contestant_name = 'Kelly Clauss';

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT name FROM country WHERE indepyear > 1950;

SELECT name FROM country WHERE indepyear > '1950';

SELECT COUNT(*) FROM country WHERE governmentform = 'republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';

SELECT continent FROM country WHERE code = (SELECT code FROM city WHERE name = 'Anguilla');

SELECT name FROM country WHERE code = 'AN';

SELECT region FROM city WHERE name = "kabul";

SELECT region FROM country WHERE code = "afg";

SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1;

SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' AND T2.isofficial = 'T';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT region, population FROM country WHERE code = 'ANG';

SELECT region, population FROM country WHERE code = 'ANG';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT lifeexpectancy FROM country WHERE continent = 'Africa' AND region = 'Central Africa';

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;

SELECT name FROM country WHERE region = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;

SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM country WHERE region = 'Asia';

SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM country WHERE continent = 'Asia';

SELECT lifeexpectancy FROM country WHERE continent = 'Africa' AND governmentform = 'Republic' GROUP BY countrycode;

SELECT AVG(countrylifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';

SELECT SUM(surfacearea) AS total_surfacearea FROM country WHERE continent = 'Asia' OR continent = 'Europe';

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT population FROM city WHERE district = 'Gelderland';

SELECT population FROM city WHERE district = 'Gelderland';

SELECT AVG(gnp) AS avg_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US territory';

SELECT AVG(gnp) AS MeanGNP, SUM(population) AS TotalPopulation FROM country WHERE code IN (SELECT code FROM city WHERE countrycode IN (SELECT code FROM country WHERE region = 'US'));

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage;

SELECT DISTINCT governmentform FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba');

SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Afghanistan') AND isofficial = 'T';

SELECT COUNT(DISTINCT T2.language) FROM countrylanguage AS T2 INNER JOIN country AS T1 ON T2.countrycode = T1.code WHERE T1.name = 'Afghanistan' AND T2.isofficial = 'T';

SELECT name FROM country WHERE COUNT(*) = (SELECT MAX(percentage) FROM countrylanguage);

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1;

SELECT continent FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(language) DESC LIMIT 1);

SELECT c.continent, COUNT(DISTINCT cl.language) as num_languages FROM country cl JOIN country c ON cl.code = cl.countrycode GROUP BY c.continent ORDER BY num_languages DESC LIMIT 1;

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE language = 'English' AND language = 'Dutch');

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE localname = 'English' OR localname = 'Dutch');

SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = TRUE AND language = 'English' OR language = 'French');

SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French';

SELECT T2.name FROM country AS T2 INNER JOIN countrylanguage AS T1 ON T2.code = T1.countrycode WHERE T1.language = 'English' AND T1.isofficial = TRUE AND T2.code2 = 'FR';

SELECT T1.name FROM country T1 INNER JOIN countrylanguage T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' OR T2.language = 'French';

SELECT COUNT(DISTINCT c.continent) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Chinese';

SELECT COUNT(*) FROM country WHERE language LIKE '%Chinese%';

SELECT T2.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('English', 'Dutch');

SELECT T2.region FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language IN ('Dutch', 'English');

SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.isofficial = 'T' OR T2.language = 'English' OR T2.language = 'Dutch';

SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.isofficial = TRUE AND T2.language IN ('English', 'Dutch');

SELECT language FROM countrylanguage WHERE continent = 'Asia' ORDER BY percentage DESC LIMIT 1;

SELECT language FROM countrylanguage WHERE continent = 'Asia' ORDER BY percentage DESC LIMIT 1;

SELECT name FROM Language WHERE native_speakers = (SELECT COUNT(*) FROM countrylanguage WHERE countrycode = countrycode AND isofficial = TRUE);

SELECT T2.language FROM countrylanguage AS T2 INNER JOIN country AS T1 ON T2.countrycode = T1.code WHERE T1.governmentform = 'republic' AND T2.percentage = 1 AND T2.isofficial = 'T';

SELECT c.name FROM city c JOIN countrylanguage cl ON c.countrycode = cl.countrycode WHERE cl.language = 'English' ORDER BY c.population DESC LIMIT 1;

SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE localname LIKE '%English%') ORDER BY population DESC LIMIT 1;

SELECT T1.name, T1.population, T1.lifeexpectancy  FROM country AS T1  INNER JOIN encompasses AS T2 ON T1.code = T2.country  WHERE T2.continent = 'Asia'  ORDER BY T1.surfacearea DESC  LIMIT 1;

SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY population DESC LIMIT 1;

SELECT AVG(lifeexpectancy) FROM country WHERE code2 NOT IN (SELECT code2 FROM countrylanguage WHERE isofficial = TRUE);

SELECT AVG(T2.lifeexpectancy) FROM countrylanguage AS T2 INNER JOIN country AS T1 ON T2.countrycode = T1.code WHERE T2.isofficial = 'F';

SELECT SUM(population) FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English';

SELECT COUNT(*) FROM city WHERE countrycode IN (SELECT code FROM country WHERE countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = TRUE AND language = 'English'));

SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE headofstate = 'Beatrix');

SELECT language FROM countrylanguage WHERE countrycode IN (SELECT countrycode FROM country WHERE headofstate = 'Beatrix');

SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930);

SELECT SUM(CASE WHEN T2.IsOfficial = 'T' THEN 1 ELSE 0 END) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < '1930';

SELECT code FROM country WHERE surfacearea > (SELECT surfacearea FROM country WHERE continent = 'Europe');

SELECT code FROM country WHERE surfacearea > ALL(SELECT surfacearea FROM country WHERE continent = 'Europe');

SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');

SELECT c.name FROM country c WHERE c.continent = 'Africa' AND c.population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');

SELECT T2.name FROM country AS T2 INNER JOIN city AS T1 ON T2.code = T1.countrycode WHERE T2.region LIKE '%Asia%' AND T1.population > (SELECT MIN(population) FROM country WHERE continent = 'Africa');

SELECT T2.name FROM country AS T2 INNER JOIN city AS T1 ON T2.code = T1.countrycode WHERE T2.region LIKE '%Asia%' AND T1.population > ALL(SELECT T1.population FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.region LIKE '%Africa%');

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English');

SELECT T1.code FROM country T1 LEFT JOIN countrylanguage T2 ON T1.code = T2.countrycode WHERE T2.language != 'English';

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language != 'English');

SELECT code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language != 'English');

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND language = 'English') AND governmentform != 'Republic';

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrycode = country.code AND isofficial = TRUE AND language = 'English') AND governmentform != 'Republic';

SELECT city.name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.region = 'European' AND country.language LIKE '%English%' AND country.isofficial = FALSE;

SELECT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Europe') AND countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE isofficial = TRUE);

SELECT DISTINCT name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'Asia' AND countrylocalname = 'China' AND countrylanguage.isofficial = TRUE;

SELECT name FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.region = 'Asia' AND countrylanguage.language = 'Chinese';

SELECT name, indepyear, surfacearea FROM country ORDER BY population ASC LIMIT 1;

SELECT T1.name, T1.indepyear, T1.surfacearea FROM country AS T1 WHERE T1.population = (SELECT MIN(population) FROM country);

SELECT T1.population, T1.name, T1.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, T1.population, T1.headofstate FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode INNER JOIN city AS T3 ON T1.code = T3.countrycode WHERE T2.isofficial = 'T' ORDER BY T1.surfacearea DESC LIMIT 1;

SELECT T1.name, COUNT(T2.language) AS num_languages FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.code HAVING COUNT(T2.language) >= 3;

SELECT c.name, COUNT(DISTINCT cl.language) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code HAVING COUNT(DISTINCT cl.language) > 2;

SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;

SELECT district, COUNT(*) AS count FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city);

SELECT T2.governmentform, T1.population FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.averageLifeExpectancy > 72;

SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;

SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country WHERE lifeexpectancy < 72 GROUP BY continent;

SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country WHERE continent IS NOT NULL GROUP BY continent HAVING AVG(lifeexpectancy) < 72;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT T1.name FROM country AS T1 ORDER BY T1.population DESC LIMIT 3;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country WHERE population IN (SELECT population FROM city GROUP BY countrycode ORDER BY population DESC LIMIT 3);

SELECT name FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_surfacearea FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;

SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;

SELECT language FROM countrylanguage GROUP BY language ORDER BY SUM(percentage) DESC LIMIT 1;

SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.language, T1.percentage FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.countrycode ORDER BY T1.percentage DESC;

SELECT c.code, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode ORDER BY cl.percentage DESC;

SELECT COUNT(*) FROM countrylanguage WHERE percentage > ALL(SELECT percentage FROM countrylanguage GROUP BY countrycode);

SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE isofficial = TRUE AND language = 'Spanish';

SELECT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode ORDER BY cl.percentage DESC LIMIT 1;

SELECT code FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE countrylanguage.language = 'Spanish') AND isofficial = TRUE;

SELECT COUNT(*) FROM conductor;

SELECT COUNT(*) FROM conductor;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality != "USA";

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share) FROM performance WHERE type != 'Live final' AND type != ''; SELECT MIN(share) FROM performance WHERE type != 'Live final' AND type != '';

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY YEAROFWORK DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(year_of_work) DESC LIMIT 1;

SELECT c.name, o.orchestra FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;

SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT name FROM conductor GROUP BY name HAVING COUNT(*) > 1;

SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(DISTINCT orchestra_id) > 1);

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM conductor WHERE year_of_work > 2008;

SELECT name FROM conductor WHERE EXISTS (SELECT 1 FROM orchestra WHERE orchestra.year_of_founded > 2008 AND conductor_id = conductor.conductor_id);

SELECT record_company, COUNT(*) as count FROM orchestra GROUP BY record_company;

SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE record_company = 'unknown';

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;

SELECT major_record_format FROM orchestra ORDER BY orchestra_id;

SELECT record_company, COUNT(*) as count FROM orchestra GROUP BY record_company ORDER BY count DESC;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT o.orchestra FROM orchestra o WHERE o.conductor_id NOT IN (SELECT p.orchestra_id FROM performance p);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 AND YEAR_OF_FOUNDED > 2003;

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1;

SELECT year_of_founded FROM orchestra WHERE EXISTS (SELECT 1 FROM performance WHERE orchestra_id = orchestra.orchestra_id);

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT name, grade FROM highschooler;

SELECT name, grade FROM highschooler;

SELECT grade FROM highschooler;

SELECT grade FROM highschooler;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);

SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT h.id, COUNT(f.student_id) as num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.id;

SELECT f.student_id, COUNT(DISTINCT f.friend_id) AS num_friends FROM friend f GROUP BY f.student_id;

SELECT h.name, COUNT(f.student_id) AS num_friends FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name, COUNT(*) as num_friends FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY name HAVING COUNT(friend.id) >= 3;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE student_id = highschooler.id);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE friend_id = (SELECT student_id FROM highschooler WHERE name = 'Kyle'));

SELECT T2.name FROM highschooler AS T2 JOIN friend AS T1 ON T2.id = T1.student_id WHERE T1.friend_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT h.id FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.liked_id WHERE f.friend_id IS NOT NULL AND l.student_id IS NOT NULL;

SELECT DISTINCT f.student_id FROM friend f JOIN highschooler h ON f.student_id = h.id WHERE f.friend_id IN (SELECT id FROM highschooler) AND h.id IN (SELECT liked_id FROM likes);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT liked_id FROM likes) AND id IN (SELECT student_id FROM friend UNION SELECT liked_id FROM likes);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend UNION SELECT student_id FROM likes);

SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id;

SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;

SELECT f.name, COUNT(*) as like_count FROM friends f JOIN likes l ON f.student_id = l.student_id GROUP BY f.name;

SELECT name, COUNT(*) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(*) >= 2;

SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE id IN (SELECT liked_id FROM likes WHERE student_id IN (SELECT id FROM highschooler))));

SELECT name FROM highschooler WHERE grade > 5 AND COUNT(friend_id) >= 2;

SELECT name FROM highschooler WHERE grade > 5 AND COUNT(friend_id) >= 2;

SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT AVG(h.grade) FROM highschooler h JOIN friend f ON h.id = f.student_id WHERE f.friend_id IS NOT NULL;

SELECT AVG(hs.grade) FROM highschooler hs JOIN friend f ON hs.id = f.student_id;

SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = T2.state;

SELECT DISTINCT o.state FROM owners o UNION SELECT DISTINCT p.state FROM professionals p;

SELECT AVG(dog.age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT AVG(dog_age) AS avg_dog_age FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR professionals.id IN (SELECT treatments.professional_id FROM treatments WHERE treatments.count > 2);

SELECT p.professional_id, p.last_name, p.cell_number FROM professionals p JOIN dogs d ON p.professional_id = d.professional_id WHERE p.state = 'Indiana' OR COUNT(d.dog_id) > 2;

SELECT name FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000);

SELECT name FROM dogs WHERE SUM(charges.charge_amount) <= 1000;

SELECT first_name FROM owners UNION SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs);

SELECT owners.first_name FROM owners WHERE owners.first_name NOT IN (SELECT dogs.name FROM dogs) UNION SELECT professionals.first_name FROM professionals WHERE professionals.first_name NOT IN (SELECT dogs.name FROM dogs);

SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL;

SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  ORDER BY COUNT(*) DESC  LIMIT 1;

SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) >= 2;

SELECT t.dog_id, p.role_code, p.first_name FROM treatments t INNER JOIN professionals p ON t.professional_id = p.professional_id GROUP BY t.dog_id, p.role_code, p.first_name HAVING COUNT(*) >= 2;

SELECT breed_name FROM breeds ORDER BY COUNT(*) DESC LIMIT 1;

SELECT breed_name FROM breeds ORDER BY COUNT(*) DESC LIMIT 1;

SELECT T1.owner_id, T1.last_name FROM owners AS T1 INNER JOIN (SELECT dog_id, owner_id, COUNT(*) AS num_treatments FROM treatments GROUP BY dog_id, owner_id ORDER BY num_treatments DESC) AS T2 ON T1.owner_id = T2.owner_id ORDER BY num_treatments DESC;

SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;

SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);

SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code = (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1);

SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1;

SELECT o.owner_id, o.zip_code, SUM(charges.charge_amount) AS total_spent FROM owners o JOIN charges ON o.owner_id = charges.owner_id GROUP BY o.owner_id, o.zip_code ORDER BY total_spent DESC LIMIT 1;

SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_id) >= 2;

SELECT professionals.professional_id, professionals.cell_number FROM professionals WHERE professionals.professional_id IN (     SELECT treatment_professional_id     FROM treatments     GROUP BY treatment_professional_id     HAVING COUNT(*) >= 2 );

SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments AS t INNER JOIN professionals AS p ON t.professional_id = p.professional_id;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT t.cost_of_treatment, tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id JOIN sizes AS s ON d.size_code = s.size_code;

SELECT o.first_name, o.last_name, s.size_description FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, d.name FROM owners AS o JOIN dogs AS d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code IN (SELECT breed_code FROM breeds WHERE breed_name = 'Rarest');

SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = 'rarest';

SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';

SELECT o.first_name, d.name FROM owners o INNER JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';

SELECT dates.arriving_date, dates.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN sizes ON dogs.size_code = sizes.size_code JOIN breeds ON dogs.breed_code = breeds.breed_code;

SELECT dates.arriving_date, dates.departing_date FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT last_name FROM owners WHERE owner_id IN (SELECT owner_id FROM dogs WHERE age = (SELECT MIN(age) FROM dogs));

SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);

SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';

SELECT email_address FROM professionals WHERE state = "Hawaii" OR state = "Wisconsin";

SELECT date_arrived, date_departed FROM dogs;

SELECT date_arrived, date_departed FROM dogs;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(DISTINCT professional_id) FROM treatments;

SELECT p.role_code, p.street, p.city, p.state FROM professionals AS p WHERE p.city LIKE '%West%';

SELECT p.role_code, p.street, p.city, p.state FROM professionals AS p INNER JOIN owners AS o ON p.owner_id = o.owner_id WHERE o.city LIKE '%West%';

SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';

SELECT owners.first_name, owners.last_name, owners.email_address FROM owners INNER JOIN states ON owners.state = states.state_name WHERE states.state_name LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;

SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;

SELECT COUNT(*) FROM dogs WHERE date_arrived > date_departed;

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);

SELECT COUNT(DISTINCT owner_id) FROM owners WHERE owner_id NOT IN (SELECT dog_id FROM dogs);

SELECT COUNT(DISTINCT owner_id) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);

SELECT COUNT(DISTINCT professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT COUNT(*) FROM professionals WHERE NOT EXISTS (SELECT 1 FROM treatments WHERE treatments.professional_id = professionals.professional_id);

SELECT name, age, weight FROM dogs WHERE abandoned_yn = '1';

SELECT name, age, weight FROM dogs WHERE abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT age FROM dogs ORDER BY age DESC LIMIT 1;

SELECT age FROM dogs ORDER BY age DESC LIMIT 1;

SELECT charge_type, charge_amount FROM charges;

SELECT charge_type, charge_amount FROM charges;

SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;

SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;

SELECT p.email_address, p.cell_number, p.home_phone FROM professionals p;

SELECT p.email_address, p.home_phone, p.cell_number FROM professionals p;

SELECT breed_name, size_description FROM breeds JOIN sizes ON breeds.breed_code = sizes.size_code;

SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;

SELECT p.first_name, t.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id;

SELECT T3.first_name, T4.treatment_type_description FROM professionals AS T3 INNER JOIN treatments AS T4 ON T3.professional_id = T4.professional_id INNER JOIN treatment_types AS T4 ON T4.treatment_type_code = T4.treatment_type_code;

SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT birth_year, citizenship FROM singer;

SELECT birth_year, citizenship FROM singer;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'French';

SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;

SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;

SELECT s.title, s.name FROM song s;

SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;

SELECT DISTINCT name FROM singer WHERE EXISTS (SELECT 1 FROM song WHERE singer_id = singer.singer_id AND sales > 300000);

SELECT name FROM singer WHERE sales > 300000;

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT s.name, SUM(song.sales) AS total_sales FROM singer s JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;

SELECT name, SUM(sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name;

SELECT name FROM singer EXCEPT SELECT name FROM song;

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;

SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon');

SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code;

SELECT property_name FROM properties WHERE property_type_code IN ('house', 'apartment') AND room_count > 1;

