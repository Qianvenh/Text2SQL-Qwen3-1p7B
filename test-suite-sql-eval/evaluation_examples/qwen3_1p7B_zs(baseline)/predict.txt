SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name, country, age FROM singer ORDER BY age DESC;

SELECT s.name, s.country, s.age FROM singer s ORDER BY s.age DESC;

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';

SELECT s.name, c.song_release_year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT s.name, c.song_release_year FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age = (SELECT MIN(age) FROM singer);

SELECT DISTINCT country FROM singer WHERE age > 20;

SELECT DISTINCT s.country FROM singer s WHERE s.age > 20;

SELECT country, COUNT(*) AS count FROM singer GROUP BY country;

SELECT country, COUNT(*) AS count FROM singer GROUP BY country;

SELECT s.song_name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE s.age > (SELECT AVG(age) FROM singer);

SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

SELECT MAX(capacity), AVG(capacity) FROM stadium;

SELECT average, highest FROM stadium;

SELECT name, capacity FROM stadium WHERE highest = (SELECT AVG(average) FROM stadium);

SELECT name, capacity FROM stadium WHERE highest = (SELECT AVG(average) FROM stadium);

SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015);

SELECT COUNT(*) FROM concert WHERE year BETWEEN 2014 AND 2015;

SELECT s.name, COUNT(*) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id, s.name;

SELECT s.stadium_id, COUNT(*) AS num_concerts FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id;

SELECT s.name, s.capacity FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year >= 2014 GROUP BY s.stadium_id, s.name, s.capacity ORDER BY COUNT(*) DESC LIMIT 1;

SELECT s.name, s.capacity FROM stadium s WHERE s.stadium_id IN (     SELECT c.stadium_id     FROM concert c     WHERE c.year > 2013     GROUP BY c.stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM stadium WHERE NOT EXISTS (SELECT 1 FROM concert WHERE concert.stadium_id = stadium.stadium_id);

SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT concert_id FROM concert);

SELECT DISTINCT s.country  FROM singer s  WHERE s.age > 40  INTERSECT  SELECT DISTINCT s.country  FROM singer s  WHERE s.age < 30;

SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (     SELECT c.stadium_id     FROM concert c     WHERE c.year = 2014 );

SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (     SELECT c.stadium_id     FROM concert c     WHERE c.year = 2014 );

SELECT c.concert_name, COUNT(*) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name;

SELECT c.concert_name, c.theme, COUNT(*) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_id = sic.concert_id GROUP BY c.concert_name, c.theme;

SELECT s.name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id GROUP BY s.name;

SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = 2014;

SELECT s.name FROM singer s JOIN singer_in_concert sic ON s.singer_id = sic.singer_id JOIN concert c ON sic.concert_id = c.concert_id WHERE c.year = 2014;

SELECT s.name, s.country FROM singer s WHERE s.song_name LIKE '%Hey%';

SELECT s.name, s.country FROM singer s WHERE EXISTS (     SELECT 1     FROM singer_in_concert sic     JOIN concert c ON sic.concert_id = c.concert_id     JOIN stadium st ON c.stadium_id = st.stadium_id     WHERE sic.singer_id = s.singer_id     AND c.song_name LIKE '%Hey%' );

SELECT s.name, s.location FROM stadium s WHERE EXISTS (     SELECT 1     FROM concert c     WHERE c.year = 2014 AND c.stadium_id = s.stadium_id ) AND EXISTS (     SELECT 1     FROM concert c     WHERE c.year = 2015 AND c.stadium_id = s.stadium_id );

SELECT s.name, s.location FROM stadium s JOIN concert c ON s.stadium_id = c.stadium_id WHERE c.year IN (2014, 2015)

SELECT COUNT(*) FROM concert  WHERE stadium_id IN (SELECT stadium_id FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium));

SELECT COUNT(*) FROM concert  JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium);

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT COUNT(*) FROM pets WHERE weight > 10;

SELECT weight FROM pets WHERE pettype = 'dog' ORDER BY age DESC LIMIT 1;

SELECT p.weight FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE s.age = (SELECT MIN(age) FROM student);

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT pettype, MAX(weight) AS max_weight FROM pets GROUP BY pettype;

SELECT COUNT(*) FROM has_pet  WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(*) FROM has_pet  WHERE stuid IN (SELECT stuid FROM student WHERE age > 20);

SELECT COUNT(*) FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE student.sex = 'F' AND pettype = 'dog';

SELECT COUNT(*) FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  WHERE student.sex = 'F' AND pettype = 'dog';

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT COUNT(DISTINCT pettype) FROM pets;

SELECT fname FROM student WHERE major IN ('cat', 'dog') AND fname LIKE '%';

SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE pettype IN ('cat', 'dog'))

SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pettype = 'dog';

SELECT s.fname FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pettype = 'dog';

SELECT major, age FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat');

SELECT s.major, s.age FROM student s WHERE s.stuid IN (     SELECT sp.stuid     FROM has_pet sp     WHERE sp.petid IN (         SELECT p.petid         FROM pets p         WHERE p.pettype = 'cat'     )     GROUP BY sp.stuid     HAVING COUNT(*) = 0 );

SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat')

SELECT stuid FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE pettype = 'cat');

SELECT s.fname, s.age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog' AND p.pettype != 'cat'  AND s.sex = 'm';

SELECT fname FROM student  WHERE sex = 'M'  AND age > 18  AND (major = 'CS' OR major = 'EE')  AND (SELECT COUNT(*) FROM has_pet WHERE stuid = student.stuid AND pettype = 'dog') > 0  AND (SELECT COUNT(*) FROM has_pet WHERE stuid = student.stuid AND pettype = 'cat') = 0;

SELECT p.pettype, p.weight FROM pets p JOIN has_pet hp ON p.petid = hp.petid JOIN student s ON hp.stuid = s.stuid WHERE s.age = (SELECT MIN(age) FROM student);

SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);

SELECT petid, weight FROM pets WHERE pet_age > 1;

SELECT p.petid, p.weight FROM pets p WHERE p.pet_age > 1;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;

SELECT pettype, AVG(weight) AS avg_weight FROM pets GROUP BY pettype;

SELECT student.fname, student.age  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  WHERE has_pet.petid IN (SELECT petid FROM pets);

SELECT fname, pet_age FROM student s JOIN has_pet hp ON s.stuid = hp.stuid;

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith');

SELECT s.stuid, COUNT(*) AS num_pets FROM student s JOIN has_pet hp ON s.stuid = hp.stuid GROUP BY s.stuid;

SELECT stuid, petid FROM has_pet GROUP BY stuid;

SELECT s.fname, s.sex FROM student s WHERE s.stuid IN (     SELECT sp.stuid     FROM has_pet sp     GROUP BY sp.stuid     HAVING COUNT(*) > 1 );

SELECT s.fname, s.sex FROM student s WHERE s.stuid IN (     SELECT sp.stuid     FROM has_pet sp     GROUP BY sp.stuid     HAVING COUNT(*) > 1 );

SELECT lname FROM student WHERE EXISTS (SELECT 1 FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat' AND p.pet_age = 3);

SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3))

SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet);

SELECT AVG(age) FROM student  WHERE stuid NOT IN (SELECT stuid FROM has_pet);

SELECT COUNT(*) FROM continents;

SELECT COUNT(*) FROM continents;

SELECT c.contid, c.continent, COUNT(*) as num_countries FROM continents c JOIN countries co ON c.contid = co.continent GROUP BY c.contid, c.continent;

SELECT continents.contid, continents.continent, COUNT(*) as num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;

SELECT COUNT(*) FROM countries;

SELECT COUNT(*) FROM countries;

SELECT cm.fullname, cm.id, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id;

SELECT cm.id, cm.fullname, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.id, cm.fullname;

SELECT model FROM model_list ORDER BY horsepower ASC LIMIT 1;

SELECT model FROM model_list WHERE horsepower = (SELECT MIN(horsepower) FROM cars_data);

SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT model FROM car_names WHERE weight < (SELECT AVG(weight) FROM cars_data);

SELECT DISTINCT c.maker FROM car_makers c JOIN cars_data d ON c.id = d.id WHERE d.year = 1970;

SELECT DISTINCT c.maker FROM cars_data c JOIN car_makers km ON c.id = km.id WHERE c.year = 1970;

SELECT c.maker, c.year FROM cars_data c WHERE c.year = (SELECT MIN(year) FROM cars_data);

SELECT c.maker FROM cars_data c JOIN car_makers km ON c.id = km.id JOIN countries co ON km.country = co.countryid WHERE co.year = (SELECT MIN(year) FROM countries);

SELECT DISTINCT model FROM model_list WHERE year > 1980;

SELECT DISTINCT model FROM cars_data WHERE year > 1980;

SELECT c.continent, COUNT(*) as count FROM continents c JOIN countries co ON c.contid = co.continent JOIN car_makers cm ON co.countryid = cm.country GROUP BY c.continent;

SELECT c.continent, COUNT(cm.id) AS num_makers FROM continents c JOIN countries cm ON c.contid = cm.continent GROUP BY c.continent;

SELECT c.countryname FROM countries c GROUP BY c.continent ORDER BY COUNT(c.countryid) DESC LIMIT 1;

SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid ORDER BY COUNT(*) DESC LIMIT 1;

SELECT cm.fullname, COUNT(*) AS count FROM car_makers cm JOIN model_list ml ON cm.id = ml.maker GROUP BY cm.fullname;

SELECT cm.id, cm.fullname, COUNT(*) AS num_models FROM car_makers cm GROUP BY cm.id;

SELECT c.accelerate  FROM cars_data c JOIN car_makers km ON c.id = km.id JOIN countries co ON km.country = co.countryid JOIN continents con ON co.continent = con.contid WHERE co.countryname = 'amc hornet sportabout (sw)' AND con.continent = 1;

SELECT accelerate FROM cars_data WHERE id = (SELECT makeid FROM car_names WHERE model = 'Hornet Sportabout' AND make = 'AMC');

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france');

SELECT COUNT(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France');

SELECT COUNT(*) FROM cars_data WHERE country IN (SELECT countryid FROM countries WHERE countryname = 'USA');

SELECT COUNT(*) FROM cars_data JOIN car_makers ON cars_data.id = car_makers.id WHERE country = (SELECT country FROM car_makers WHERE maker = 'United States');

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;

SELECT maker, model FROM car_makers;

SELECT maker, model FROM model_list;

SELECT countries.countryname, countries.countryid FROM countries JOIN car_makers ON countries.continent = car_makers.country WHERE car_makers.country IS NOT NULL;

SELECT countries.countryname, countries.countryid FROM countries JOIN car_makers ON countries.continent = car_makers.continent WHERE car_makers.country IS NOT NULL;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;

SELECT year, AVG(weight) AS avg_weight FROM cars_data GROUP BY year;

SELECT year, AVG(weight) AS avg_weight, AVG(year) AS avg_year FROM cars_data GROUP BY year;

SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN car_makers ON car_makers.id = car_makers.id WHERE countries.continent = (SELECT contid FROM continents WHERE continent = 'Europe') GROUP BY countries.countryid HAVING COUNT(*) >= 3;

SELECT countries.countryname  FROM countries  WHERE countries.continent = (SELECT contid FROM continents WHERE continent = 'Europe')  AND countries.countryid IN (SELECT maker FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'Germany'));

SELECT MAX(horsepower), maker FROM cars_data WHERE cylinders = 3 GROUP BY maker;

SELECT maker FROM car_makers WHERE id IN (SELECT maker FROM model_list WHERE cylinders = 3 ORDER BY horsepower DESC LIMIT 1);

SELECT model, mpg FROM cars_data ORDER BY mpg DESC LIMIT 1;

SELECT model FROM model_list ORDER BY mpg DESC LIMIT 1;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;

SELECT AVG(edispl) FROM cars_data WHERE id IN (SELECT makeid FROM car_names WHERE model = 'volvo');

SELECT AVG(edispl) FROM cars_data WHERE model LIKE 'volvo%';

SELECT c.cylinders, MAX(c.accelerate) AS max_accelerate FROM cars_data c GROUP BY c.cylinders;

SELECT MAX(accelerate) FROM cars_data;

SELECT m.model, COUNT(*) AS count FROM model_list m JOIN car_makers c ON m.maker = c.id GROUP BY m.model ORDER BY count DESC LIMIT 1;

SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM cars_data WHERE year = 1980;

SELECT COUNT(*) FROM car_names  WHERE maker = (SELECT fullname FROM car_makers WHERE maker = 'American Motor Company');

SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE maker = 'American Motor Company');

SELECT c.fullname, c.id FROM car_makers c WHERE c.id IN (     SELECT m.maker     FROM model_list m     GROUP BY m.maker     HAVING COUNT(m.model) > 3 );

SELECT maker, id FROM car_makers WHERE COUNT(*) > 3;

SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') OR weight > 3500;

SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') AND weight > 3500;

SELECT DISTINCT YEAR FROM cars_data WHERE weight BETWEEN 3000 AND 4000;

SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND weight > 3000;

SELECT hp FROM cars_data ORDER BY accelerate DESC LIMIT 1;

SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;

SELECT COUNT(*) FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data) AND model = 'volvo';

SELECT COUNT(*) FROM cars_data WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo') AND accelerate = (SELECT MIN(accelerate) FROM cars_data                   WHERE model IN (SELECT model FROM car_names WHERE make = 'Volvo'));

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);

SELECT COUNT(*) FROM countries WHERE countryid IN (SELECT DISTINCT countryid FROM car_makers GROUP BY countryid HAVING COUNT(*) > 2);

SELECT COUNT(*) FROM countries WHERE continent IN (SELECT contid FROM continents WHERE CONTINENT = 'Asia');

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;

SELECT model FROM car_names WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT model FROM car_names WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1;

SELECT c.makeid, c.make FROM cars_data c WHERE c.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND c.cylinders <= 3;

SELECT c.id, c.fullname FROM cars_data c WHERE c.horsepower < (SELECT MIN(c2.horsepower) FROM cars_data c2) AND c.cylinders < 4;

SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;

SELECT MAX(mpg) FROM cars_data WHERE cylinders >= 8 OR year < 1980;

SELECT model FROM model_list WHERE edispl < 3500 AND maker NOT IN (SELECT id FROM car_makers WHERE fullname = 'Ford Motor Company');

SELECT model FROM model_list WHERE id IN (     SELECT makeid FROM car_names     WHERE make = 'Ford' ) AND weight < 3500 GROUP BY model HAVING COUNT(*) = 1;

SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers);

SELECT countries.countryname FROM countries WHERE countries.continent IN (SELECT contid FROM continents WHERE contid NOT IN (SELECT DISTINCT maker FROM car_makers));

SELECT id, maker FROM car_makers WHERE COUNT(*) >= 2 AND COUNT(*) > 3;

SELECT id, maker FROM car_makers WHERE COUNT(*) > 3 AND maker IN (SELECT maker FROM car_makers GROUP BY maker HAVING COUNT(*) >= 2);

SELECT c.countryid, c.countryname FROM countries c WHERE c.continent IN (     SELECT contid     FROM continents     WHERE continent = 'Europe' ) AND c.countryid IN (     SELECT id     FROM car_makers     GROUP BY id     HAVING COUNT(*) > 3 ) OR c.countryid IN (     SELECT modelid     FROM car_names     WHERE model = 'fiat' );

SELECT countries.countryid, countries.countryname FROM countries  WHERE countries.continent IN (SELECT contid FROM continents WHERE continent = 'Europe')  AND countries.countryid IN (SELECT id FROM car_makers)  OR countries.countryid IN (SELECT model FROM car_names WHERE model = 'Fiat');

SELECT country FROM airlines WHERE airline = 'JetBlue Airways';

SELECT country FROM airlines WHERE airline = 'Jetblue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';

SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';

SELECT a.abbreviation, a.airline  FROM airlines a  WHERE a.country = 'USA';

SELECT a.abbreviation, a.airline FROM airlines a WHERE a.country = 'USA';

SELECT airports.airportcode, airports.airportname  FROM airports  WHERE airports.city = 'Anthony';

SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airlines;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM airports;

SELECT COUNT(*) FROM flights;

SELECT COUNT(*) FROM flights;

SELECT airline FROM airlines WHERE abbreviation = 'UAL';

SELECT abbreviation FROM airlines WHERE abbreviation = 'UAL';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT COUNT(*) FROM airlines WHERE country = 'USA';

SELECT airports.city, airports.country FROM airports WHERE airports.airportcode = 'Alton';

SELECT city, country FROM airports WHERE airportcode = 'Alton';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE airportcode = 'AKO';

SELECT airportname FROM airports WHERE city = 'Aberdeen';

SELECT airportname FROM airports WHERE city = 'Aberdeen';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';

SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE country = 'ATO');

SELECT COUNT(*) FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights  WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights  WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')  AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Ashley');

SELECT COUNT(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley';

SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';

SELECT COUNT(*) FROM flights  WHERE airline = 'United Airlines' AND destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights  WHERE airline = 'United Airlines' AND destairport = 'Aberdeen';

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.city, COUNT(f.destairport) AS freq FROM flights f JOIN airports a ON f.destairport = a.airportcode GROUP BY a.city ORDER BY freq DESC LIMIT 1;

SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;

SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1)

SELECT airportcode FROM airports ORDER BY COUNT(*) DESC LIMIT 1;

SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;

SELECT airportcode FROM flights GROUP BY airportcode ORDER BY COUNT(*) ASC LIMIT 1;

SELECT DISTINCT f.sourceairport FROM flights f ORDER BY COUNT(f.flightno) ASC LIMIT 1;

SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;

SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(*) ASC LIMIT 1;

SELECT a.abbreviation, a.country FROM airlines a JOIN flights f ON a.uid = f.airline GROUP BY a.abbreviation, a.country ORDER BY COUNT(f.flightno) ASC LIMIT 1;

SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';

SELECT airline FROM flights WHERE sourceairport = 'AHD';

SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD';

SELECT DISTINCT a.airline FROM flights f JOIN airlines a ON f.airline = a.uid JOIN airports p ON f.destairport = p.airportcode WHERE p.city = 'AHD';

SELECT DISTINCT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline WHERE f.sourceairport = 'APG' AND f.destairport = 'CVO';

SELECT a.airline FROM airlines a JOIN flights f ON a.airline = f.airline WHERE f.sourceairport IN ('APG', 'CVO') AND f.destairport IN ('APG', 'CVO');

SELECT airline FROM flights WHERE sourceairport = 'CVO' AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')

SELECT a.airline FROM airlines a WHERE a.abbreviation IN (     SELECT DISTINCT f.sourceairport     FROM flights f     WHERE f.destairport = 'APG' ) AND a.abbreviation NOT IN (     SELECT DISTINCT f.sourceairport     FROM flights f     WHERE f.destairport = 'CVO' );

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE airline = 'United Airlines';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno FROM flights WHERE destairport = 'APG';

SELECT flightno FROM flights WHERE sourceairport = 'APG';

SELECT flightno  FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT flightno FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT flightno FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');

SELECT COUNT(*) FROM flights  WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene');

SELECT COUNT(*) FROM flights  WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene')  OR destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene');

SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);

SELECT DISTINCT airports.airportcode FROM airports WHERE airports.airportcode NOT IN (     SELECT DISTINCT flights.sourceairport     FROM flights     UNION     SELECT DISTINCT flights.destairport     FROM flights );

SELECT COUNT(*) FROM employee;

SELECT COUNT(*) FROM employee;

SELECT name FROM employee ORDER BY age ASC;

SELECT name FROM employee ORDER BY age ASC;

SELECT city, COUNT(*) AS num_employees FROM employee GROUP BY city;

SELECT city, COUNT(*) AS count FROM employee GROUP BY city;

SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;

SELECT shop.location, COUNT(*) AS num_shops FROM shop GROUP BY shop.location;

SELECT shop.location, COUNT(*) AS num_shops FROM shop GROUP BY shop.location;

SELECT h.manager_name, s.district FROM hiring h JOIN shop s ON h.shop_id = s.shop_id WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT h.manager_name, s.district FROM shop s JOIN hiring h ON s.shop_id = h.shop_id WHERE s.number_products = (SELECT MAX(number_products) FROM shop);

SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;

SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT name, location, district FROM shop ORDER BY number_products DESC;

SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);

SELECT s.name FROM shop s WHERE s.number_products > (SELECT AVG(number_products) FROM shop);

SELECT e.name FROM evaluation e GROUP BY e.employee_id ORDER BY COUNT(e.year_awarded) DESC LIMIT 1;

SELECT name FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT e.name FROM employee e JOIN evaluation ev ON e.employee_id = ev.employee_id ORDER BY ev.bonus DESC LIMIT 1;

SELECT name FROM evaluation ORDER BY bonus DESC LIMIT 1;

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);

SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation);

SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id GROUP BY s.shop_id ORDER BY COUNT(h.employee_id) DESC LIMIT 1;

SELECT s.name FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.shop_id ORDER BY COUNT(e.employee_id) DESC LIMIT 1;

SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);

SELECT s.name FROM shop s WHERE NOT EXISTS (SELECT 1 FROM hiring h WHERE h.shop_id = s.shop_id AND h.employee_id IS NOT NULL);

SELECT s.name AS shop_name, COUNT(e.employee_id) AS num_employees FROM shop s JOIN hiring h ON s.shop_id = h.shop_id JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.name;

SELECT s.name AS shop_name, COUNT(e.employee_id) AS num_employees FROM shop s LEFT JOIN hiring h ON s.shop_id = h.shop_id LEFT JOIN employee e ON h.employee_id = e.employee_id GROUP BY s.shop_id, s.name;

SELECT SUM(bonus) AS total_bonus FROM evaluation;

SELECT SUM(bonus) AS total_bonus FROM evaluation;

SELECT * FROM hiring;

SELECT * FROM hiring;

SELECT s.district FROM shop s WHERE s.number_products < 3000 INTERSECT SELECT s.district FROM shop s WHERE s.number_products > 10000;

SELECT DISTINCT s.district FROM shop s WHERE s.number_products < 3000 AND s.number_products > 10000;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(DISTINCT location) FROM shop;

SELECT COUNT(*) FROM documents;

SELECT COUNT(*) FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT document_id, document_name, document_description FROM documents;

SELECT documents.document_id, documents.template_id, documents.document_name FROM documents WHERE documents.document_description LIKE '%w%';

SELECT documents.document_id, documents.template_id, documents.document_name FROM documents WHERE documents.document_description LIKE '%w%';

SELECT documents.document_id, templates.template_id, documents.document_description  FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV';

SELECT documents.document_id, templates.template_id, documents.document_description  FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Robbin CV';

SELECT COUNT(DISTINCT t.template_id) FROM templates t JOIN documents d ON t.template_id = d.template_id;

SELECT COUNT(DISTINCT template_id) FROM documents;

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT');

SELECT t.template_id, COUNT(d.document_id) AS num_documents FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id;

SELECT d.template_id, COUNT(*) AS count FROM documents d GROUP BY d.template_id;

SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT t.template_id, t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id, t.template_type_code ORDER BY COUNT(d.document_id) DESC LIMIT 1;

SELECT t.template_id FROM templates t JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id HAVING COUNT(d.document_id) > 1;

SELECT t.template_id FROM templates t WHERE EXISTS (     SELECT 1     FROM documents d     WHERE d.template_id = t.template_id     AND d.document_id != t.template_id );

SELECT t.template_id FROM templates t WHERE t.template_id NOT IN (     SELECT d.template_id     FROM documents d );

SELECT t.template_id FROM templates t WHERE t.template_id NOT IN (     SELECT d.template_id     FROM documents d );

SELECT COUNT(*) FROM templates;

SELECT COUNT(*) FROM templates;

SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;

SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;

SELECT DISTINCT template_type_code FROM templates;

SELECT template_type_code FROM ref_template_types;

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT');

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';

SELECT version_number, template_type_code  FROM templates  WHERE version_number > 5;

SELECT version_number, template_type_code FROM templates WHERE version_number > 5;

SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;

SELECT template_type_code, COUNT(*) AS count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types WHERE COUNT(*) < 3;

SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(*) < 3 );

SELECT MIN(version_number), template_type_code FROM templates GROUP BY template_type_code;

SELECT MIN(version_number) AS lowest_version, template_type_code FROM templates GROUP BY template_type_code;

SELECT template_type_code FROM templates WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Data base');

SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'Data base');

SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';

SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';

SELECT template_type_code, COUNT(*) AS num_documents FROM templates GROUP BY template_type_code;

SELECT rt.template_type_code, COUNT(d.template_id) AS num_documents FROM ref_template_types rt LEFT JOIN templates d ON rt.template_type_code = d.template_type_code GROUP BY rt.template_type_code;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM documents);

SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM documents);

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_code, template_type_description FROM ref_template_types;

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';

SELECT DISTINCT template_type_description FROM ref_template_types WHERE template_type_code IN (     SELECT template_type_code     FROM templates );

SELECT DISTINCT template_type_description FROM ref_template_types WHERE template_type_code IN (SELECT template_type_code FROM templates WHERE template_id IN (SELECT document_id FROM documents));

SELECT t.template_id FROM templates t JOIN ref_template_types r ON t.template_type_code = r.template_type_code WHERE r.template_type_description = 'Presentation';

SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs;

SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT COUNT(*) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show');

SELECT * FROM paragraphs WHERE paragraph_text = 'Korea ';

SELECT d.template_id, p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE p.paragraph_text LIKE '%Korea%';

SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs WHERE documents.document_name = 'Welcome to NY';

SELECT p.paragraph_id, p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Welcome to NY';

SELECT p.paragraph_text FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Customer reviews';

SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews');

SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;

SELECT document_id, COUNT(*) AS num_paragraphs FROM paragraphs GROUP BY document_id ORDER BY document_id;

SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;

SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;

SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) >= 2;

SELECT document_id FROM documents WHERE document_id IN (     SELECT document_id FROM paragraphs     GROUP BY document_id     HAVING COUNT(*) >= 2 );

SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;

SELECT d.document_id, d.document_name FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;

SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1;

SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;

SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;

SELECT documents.document_id, paragraphs.paragraph_text FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');

SELECT d.document_id FROM documents d JOIN paragraphs p ON d.document_id = p.document_id WHERE p.paragraph_text IN ('Brazil', 'Ireland');

SELECT COUNT(*) FROM teacher;

SELECT COUNT(*) FROM teacher;

SELECT name FROM teacher ORDER BY age ASC;

SELECT name FROM teacher ORDER BY age ASC;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT teacher.age, teacher.hometown FROM teacher;

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT name FROM teacher WHERE age = 32 OR age = 33;

SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);

SELECT t.hometown FROM teacher t WHERE t.age = (SELECT MIN(age) FROM teacher);

SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown;

SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;

SELECT t.name, c.course  FROM teacher t  JOIN course_arrange ca ON t.teacher_id = ca.teacher_id  JOIN course c ON ca.course_id = c.course_id;

SELECT t.name, c.course FROM teacher t JOIN course c ON t.teacher_id = c.course_id;

SELECT t.name, c.course FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name;

SELECT t.name, c.course  FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id ORDER BY t.name ASC;

SELECT t.name FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id JOIN course c ON ca.course_id = c.course_id WHERE c.course = 'math';

SELECT name FROM teacher WHERE course = 'math';

SELECT t.name, COUNT(*) AS num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.name;

SELECT t.name, COUNT(*) AS num_courses FROM teacher t JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id, t.name;

SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2);

SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2);

SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);

SELECT t.name FROM teacher t WHERE NOT EXISTS (     SELECT 1     FROM course_arrange ca     WHERE ca.course_id = t.teacher_id );

SELECT COUNT(*) FROM visitor WHERE age < 30;

SELECT name FROM visitor WHERE level_of_membership > '4' ORDER BY level_of_membership DESC;

SELECT AVG(age) FROM visitor WHERE level_of_membership <= '4';

SELECT v.name, v.level_of_membership FROM visitor v WHERE v.level_of_membership > '4' ORDER BY v.age DESC;

SELECT m.museum_id, m.name FROM museum m ORDER BY m.num_of_staff DESC LIMIT 1;

SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;

SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';

SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010);

SELECT v.id, v.name, v.age FROM visitor v JOIN visit w ON v.id = w.visitor_id GROUP BY v.id HAVING COUNT(w.museum_id) > 1;

SELECT v.id, v.name, v.level_of_membership FROM visitor v JOIN visit w ON v.id = w.visitor_id WHERE w.total_spent = (SELECT MAX(total_spent) FROM visit);

SELECT v.id, m.name FROM visit v JOIN museum m ON v.museum_id = m.museum_id GROUP BY v.museum_id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit);

SELECT v.name, v.age FROM visitor v JOIN visit ON v.id = visit.visitor_id GROUP BY v.id ORDER BY COUNT(*) DESC LIMIT 1;

SELECT AVG(num_of_ticket) AS avg_tickets, MAX(num_of_ticket) AS max_tickets FROM visit;

SELECT SUM(total_spent) AS total_expense FROM visit WHERE visitor_id IN (     SELECT id FROM visitor WHERE level_of_membership = '1' );

SELECT v.name FROM visitor v JOIN visit w ON v.id = w.visitor_id JOIN museum m ON w.museum_id = m.museum_id WHERE m.open_year < 2009 AND m.open_year > 2011;

SELECT COUNT(*) FROM visitor WHERE visitor.id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2010));

SELECT COUNT(*) FROM museum WHERE open_year < 2008 OR open_year > 2013;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM players;

SELECT COUNT(*) FROM matches;

SELECT COUNT(*) FROM matches;

SELECT first_name, birth_date FROM players WHERE country_code = 'USA';

SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';

SELECT      AVG(winner_age) AS avg_winner_age,     AVG(loser_age) AS avg_losing_age FROM matches;

SELECT      winner_age,      loser_age  FROM      matches;

SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches);

SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches);

SELECT MAX(ranking) AS highest_rank FROM rankings WHERE player_id IN (     SELECT loser_id     FROM matches );

SELECT DISTINCT winner_rank FROM matches;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT country_code) FROM players;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT COUNT(DISTINCT loser_name) FROM matches;

SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;

SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;

SELECT w.winner_name FROM matches w WHERE w.year = 2013 AND w.winner_id IN (SELECT p.player_id FROM players p WHERE p.country_code = 'US') AND w.year = 2016 AND w.winner_id IN (SELECT p.player_id FROM players p WHERE p.country_code = 'US');

SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2013 AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE year = 2016 );

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);

SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_id = 'WTA Championships' AND m.tourney_id = 'Australian Open';

SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' AND tourney_id = 'WTAChamps'     INTERSECT     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' AND tourney_id = 'AusOpen' );

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, country_code FROM players ORDER BY winner_age DESC LIMIT 1;

SELECT first_name, last_name FROM players ORDER BY birth_date;

SELECT first_name || ' ' || last_name AS full_name, birth_date FROM players ORDER BY birth_date;

SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

SELECT p.first_name || ' ' || p.last_name AS full_name, p.birth_date FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date;

SELECT first_name, country_code FROM players WHERE player_id IN (     SELECT player_id     FROM rankings     GROUP BY player_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1);

SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;

SELECT winner_name, winner_rank_points FROM matches WHERE winner_id IN (     SELECT player_id     FROM players     GROUP BY player_id     HAVING COUNT(*) = (SELECT MAX(cnt) FROM (         SELECT COUNT(*) cnt         FROM matches         GROUP BY winner_id     )) );

SELECT winner_name, winner_rank_points FROM matches WHERE winner_id IN (     SELECT player_id     FROM players     ORDER BY winner_rank_points DESC     LIMIT 1 );

SELECT winner_name FROM matches WHERE winner_id IN (     SELECT player_id     FROM players     WHERE country_code = 'AUS' ) AND winner_rank_points = (     SELECT MAX(ranking_points)     FROM rankings     WHERE ranking_date = (SELECT MIN(ranking_date) FROM rankings) );

SELECT winner_name FROM matches WHERE tourney_id = 'AUS' ORDER BY winner_rank_points DESC LIMIT 1;

SELECT p1.name AS winner, p2.name AS loser FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);

SELECT p1.first_name || ' ' || p1.last_name AS winner_name, p2.first_name || ' ' || p2.last_name AS loser_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);

SELECT      p.first_name,     AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;

SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;

SELECT      p.first_name,     SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;

SELECT p.first_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id;

SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;

SELECT country_code, COUNT(*) AS count FROM players GROUP BY country_code;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;

SELECT ranking_date, COUNT(*) AS total_tours FROM matches GROUP BY ranking_date;

SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;

SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;

SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;

SELECT winner_name, winner_rank FROM matches JOIN rankings ON matches.winner_id = rankings.player_id WHERE ranking_date >= (SELECT MIN(ranking_date) FROM rankings) ORDER BY ranking_date ASC LIMIT 3;

SELECT p.first_name, p.last_name, r.rank FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date >= '2000-01-01' ORDER BY r.ranking_date ASC LIMIT 3;

SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'L') AND winner_id IN (SELECT player_id FROM players WHERE hand = 'R') AND tourney_name = 'WTA Championships';

SELECT COUNT(*) FROM matches  WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';

SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)

SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE p.player_id IN (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY SUM(winner_rank_points) DESC     LIMIT 1 );

SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;

SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;

SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';

SELECT name, tonnage FROM ship ORDER BY name ASC;

SELECT name, date, result FROM battle;

SELECT MIN(injured), MAX(injured) FROM death;

SELECT AVG(injured) AS avg_injuries FROM death;

SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');

SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';

SELECT b.id, b.name FROM battle b WHERE EXISTS (     SELECT 1     FROM ship s     WHERE s.ship_type = 'Brig'       AND s.lost_in_battle = b.id );

SELECT b.id, b.name FROM battle b WHERE b.id IN (     SELECT d.caused_by_ship_id     FROM death d     WHERE d.killed > 10 ) AND b.id IN (     SELECT s.id     FROM ship s     WHERE s.lost_in_battle = (SELECT b.id FROM battle b WHERE b.id IN (         SELECT d.caused_by_ship_id         FROM death d         WHERE d.killed > 10     )) );

SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;

SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';

SELECT COUNT(DISTINCT result) FROM battle;

SELECT COUNT(*) FROM battle  WHERE NOT EXISTS (     SELECT 1      FROM ship      WHERE ship.tonnage = 225 AND ship.id IN (battle.id) );

SELECT b.name, b.date  FROM battle b  WHERE b.id IN (     SELECT s.ship_id      FROM ship s      WHERE s.name = 'HMS Atalanta' OR s.name = 'Lettice' );

SELECT b.name, b.result, b.bulgarian_commander  FROM battle b WHERE b.id IN (     SELECT s.battle_id     FROM ship s     WHERE s.location = 'English Channel'     AND s.lost_in_battle IS NULL );

SELECT note FROM death WHERE note LIKE '%East%';

SELECT line_1, line_2 FROM addresses;

SELECT line_1, line_2 FROM addresses;

SELECT COUNT(*) FROM courses;

SELECT COUNT(*) FROM courses;

SELECT course_description FROM courses WHERE course_name = 'Math';

SELECT course_description FROM courses WHERE course_name LIKE '%math%';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';

SELECT d.department_id, d.department_name FROM departments d JOIN degree_programs gp ON d.department_id = gp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(gp.degree_program_id) DESC LIMIT 1;

SELECT dp.department_id, dp.department_name FROM degree_programs dp JOIN students st ON dp.department_id = st.student_id GROUP BY dp.department_id, dp.department_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT COUNT(*) FROM degree_programs;

SELECT COUNT(DISTINCT department_id) FROM degree_programs;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;

SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT COUNT(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');

SELECT section_name, section_description FROM sections;

SELECT section_name, section_description FROM sections;

SELECT course_name, course_id FROM courses WHERE course_id IN (     SELECT student_enrolment_courses.course_id     FROM student_enrolment_courses     GROUP BY course_id     HAVING COUNT(*) <= 2 );

SELECT courses.course_name, courses.course_id FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_id, courses.course_name HAVING COUNT(*) < 2;

SELECT section_name FROM sections ORDER BY reverse(section_name);

SELECT section_name FROM sections ORDER BY section_name DESC;

SELECT semester_name, semester_id FROM semesters ORDER BY COUNT(*) DESC LIMIT 1;

SELECT      semesters.semester_id,     semesters.semester_name,     COUNT(DISTINCT student_enrolment.student_id) AS num_students FROM      semesters JOIN      student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY      semesters.semester_id, semesters.semester_name ORDER BY      num_students DESC LIMIT 1;

SELECT department_description FROM departments WHERE department_name LIKE '%the computer%';

SELECT department_description FROM departments WHERE department_name LIKE '%computer%';

SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IN (     SELECT degree_program_id FROM degree_programs     GROUP BY degree_program_id     HAVING COUNT(*) > 1 );

SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN degree_programs ON student_enrolment_courses.course_id = degree_programs.course_id WHERE student_enrolment.semester_id = (SELECT semester_id FROM semesters WHERE semester_name = 'Fall') AND degree_programs.degree_program_id IN (     SELECT degree_program_id FROM degree_programs     GROUP BY degree_program_id     HAVING COUNT(DISTINCT degree_program_id) >= 2 );

SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelor';

SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelors';

SELECT dp.degree_summary_name AS program_name, COUNT(se.student_id) AS student_count FROM degree_programs dp JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;

SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT degree_program_id, degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT dp.degree_program_id, dp.degree_summary_name FROM degree_programs dp JOIN student_enrolment_courses sec ON dp.degree_program_id = sec.course_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(sec.student_id) DESC LIMIT 1;

SELECT      s.student_id,     s.first_name,     s.middle_name,     s.last_name,     COUNT(*) AS num_enrollments FROM      students s JOIN      student_enrolment_courses sec ON s.student_id = sec.student_id JOIN      student_enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY      s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY      num_enrollments DESC LIMIT 1;

SELECT      s.first_name,     s.middle_name,     s.last_name,     se.student_enrolment_id,     COUNT(*) AS num_enrollments FROM      students s JOIN      student_enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id ORDER BY      num_enrollments DESC LIMIT 1;

SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment);

SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT student_enrolment.semester_id FROM student_enrolment JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id);

SELECT course_name FROM courses  WHERE course_id IN (SELECT student_enrolment.course_id FROM student_enrolment                    JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id                   JOIN courses ON student_enrolment_courses.course_id = courses.course_id);

SELECT course_name FROM courses  WHERE course_id IN (SELECT student_enrolment.course_id FROM student_enrolment                    JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id                   JOIN courses ON student_enrolment_courses.course_id = courses.course_id);

SELECT course_name FROM courses JOIN student_enrolment ON courses.course_id = student_enrolment.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT c.course_name FROM courses c JOIN student_enrolment se ON c.course_id = se.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;

SELECT last_name FROM students WHERE current_address_id IN (     SELECT address_id     FROM addresses     WHERE state_province_county = 'North Carolina' ) AND student_id IN (     SELECT student_id     FROM student_enrolment     WHERE degree_program_id IS NULL );

SELECT s.last_name FROM students s JOIN addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id IN (     SELECT se.student_id     FROM student_enrolment se     WHERE se.degree_program_id IS NOT NULL );

SELECT transcript_id, student_course_id FROM transcript_contents JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id WHERE transcript_contents.student_course_id IN (SELECT student_course_id FROM student_enrolment_courses GROUP BY student_course_id HAVING COUNT(*) >= 2);

SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (     SELECT student_course_id FROM student_course_id     JOIN student_enrolment_courses ON student_enrolment_courses.student_course_id = student_course_id     GROUP BY transcript_id     HAVING COUNT(*) >= 2 );

SELECT s.cell_mobile_number FROM students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';

SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';

SELECT students.first_name, students.middle_name, students.last_name  FROM students  WHERE students.date_first_registered = (SELECT MIN(date_first_registered) FROM students);

SELECT first_name, middle_name, last_name FROM students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM students);

SELECT s.first_name, s.middle_name, s.last_name  FROM students s WHERE s.date_left IS NOT NULL ORDER BY s.date_left ASC;

SELECT s.first_name, s.middle_name, s.last_name  FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN student_enrolment_courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN courses c ON sec.course_id = c.course_id JOIN semesters ssem ON se.semester_id = ssem.semester_id WHERE sdate = (SELECT MIN(date_first_registered) FROM students)

SELECT s.first_name FROM students s WHERE s.current_address_id = ANY (SELECT a.address_id FROM addresses a WHERE a.address_id != (SELECT a2.address_id FROM addresses a2 WHERE a2.id = s.permanent_address_id));

SELECT s.first_name FROM students s WHERE s.permanent_address_id != s.current_address_id;

SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM addresses a JOIN students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1;

SELECT      a.address_id,     a.line_1,     a.line_2 FROM      addresses a JOIN      students s ON a.address_id = s.current_address_id GROUP BY      a.address_id, a.line_1, a.line_2 ORDER BY      COUNT(s.student_id) DESC LIMIT 1;

SELECT AVG(transcript_date) FROM transcripts;

SELECT AVG(transcript_date) FROM transcripts;

SELECT transcript_date, other_details FROM transcripts;

SELECT MIN(transcript_date), other_details FROM transcripts GROUP BY other_details;

SELECT COUNT(*) FROM transcripts;

SELECT COUNT(*) FROM transcripts;

SELECT MAX(transcript_date) FROM transcripts;

SELECT MAX(transcript_date) AS last_transcript_date FROM transcripts;

SELECT COUNT(*) AS max_transcripts_per_enrollment, student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id ORDER BY max_transcripts_per_enrollment DESC;

SELECT      course_id,     COUNT(*) AS max_enrollments FROM      student_enrolment_courses GROUP BY      course_id ORDER BY      max_enrollments DESC;

SELECT t.transcript_id, t.transcript_date FROM transcripts t JOIN transcript_contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;

SELECT transcript_id, transcript_date FROM transcripts ORDER BY COUNT(*) ASC LIMIT 1;

SELECT DISTINCT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name IN ('Master', 'Bachelor');

SELECT semester_id FROM semesters WHERE semester_name IN ('Masters', 'Bachelors');

SELECT COUNT(DISTINCT current_address_id) FROM students;

SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details   FROM students   JOIN addresses ON students.current_address_id = addresses.address_id   UNION ALL   SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details   FROM students   JOIN addresses ON students.permanent_address_id = addresses.address_id;

SELECT * FROM students ORDER BY last_name DESC, first_name DESC;

SELECT first_name, last_name, other_student_details   FROM students   ORDER BY last_name DESC;

SELECT * FROM sections WHERE section_name = 'h';

SELECT section_description FROM sections WHERE section_name = 'h';

SELECT students.first_name FROM students WHERE students.permanent_address_id IN (     SELECT addresses.address_id     FROM addresses     WHERE addresses.country = 'Haiti' ) OR students.cell_mobile_number = '09700166582';

SELECT students.first_name FROM students WHERE students.permanent_address_id IN (     SELECT addresses.address_id     FROM addresses     WHERE addresses.country = 'Haiti' ) OR students.cell_mobile_number = '09700166582';

SELECT title FROM cartoon ORDER BY title;

SELECT title FROM cartoon ORDER BY title;

SELECT * FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT COUNT(*) FROM cartoon WHERE written_by = 'Joseph Kuhr';

SELECT title, directed_by FROM cartoon ORDER BY original_air_date;

SELECT c.title, c.directed_by  FROM cartoon c ORDER BY c.original_air_date;

SELECT title FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti';

SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti');

SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC;

SELECT country, COUNT(*) AS count FROM tv_channel GROUP BY country ORDER BY count DESC LIMIT 1;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;

SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT content FROM tv_series WHERE series_name = 'Sky Radio';

SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio';

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT COUNT(*) FROM tv_channel WHERE language = 'English';

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC LIMIT 1;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language ORDER BY count ASC LIMIT 1;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language;

SELECT language, COUNT(*) AS count FROM tv_channel GROUP BY language;

SELECT tc.series_name FROM tv_channel tc JOIN tv_series ts ON tc.id = ts.channel JOIN cartoon c ON ts.channel = c.channel WHERE c.title = 'The Rise of the Blue Beetle!';

SELECT tv_series.series_name  FROM tv_series  JOIN cartoon ON tv_series.channel = cartoon.channel  WHERE cartoon.title = 'The Rise of the Blue Beetle';

SELECT title FROM cartoon WHERE channel IN (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');

SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');

SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating;

SELECT ep.episode FROM tv_series ep JOIN tv_channel ch ON ep.channel = ch.id ORDER BY ep.rating DESC;

SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3;

SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;

SELECT MIN(share) AS min_share, MAX(share) AS max_share FROM tv_series;

SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM tv_series;

SELECT tv_series.air_date  FROM tv_series  WHERE tv_series.episode = 'A Love of a Lifetime';

SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.weekly_rank  FROM tv_series  WHERE episode = 'A Love of a Lifetime';

SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime';

SELECT series_name FROM tv_series WHERE episode = 'A Love of a Lifetime';

SELECT tv_series.episode FROM tv_series WHERE tv_series.channel = (     SELECT id     FROM tv_channel     WHERE tv_channel.series_name = 'Sky Radio' );

SELECT episode FROM tv_series WHERE series_name = 'Sky Radio';

SELECT director, COUNT(*) AS count FROM cartoon GROUP BY director;

SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;

SELECT c.production_code, c.channel FROM cartoon c WHERE c.original_air_date = (SELECT MAX(original_air_date) FROM cartoon);

SELECT c.production_code, c.channel  FROM cartoon c JOIN tv_channel t ON c.channel = t.id ORDER BY t.air_date DESC LIMIT 1;

SELECT tv_channel.package_option, tv_series.series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = TRUE;

SELECT package_option, series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE hight_definition_tv = TRUE;

SELECT t.country FROM tv_channel t JOIN tv_series s ON t.id = s.channel JOIN cartoon c ON s.channel = c.channel WHERE c.written_by = 'Todd Casey';

SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.written_by = 'Todd Casey';

SELECT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')

SELECT DISTINCT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.written_by != 'Todd Casey';

SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN cartoon ON tv_series.channel = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang';

SELECT tsc.series_name, tc.country FROM tv_channel tc JOIN tv_series tsc ON tc.id = tsc.channel WHERE tsc.directed_by IN ('Ben Jones', 'Michael Chang');

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';

SELECT pixel_aspect_ratio_par, country FROM tv_channel WHERE language != 'English';

SELECT id FROM tv_channel GROUP BY id HAVING COUNT(*) > 2;

SELECT id FROM tv_channel WHERE id > (SELECT COUNT(*) FROM tv_channel);

SELECT id FROM tv_channel WHERE id NOT IN (     SELECT channel FROM cartoon     WHERE directed_by = 'Ben Jones' );

SELECT DISTINCT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.title IS NULL AND cartoon.directed_by = 'Ben Jones';

SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');

SELECT COUNT(*) FROM poker_player;

SELECT COUNT(*) FROM poker_player;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT earnings FROM poker_player ORDER BY earnings DESC;

SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player;

SELECT final_table_made, best_finish FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT AVG(earnings) FROM poker_player;

SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;

SELECT name FROM poker_player;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE earnings > 300000;

SELECT p.name FROM poker_player p WHERE p.earnings > 300000;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC;

SELECT birth_date FROM poker_player ORDER BY earnings DESC LIMIT 1;

SELECT birth_date FROM poker_player ORDER BY earnings ASC LIMIT 1;

SELECT money_rank FROM poker_player WHERE height = (SELECT MAX(height) FROM people)

SELECT money_rank FROM poker_player WHERE height = (SELECT MAX(height) FROM people);

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT AVG(earnings) FROM poker_player WHERE height > 200;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC;

SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC;

SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;

SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;

SELECT DISTINCT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;

SELECT name, birth_date FROM people ORDER BY name ASC;

SELECT name, birth_date FROM people ORDER BY name;

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE nationality != 'Russia';

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player);

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT nationality) FROM people;

SELECT COUNT(DISTINCT state) FROM votes;

SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;

SELECT vote_id, phone_number, state FROM votes;

SELECT MAX(area_code), MIN(area_code) FROM area_code_state;

SELECT MAX(created) AS last_date_created FROM votes WHERE state = 'CA';

SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';

SELECT DISTINCT state, created FROM votes;

SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;

SELECT c.contestant_number, c.contestant_name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;

SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');

SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes);

SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;

SELECT created, state, phone_number FROM votes WHERE contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling');

SELECT DISTINCT area_code  FROM votes  WHERE contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')  AND contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss');

SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';

SELECT name FROM country WHERE indepyear > 1950;

SELECT name FROM country WHERE indepyear > 1950;

SELECT COUNT(*) FROM country WHERE governmentform = 'republic';

SELECT COUNT(*) FROM country WHERE governmentform = 'republic';

SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';

SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';

SELECT continent FROM country WHERE code = 'AN';

SELECT continent FROM country WHERE code = 'AN';

SELECT region FROM country WHERE code = 'AFG';

SELECT region FROM country WHERE code = 'AFG';

SELECT language, percentage FROM countrylanguage WHERE countrycode = (     SELECT code     FROM country     WHERE localname = 'Aruba' );

SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE localname = 'Aruba');

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';

SELECT region, population FROM country WHERE code = 'AO';

SELECT region, population FROM country WHERE code = 'AO';

SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';

SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND region = 'Central';

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1

SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;

SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM country WHERE continent = 'Asia';

SELECT COUNT(population) AS total_people, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';

SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';

SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';

SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe');

SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');

SELECT population FROM city WHERE district = 'Gelderland';

SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland';

SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US territory';

SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM country WHERE code IN (     SELECT code FROM city     WHERE countrycode IN (         SELECT code FROM country         WHERE countrycode IN (             SELECT code FROM city             WHERE countrycode IN (                 SELECT code FROM country                 WHERE countrycode IN (                     SELECT code FROM country                     WHERE countrycode IN (                         SELECT code FROM country                         WHERE countrycode IN (                             SELECT code FROM country                             WHERE countrycode IN (                                 SELECT code FROM country                                 WHERE countrycode IN (                                     SELECT code FROM country                                     WHERE countrycode IN (                                         SELECT code FROM country                                         WHERE countrycode IN (                                             SELECT code FROM country                                             WHERE countrycode IN (                                                 SELECT code FROM country                                                 WHERE countrycode IN (                                                     SELECT code FROM country                                                     WHERE countrycode IN (                                                         SELECT code FROM country                                                         WHERE countrycode IN (                                                             SELECT code FROM country                                                             WHERE countrycode IN (                                                                 SELECT code FROM country                                                                 WHERE countrycode IN (                                                                     SELECT code FROM country                                                                     WHERE countrycode IN (                                                                         SELECT code FROM country                                                                         WHERE countrycode IN (                                                                             SELECT code FROM country                                                                             WHERE countrycode IN (                                                                                 SELECT code FROM country                                                                                 WHERE countrycode IN (                                                                                     SELECT code FROM country                                                                                     WHERE countrycode IN (                                                                                         SELECT code FROM country                                                                                         WHERE countrycode IN (                                                                                             SELECT code FROM country                                                                                             WHERE countrycode IN (                                                                                                 SELECT code FROM country                                                                                                 WHERE countrycode IN (                                                                                                     SELECT code FROM country                                                                                                     WHERE countrycode IN (                                                                                                         SELECT code FROM country                                                                                                         WHERE countrycode IN (                                                                                                             SELECT code FROM country                                                                                                             WHERE countrycode IN (                                                                                                                 SELECT code FROM country                                                                                                                 WHERE countrycode IN (                                                                                                                     SELECT code FROM country                                                                                                                     WHERE countrycode IN (                                                                                                                         SELECT code FROM country                                                                                                                         WHERE countrycode IN (                                                                                                                             SELECT code FROM country                                                                                                                             WHERE countrycode IN (                                                                                                                                 SELECT code FROM country                                                                                                                                 WHERE countrycode IN (                                                                                                                                     SELECT code FROM country                                                                                                                                     WHERE countrycode IN (                                                                                                                                         SELECT code FROM country                                                                                                                                         WHERE countrycode IN (                                                                                                                                             SELECT code FROM country                                                                                                                                             WHERE countrycode IN (                                                                                                                                                 SELECT code FROM country                                                                                                                                                 WHERE countrycode IN (                                                                                                                                                     SELECT code FROM country                                                                                                                                                     WHERE countrycode IN (                                                                                                                                                         SELECT code FROM country                                                                                                                                                         WHERE countrycode IN (                                                                                                                                                             SELECT code FROM country                                                                                                                                                             WHERE countrycode IN (                                                                                                                                                                 SELECT code FROM country                                                                                                                                                                 WHERE countrycode IN (                                                                                                                                                                     SELECT code FROM country                                                                                                                                                                     WHERE countrycode IN (                                                                                                                                                                         SELECT code FROM country                                                                                                                                                                         WHERE countrycode IN (                                                                                                                                                                             SELECT code FROM country                                                                                                                                                                             WHERE countrycode IN (                                                                                                                                                                                 SELECT code FROM country                                                                                                                                                                                 WHERE countrycode IN (                                                                                                                                                                                     SELECT code FROM country                                                                                                                                                                                     WHERE countrycode IN (                                                                                                                                                                                         SELECT code FROM country                                                                                                                                                                                         WHERE countrycode IN (                                                                                                                                                                                             SELECT code FROM country                                                                                                                                                                                             WHERE countrycode IN (                                                                                                                                                                                                 SELECT code FROM country                                                                                                                                                                                                 WHERE countrycode IN (                                                                                                                                                                                                     SELECT code FROM country                                                                                                                                                                                                     WHERE countrycode IN (                                                                                                                                                                                                         SELECT code FROM country                                                                                                                                                                                                         WHERE countrycode IN (                                                                                                                                                                                                             SELECT code FROM country                                                                                                                                                                                                             WHERE countrycode IN (                                                                                                                                                                                                                 SELECT code FROM country

SELECT COUNT(*) FROM countrylanguage;

SELECT COUNT(DISTINCT language) FROM countrylanguage;

SELECT COUNT(*) FROM country WHERE continent = 'Africa' AND governmentform IS NOT NULL;

SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';

SELECT SUM(percentage) FROM countrylanguage WHERE countrycode = 'ABW';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABN';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'AFG';

SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan');

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code ORDER BY SUM(cl.percentage) DESC LIMIT 1;

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code ORDER BY SUM(cl.percentage) DESC LIMIT 1;

SELECT c.continent, COUNT(*) AS lang_count FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY lang_count DESC LIMIT 1;

SELECT c.continent, COUNT(*) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.continent ORDER BY num_languages DESC;

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM countrylanguage WHERE isofficial = TRUE AND language = 'English' UNION SELECT code FROM countrylanguage WHERE isofficial = TRUE AND language = 'Dutch');

SELECT COUNT(*) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE localname LIKE '%English%' OR localname LIKE '%Dutch%');

SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' AND cl.isofficial = TRUE AND cl.language = 'French' AND cl.isofficial = TRUE;

SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French';

SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French';

SELECT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'English' OR cl.language = 'French' AND cl.isofficial = TRUE;

SELECT COUNT(DISTINCT c.continent) FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Chinese';

SELECT COUNT(*) FROM countrylanguage JOIN country ON countrycode = country.code WHERE countryregion = 'Asia' AND language = 'Chinese';

SELECT DISTINCT region FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language IN ('English', 'Dutch') );

SELECT c.region, cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('Dutch', 'English');

SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch');

SELECT DISTINCT c.name FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language IN ('English', 'Dutch')

SELECT language, percentage FROM countrylanguage WHERE continent = 'Asian' ORDER BY percentage DESC LIMIT 1;

SELECT l.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code JOIN countrylanguage l ON cl.countrycode = l.countrycode WHERE c.region = 'Asia' ORDER BY l.percentage DESC LIMIT 1;

SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (     SELECT code FROM country     WHERE governmentform = 'Republic' AND population > 1000000 ) AND COUNT(*) = 1

SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (     SELECT code FROM country     WHERE governmentform = 'Republic'     AND COUNT(*) = 1 );

SELECT c.name FROM city c JOIN countrylanguage cl ON c.countrycode = cl.countrycode WHERE cl.language = 'English' ORDER BY c.population DESC LIMIT 1;

SELECT c.name FROM city c JOIN countrylanguage cl ON c.countrycode = cl.countrycode WHERE cl.language = 'English' ORDER BY c.population DESC LIMIT 1;

SELECT c.name, c.population, c.lifeexpectancy  FROM country c WHERE c.region = 'Asia' AND c.surfacearea = (SELECT MAX(surfacearea) FROM country WHERE region = 'Asia');

SELECT c.name, c.population, c.lifeexpectancy FROM country c WHERE c.continent = 'Asia' ORDER BY c.surfacearea DESC LIMIT 1;

SELECT AVG(lifeexpectancy) FROM country  WHERE code IN (SELECT code2 FROM countrylanguage WHERE isofficial = FALSE);

SELECT AVG(lifeexpectancy) FROM countrylanguage WHERE countrycode IN (     SELECT countrycode FROM country     WHERE countrycode NOT IN (         SELECT code FROM countrylanguage         WHERE isofficial = TRUE     ) );

SELECT COUNT(*) FROM city WHERE countrycode IN (SELECT code FROM country WHERE countrylanguage.language = 'English' AND isofficial = TRUE);

SELECT COUNT(*) FROM city WHERE countrycode IN (SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language = 'English'));

SELECT l.language FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE c.headofstate = 'Beatrix';

SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT countrycode     FROM country     WHERE headofstate = 'Beatrix' );

SELECT COUNT(DISTINCT c.language) FROM countrylanguage c WHERE c.countrycode IN (SELECT code FROM country WHERE indepyear < 1930);

SELECT COUNT(DISTINCT cl.language)  FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.indepyear < 1930;

SELECT c.name FROM country c WHERE c.surfacearea > ALL (     SELECT c2.surfacearea     FROM country c2     WHERE c2.continent = 'Europe' );

SELECT name FROM country WHERE surfacearea > ALL SELECT surfacearea FROM country WHERE continent = 'Europe';

SELECT c.code FROM country c WHERE c.continent = 'Africa' AND c.population < ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Asia' );

SELECT c1.name FROM country c1 WHERE c1.population < ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Asia' );

SELECT c.name FROM country c WHERE c.continent = 'Asia' AND c.population > ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Africa' );

SELECT c.name FROM country c WHERE c.continent = 'Asia' AND c.population > ALL (     SELECT c2.population     FROM country c2     WHERE c2.continent = 'Africa' );

SELECT c.code FROM country c WHERE NOT EXISTS (     SELECT 1     FROM countrylanguage cl     WHERE cl.countrycode = c.code     AND cl.language = 'English' );

SELECT DISTINCT c.code FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT DISTINCT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT DISTINCT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language != 'English';

SELECT c.code FROM country c WHERE NOT EXISTS (     SELECT 1     FROM countrylanguage cl     WHERE cl.countrycode = c.code     AND cl.language = 'English' ) AND c.governmentform != 'Republic';

SELECT code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language = 'English') AND governmentform != 'Republic';

SELECT c.name FROM city c JOIN country co ON c.countrycode = co.code WHERE co.region = 'European' AND co.governmentform = 'Democracy' AND co.continent = 'Europe' AND co.language ISNULL AND c.population > 100000 AND NOT EXISTS (     SELECT 1     FROM countrylanguage cl     WHERE cl.countrycode = co.code     AND cl.language = 'English' );

SELECT c.name FROM city c JOIN country co ON c.countrycode = co.code WHERE co.region = 'Europe' AND co.continent = 'Europe' AND co.governmentform = 'Democracy' AND c.population > 100000 AND NOT EXISTS (     SELECT 1     FROM countrylanguage cl     WHERE cl.countrycode = co.code     AND cl.language = 'English'     AND cl.isofficial = TRUE );

SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.region = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = TRUE;

SELECT DISTINCT name FROM city  JOIN country ON city.countrycode = country.code  WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = TRUE;

SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country);

SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)

SELECT c.population, c.name, c.headofstate FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country);

SELECT c.name, c.population, c.headofstate FROM country c WHERE c.surfacearea = (SELECT MAX(surfacearea) FROM country);

SELECT c.name, COUNT(*) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code HAVING COUNT(cl.language) >= 3;

SELECT c.name, COUNT(*) AS num_languages FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY c.code HAVING COUNT(cl.language) > 2;

SELECT c.district, COUNT(*) AS num_cities FROM city c WHERE c.population > (SELECT AVG(population) FROM city) GROUP BY c.district;

SELECT c.district, COUNT(*) AS count FROM city c GROUP BY c.district;

SELECT c.governmentform, SUM(c.population) AS totalpopulation FROM country c JOIN city cl ON c.code = cl.countrycode WHERE c.lifeexpectancy > 72 GROUP BY c.governmentform;

SELECT DISTINCT governmentform, SUM(population) AS totalpopulation FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;

SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;

SELECT c.continent, SUM(c.population) AS total_population, AVG(cl.lifeexpectancy) AS avg_life_expectancy FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.lifeexpectancy < 72 GROUP BY c.continent;

SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5;

SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country ORDER BY population DESC LIMIT 3;

SELECT name FROM country ORDER BY population ASC LIMIT 3;

SELECT name FROM country ORDER BY population LIMIT 3;

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT COUNT(*) FROM country WHERE continent = 'Asia';

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;

SELECT SUM(population) AS total_population, AVG(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000;

SELECT c.population, AVG(c.surfacearea) AS avg_surfacearea FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000 GROUP BY c.code;

SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;

SELECT city.name FROM city WHERE city.population BETWEEN 160000 AND 900000;

SELECT l.language, COUNT(*) AS count FROM countrylanguage cl JOIN countrylanguage l ON cl.countrycode = l.countrycode GROUP BY l.language ORDER BY count DESC LIMIT 1;

SELECT language, COUNT(*) AS count FROM countrylanguage GROUP BY language ORDER BY count DESC LIMIT 1;

SELECT c.name AS country_name, l.language AS language, SUM(p.population) AS total_population FROM country c JOIN countrylanguage l ON c.code = l.countrycode JOIN city p ON c.code = p.countrycode GROUP BY c.code, l.language ORDER BY total_population DESC;

SELECT c.code, l.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode JOIN language l ON cl.language = l.name WHERE cl.percentage = (SELECT MAX(percentage) FROM countrylanguage) ORDER BY c.code;

SELECT COUNT(*) FROM countrylanguage WHERE percentage > ALL SELECT percentage FROM countrylanguage WHERE language = 'Spanish'

SELECT COUNT(*) FROM countrylanguage WHERE isofficial = TRUE AND language = 'Spanish';

SELECT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Spanish' ORDER BY percentage DESC LIMIT 1;

SELECT DISTINCT c.code FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language = 'Spanish' AND cl.isofficial = TRUE;

SELECT COUNT(*) FROM conductor;

SELECT COUNT(*) FROM conductor;

SELECT name FROM conductor ORDER BY age ASC;

SELECT name FROM conductor ORDER BY age;

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT name FROM conductor WHERE nationality != 'USA';

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;

SELECT AVG(attendance) AS average_attendance FROM show;

SELECT AVG(attendance) FROM show;

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT MAX(share), MIN(share) FROM performance WHERE type != 'Live final';

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT COUNT(DISTINCT nationality) FROM conductor;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC;

SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;

SELECT name FROM conductor ORDER BY ABS(year_of_work - 1900) DESC LIMIT 1;

SELECT conductor.name, orchestra.orchestra  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;

SELECT c.name, o.orchestra  FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id;

SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(*) > 1);

SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(*) > 1);

SELECT name FROM conductor GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM conductor WHERE conductor_id IN (     SELECT conductor_id FROM orchestra     GROUP BY conductor_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT name FROM conductor  WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008);

SELECT name FROM conductor WHERE conductor_id IN (     SELECT conductor_id FROM orchestra     WHERE year_of_founded > 2008 );

SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company;

SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company;

SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;

SELECT major_record_format, COUNT(*) AS freq FROM orchestra GROUP BY major_record_format ORDER BY freq DESC;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1;

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance);

SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003;

SELECT record_company FROM orchestra WHERE year_of_founded < 2003 UNION SELECT record_company FROM orchestra WHERE year_of_founded > 2003;

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT COUNT(*) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');

SELECT DISTINCT orchestra_year FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id     FROM performance     GROUP BY orchestra_id     HAVING COUNT(*) > 1 );

SELECT orchestra.year_of_founded FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id     FROM performance     GROUP BY orchestra_id     HAVING COUNT(*) > 1 );

SELECT COUNT(*) FROM highschooler;

SELECT COUNT(*) FROM highschooler;

SELECT name, grade FROM highschooler;

SELECT name, grade FROM highschooler;

SELECT grade FROM highschooler;

SELECT h.grade FROM highschooler h;

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT grade FROM highschooler WHERE name = 'Kyle';

SELECT name FROM highschooler WHERE grade = 10;

SELECT name FROM highschooler WHERE grade = 10;

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT id FROM highschooler WHERE name = 'Kyle';

SELECT COUNT(*) FROM highschooler WHERE grade BETWEEN 9 AND 10;

SELECT COUNT(*) FROM highschooler WHERE grade BETWEEN 9 AND 10;

SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade;

SELECT grade, COUNT(*) AS count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;

SELECT f.student_id, COUNT(*) AS num_friends FROM friend f GROUP BY f.student_id;

SELECT f.student_id, COUNT(*) AS num_friends FROM friend f GROUP BY f.student_id;

SELECT h.name, COUNT(f.student_id) AS num_friends FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT h.name, COUNT(*) AS num_friends FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.name;

SELECT name FROM highschooler WHERE id IN (     SELECT student_id FROM friend     GROUP BY student_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT name FROM highschooler ORDER BY COUNT(*) DESC LIMIT 1;

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE student_id = friend_id GROUP BY student_id HAVING COUNT(*) >= 3);

SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend WHERE friend_id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 3)));

SELECT name FROM highschooler  WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));

SELECT name FROM highschooler WHERE id IN (SELECT friend_id FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle'));

SELECT COUNT(*) FROM friend WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.student_id = l.student_id;

SELECT DISTINCT f.student_id FROM friend f JOIN likes l ON f.student_id = l.student_id WHERE f.student_id IN (     SELECT id FROM highschooler     WHERE EXISTS (         SELECT 1 FROM friend WHERE friend_id = f.student_id     ) );

SELECT h.name FROM highschooler h WHERE h.id IN (     SELECT f.student_id     FROM friend f     WHERE f.friend_id IN (         SELECT l.liked_id         FROM likes l     ) );

SELECT h.name FROM highschooler h WHERE h.id IN (     SELECT f.student_id     FROM friend f     WHERE f.friend_id IN (         SELECT l.liked_id         FROM likes l         WHERE l.student_id IN (             SELECT h.id             FROM highschooler h             WHERE h.id IN (                 SELECT f.student_id                 FROM friend f                 WHERE f.friend_id IN (                     SELECT l.liked_id                     FROM likes l                     WHERE l.student_id = h.id                 )             )         )     ) ) AND h.grade BETWEEN 9 AND 12;

SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id;

SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id;

SELECT f.name, COUNT(*) AS like_count FROM friend f JOIN likes l ON f.student_id = l.student_id GROUP BY f.name;

SELECT f.name, COUNT(*) AS num_likes FROM highschooler f JOIN friend ON f.id = friend.student_id JOIN likes ON friend.friend_id = likes.liked_id GROUP BY f.name;

SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.student_id GROUP BY h.id ORDER BY COUNT(l.liked_id) DESC LIMIT 1;

SELECT name FROM highschooler WHERE id IN (     SELECT student_id FROM likes     GROUP BY student_id     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes GROUP BY liked_id HAVING COUNT(*) >= 2);

SELECT name FROM highschooler WHERE id IN (SELECT liked_id FROM likes GROUP BY liked_id HAVING COUNT(*) >= 2);

SELECT name FROM highschooler WHERE grade > 5 AND COUNT(*) >= 2;

SELECT name FROM highschooler WHERE grade > 5 AND EXISTS (SELECT 1 FROM friend WHERE friend.student_id = highschooler.id AND friend.friend_id = highschooler.id GROUP BY student_id HAVING COUNT(*) >= 2);

SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT COUNT(*) FROM likes WHERE student_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');

SELECT AVG(h.grade) AS avg_grade FROM highschooler h WHERE h.id IN (     SELECT f.student_id     FROM friend f     WHERE f.friend_id IN (         SELECT f2.friend_id         FROM friend f2         WHERE f2.student_id = f.student_id     ) );

SELECT AVG(h.grade) AS avg_grade FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id;

SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend);

SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);

SELECT DISTINCT o.state FROM owners o WHERE o.state = 'CA' AND EXISTS (SELECT 1 FROM professionals p WHERE p.state = o.state);

SELECT DISTINCT o.state FROM owners o WHERE o.state IS NOT NULL AND EXISTS (SELECT 1 FROM professionals p WHERE p.state = o.state);

SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);

SELECT AVG(d.age) AS avg_age FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id;

SELECT p.professional_id, p.last_name, p.cell_number   FROM professionals p   WHERE p.state = 'Indiana' OR EXISTS (       SELECT 1       FROM treatments t       WHERE t.professional_id = p.professional_id       GROUP BY t.professional_id       HAVING COUNT(*) > 2   );

SELECT professionals.professional_id, professionals.last_name, professionals.cell_number   FROM professionals   WHERE professionals.state = 'Indiana' OR professionals.state IN (SELECT state FROM professionals WHERE COUNT(*) > 2);

SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment > 1000;

SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment < 1000;

SELECT o.first_name FROM owners o WHERE o.first_name NOT IN (SELECT d.name FROM dogs d); UNION SELECT p.first_name FROM professionals p WHERE p.first_name NOT IN (SELECT d.name FROM dogs d);

SELECT DISTINCT owners.first_name FROM owners WHERE owners.first_name NOT IN (SELECT dogs.name FROM dogs);

SELECT p.professional_id, p.role_code, p.email_address  FROM professionals p WHERE p.professional_id NOT IN (     SELECT t.professional_id      FROM treatments t     JOIN dogs d ON t.dog_id = d.dog_id );

SELECT p.professional_id, p.role_code, p.email_address  FROM professionals p LEFT JOIN treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;

SELECT o.owner_id, o.first_name, o.last_name FROM owners o WHERE o.owner_id IN (     SELECT d.owner_id     FROM dogs d     GROUP BY d.owner_id     ORDER BY COUNT(d.dog_id) DESC     LIMIT 1 );

SELECT o.owner_id, o.first_name, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT p.professional_id, p.role_code, p.first_name  FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(*) >= 2;

SELECT p.professional_id, p.role_code, p.first_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(*) >= 2;

SELECT breed_name FROM breeds ORDER BY COUNT(*) DESC LIMIT 1;

SELECT breed_name FROM breeds WHERE breed_code IN (     SELECT breed_code     FROM dogs     GROUP BY breed_code     ORDER BY COUNT(*) DESC     LIMIT 1 );

SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(*) DESC LIMIT 1;

SELECT o.owner_id, o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;

SELECT t.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE t.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM treatments);

SELECT tt.treatment_type_description FROM treatments t JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code WHERE t.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM treatments)

SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(d.charge_amount) DESC LIMIT 1;

SELECT o.owner_id, o.zip_code FROM owners o JOIN dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(d.charge_amount) DESC LIMIT 1;

SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;

SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_id) >= 2;

SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT p.first_name, p.last_name FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);

SELECT t.date_of_treatment, p.first_name  FROM treatments t  JOIN professionals p ON t.professional_id = p.professional_id;

SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id;

SELECT charges.charge_amount AS cost, treatment_types.treatment_type_description AS treatment_type FROM charges JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code;

SELECT charges.charge_amount AS cost, treatment_types.treatment_type_description AS treatment_type_description FROM charges JOIN treatment_types ON charges.charge_type = treatment_types.treatment_type_code;

SELECT o.first_name, o.last_name, s.size_description  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, o.last_name, s.size_description  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id JOIN sizes s ON d.size_code = s.size_code;

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id;

SELECT o.first_name, d.name  FROM owners o  JOIN dogs d ON o.owner_id = d.owner_id;

SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (SELECT breed_name FROM breeds WHERE breed_code = (SELECT breed_code FROM breeds WHERE breed_name = 'Rarest'));

SELECT d.name, t.date_of_treatment FROM dogs d JOIN treatment_types tt ON d.dog_id = tt.dog_id JOIN treatments t ON d.dog_id = t.dog_id JOIN breeds b ON d.breed_code = b.breed_code WHERE b.breed_code IN (     SELECT DISTINCT breed_code FROM breeds     GROUP BY breed_code     HAVING COUNT(*) = 1 );

SELECT o.first_name, d.name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';

SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';

SELECT d.date_arrived, d.date_departed  FROM dogs d  JOIN treatments t ON d.dog_id = t.dog_id  WHERE t.date_of_treatment >= '2023-01-01';

SELECT d.date_arrived, d.date_departed FROM dogs d WHERE EXISTS (     SELECT 1     FROM treatments t     WHERE t.dog_id = d.dog_id     AND t.date_of_treatment = (SELECT MIN(date_of_treatment) FROM treatments t2 WHERE t2.dog_id = d.dog_id) );

SELECT o.last_name FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);

SELECT o.last_name  FROM owners o JOIN dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs);

SELECT p.email_address FROM professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');

SELECT p.email_address FROM professionals p WHERE p.state IN ('Hawaii', 'Wisconsin');

SELECT date_arrived, date_departed FROM dogs;

SELECT dates.date_arrived, dates.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT COUNT(*) FROM treatments;

SELECT p.role_code, p.street, p.city, p.state  FROM professionals p WHERE p.city LIKE '%West%';

SELECT p.role_code, p.street, p.city, p.state  FROM professionals p  WHERE p.city LIKE '%West%';

SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%';

SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%';

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);

SELECT charge_amount FROM charges ORDER BY date_arrived DESC LIMIT 1;

SELECT t.cost_of_treatment FROM treatments t ORDER BY t.date_of_treatment DESC LIMIT 1;

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);

SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);

SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT dog_id FROM dogs);

SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);

SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);

SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT dog_id FROM treatments);

SELECT dogs.name, dogs.age, dogs.weight  FROM dogs  WHERE dogs.abandoned_yn = 'Y';

SELECT d.name, d.age, d.weight FROM dogs d WHERE d.abandoned_yn = 'Y';

SELECT AVG(age) FROM dogs;

SELECT AVG(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT MAX(age) FROM dogs;

SELECT charges.charge_type, charges.charge_amount FROM charges;

SELECT charge_type, charge_amount FROM charges;

SELECT MAX(charge_amount) FROM charges;

SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1;

SELECT email_address, home_phone, cell_number FROM professionals;

SELECT professionals.email_address, professionals.cell_number, professionals.home_phone  FROM professionals;

SELECT b.breed_name, s.size_description FROM breeds b JOIN sizes s;

SELECT DISTINCT breed_code, size_code FROM dogs;

SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

SELECT COUNT(*) FROM singer;

SELECT COUNT(*) FROM singer;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT name FROM singer ORDER BY net_worth_millions ASC;

SELECT birth_year, citizenship FROM singer;

SELECT birth_year, citizenship FROM singer;

SELECT name FROM singer WHERE citizenship != 'France';

SELECT name FROM singer WHERE citizenship != 'French';

SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;

SELECT name FROM singer WHERE birth_year IN (1948, 1949);

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;

SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;

SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;

SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;

SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;

SELECT song.title, singer.name  FROM song  JOIN singer ON song.singer_id = singer.singer_id;

SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id;

SELECT DISTINCT name FROM singer WHERE EXISTS (SELECT 1 FROM song WHERE song.singer_id = singer.singer_id AND song.sales > 300000);

SELECT DISTINCT name FROM singer WHERE sales > 300000;

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);

SELECT s.name, SUM(song.sales) AS total_sales FROM singer s JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;

SELECT s.name, SUM(song.sales) AS total_sales FROM singer s JOIN song ON s.singer_id = song.singer_id GROUP BY s.name;

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song);

SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;

SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;

SELECT COUNT(*) FROM other_available_features;

SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = ('AirCon');

SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON properties.property_type_code = ref_property_types.property_type_code;

SELECT properties.property_name FROM properties WHERE properties.property_type_code IN ('H' , 'A') AND properties.room_count > 1;

